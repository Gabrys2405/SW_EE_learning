
OLED_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c0  080030bc  080030bc  000040bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800427c  0800427c  0000606c  2**0
                  CONTENTS
  4 .ARM          00000000  0800427c  0800427c  0000606c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800427c  0800427c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800427c  0800427c  0000527c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004280  08004280  00005280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004284  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2000006c  080042f0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  080042f0  0000663c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007015  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001790  00000000  00000000  0000d0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0000e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f6  00000000  00000000  0000f010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017012  00000000  00000000  0000f606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a698  00000000  00000000  00026618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822a3  00000000  00000000  00030cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2f53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000244c  00000000  00000000  000b2f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b53e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030a4 	.word	0x080030a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080030a4 	.word	0x080030a4

0800014c <uint32_to_string.0>:
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	char* uint32_to_string(uint32_t value) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	f8c7 c000 	str.w	ip, [r7]

		char* buffer = (char*)malloc(11);
 8000158:	200b      	movs	r0, #11
 800015a:	f002 faeb 	bl	8002734 <malloc>
 800015e:	4603      	mov	r3, r0
 8000160:	60fb      	str	r3, [r7, #12]
		if (buffer == NULL) {
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d101      	bne.n	800016c <uint32_to_string.0+0x20>
			return NULL;
 8000168:	2300      	movs	r3, #0
 800016a:	e005      	b.n	8000178 <uint32_to_string.0+0x2c>
		}


		sprintf(buffer, "%u", value);
 800016c:	687a      	ldr	r2, [r7, #4]
 800016e:	4904      	ldr	r1, [pc, #16]	@ (8000180 <uint32_to_string.0+0x34>)
 8000170:	68f8      	ldr	r0, [r7, #12]
 8000172:	f002 fb95 	bl	80028a0 <siprintf>

		return buffer;
 8000176:	68fb      	ldr	r3, [r7, #12]
	}
 8000178:	4618      	mov	r0, r3
 800017a:	3710      	adds	r7, #16
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	080030bc 	.word	0x080030bc

08000184 <main>:
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af02      	add	r7, sp, #8
int main(void)
 800018a:	f107 0310 	add.w	r3, r7, #16
 800018e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000190:	f000 fdea 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000194:	f000 f878 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000198:	f000 f8ea 	bl	8000370 <MX_GPIO_Init>
  MX_I2C1_Init();
 800019c:	f000 f8ba 	bl	8000314 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  var1_str = uint32_to_string(var1);
 80001a0:	4b32      	ldr	r3, [pc, #200]	@ (800026c <main+0xe8>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	1d3a      	adds	r2, r7, #4
 80001a6:	4694      	mov	ip, r2
 80001a8:	4618      	mov	r0, r3
 80001aa:	f7ff ffcf 	bl	800014c <uint32_to_string.0>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000270 <main+0xec>)
 80001b2:	6013      	str	r3, [r2, #0]
  var2_str = uint32_to_string(var2);
 80001b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000274 <main+0xf0>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	1d3a      	adds	r2, r7, #4
 80001ba:	4694      	mov	ip, r2
 80001bc:	4618      	mov	r0, r3
 80001be:	f7ff ffc5 	bl	800014c <uint32_to_string.0>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000278 <main+0xf4>)
 80001c6:	6013      	str	r3, [r2, #0]

  SSD1306_Init();
 80001c8:	f000 fa0e 	bl	80005e8 <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 80001cc:	2100      	movs	r1, #0
 80001ce:	2000      	movs	r0, #0
 80001d0:	f000 fb72 	bl	80008b8 <SSD1306_GotoXY>
  SSD1306_Puts(var1_str, &Font_11x18, 1);
 80001d4:	4b26      	ldr	r3, [pc, #152]	@ (8000270 <main+0xec>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2201      	movs	r2, #1
 80001da:	4928      	ldr	r1, [pc, #160]	@ (800027c <main+0xf8>)
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fbff 	bl	80009e0 <SSD1306_Puts>
  SSD1306_GotoXY(0, 30);
 80001e2:	211e      	movs	r1, #30
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 fb67 	bl	80008b8 <SSD1306_GotoXY>
  SSD1306_Puts(var2_str, &Font_11x18, 1);
 80001ea:	4b23      	ldr	r3, [pc, #140]	@ (8000278 <main+0xf4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2201      	movs	r2, #1
 80001f0:	4922      	ldr	r1, [pc, #136]	@ (800027c <main+0xf8>)
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fbf4 	bl	80009e0 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80001f8:	f000 faba 	bl	8000770 <SSD1306_UpdateScreen>

  SSD1306_ScrollLeft(0, 10);
 80001fc:	210a      	movs	r1, #10
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 f94a 	bl	8000498 <SSD1306_ScrollLeft>
  HAL_Delay(3000);
 8000204:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000208:	f000 fe10 	bl	8000e2c <HAL_Delay>
  SSD1306_ScrollRight(0, 10);
 800020c:	210a      	movs	r1, #10
 800020e:	2000      	movs	r0, #0
 8000210:	f000 f90c 	bl	800042c <SSD1306_ScrollRight>
  HAL_Delay(3000);
 8000214:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000218:	f000 fe08 	bl	8000e2c <HAL_Delay>
  SSD1306_Stopscroll();
 800021c:	f000 f972 	bl	8000504 <SSD1306_Stopscroll>
  HAL_Delay(3000);
 8000220:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000224:	f000 fe02 	bl	8000e2c <HAL_Delay>
  SSD1306_Clear();
 8000228:	f000 fbff 	bl	8000a2a <SSD1306_Clear>

  SSD1306_DrawBitmap(0, 0, img, 128, 64, 1);
 800022c:	2301      	movs	r3, #1
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	2340      	movs	r3, #64	@ 0x40
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2380      	movs	r3, #128	@ 0x80
 8000236:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <main+0xfc>)
 8000238:	2100      	movs	r1, #0
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f96b 	bl	8000516 <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 8000240:	f000 fa96 	bl	8000770 <SSD1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_Delay(1000);
 8000244:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000248:	f000 fdf0 	bl	8000e2c <HAL_Delay>
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
 800024c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000250:	480c      	ldr	r0, [pc, #48]	@ (8000284 <main+0x100>)
 8000252:	f001 f88f 	bl	8001374 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000256:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800025a:	f000 fde7 	bl	8000e2c <HAL_Delay>
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
 800025e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000262:	4808      	ldr	r0, [pc, #32]	@ (8000284 <main+0x100>)
 8000264:	f001 f886 	bl	8001374 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000268:	bf00      	nop
 800026a:	e7eb      	b.n	8000244 <main+0xc0>
 800026c:	20000008 	.word	0x20000008
 8000270:	200000dc 	.word	0x200000dc
 8000274:	2000000c 	.word	0x2000000c
 8000278:	200000e0 	.word	0x200000e0
 800027c:	20000000 	.word	0x20000000
 8000280:	08003e1c 	.word	0x08003e1c
 8000284:	40011000 	.word	0x40011000

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b090      	sub	sp, #64	@ 0x40
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2228      	movs	r2, #40	@ 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fb22 	bl	80028e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002aa:	2301      	movs	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	2302      	movs	r3, #2
 80002be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fe33 	bl	8001f3c <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002dc:	f000 f8a0 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 f8a0 	bl	8002440 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000306:	f000 f88b 	bl	8000420 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3740      	adds	r7, #64	@ 0x40
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000318:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <MX_I2C1_Init+0x50>)
 800031a:	4a13      	ldr	r2, [pc, #76]	@ (8000368 <MX_I2C1_Init+0x54>)
 800031c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800031e:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000320:	4a12      	ldr	r2, [pc, #72]	@ (800036c <MX_I2C1_Init+0x58>)
 8000322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <MX_I2C1_Init+0x50>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000332:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000338:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800033e:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000344:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034a:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <MX_I2C1_Init+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000350:	4804      	ldr	r0, [pc, #16]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000352:	f001 f829 	bl	80013a8 <HAL_I2C_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800035c:	f000 f860 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000088 	.word	0x20000088
 8000368:	40005400 	.word	0x40005400
 800036c:	00061a80 	.word	0x00061a80

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000384:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <MX_GPIO_Init+0xa8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a23      	ldr	r2, [pc, #140]	@ (8000418 <MX_GPIO_Init+0xa8>)
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b21      	ldr	r3, [pc, #132]	@ (8000418 <MX_GPIO_Init+0xa8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0310 	and.w	r3, r3, #16
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800039c:	4b1e      	ldr	r3, [pc, #120]	@ (8000418 <MX_GPIO_Init+0xa8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000418 <MX_GPIO_Init+0xa8>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000418 <MX_GPIO_Init+0xa8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0320 	and.w	r3, r3, #32
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a17      	ldr	r2, [pc, #92]	@ (8000418 <MX_GPIO_Init+0xa8>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <MX_GPIO_Init+0xa8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <MX_GPIO_Init+0xa8>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a11      	ldr	r2, [pc, #68]	@ (8000418 <MX_GPIO_Init+0xa8>)
 80003d2:	f043 0308 	orr.w	r3, r3, #8
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_GPIO_Init+0xa8>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0308 	and.w	r3, r3, #8
 80003e0:	603b      	str	r3, [r7, #0]
 80003e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ea:	480c      	ldr	r0, [pc, #48]	@ (800041c <MX_GPIO_Init+0xac>)
 80003ec:	f000 ffaa 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80003f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2302      	movs	r3, #2
 8000400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	4619      	mov	r1, r3
 8000408:	4804      	ldr	r0, [pc, #16]	@ (800041c <MX_GPIO_Init+0xac>)
 800040a:	f000 fe17 	bl	800103c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040e:	bf00      	nop
 8000410:	3720      	adds	r7, #32
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	40011000 	.word	0x40011000

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	460a      	mov	r2, r1
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	4613      	mov	r3, r2
 800043a:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 800043c:	2226      	movs	r2, #38	@ 0x26
 800043e:	2100      	movs	r1, #0
 8000440:	2078      	movs	r0, #120	@ 0x78
 8000442:	f000 fb75 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	2078      	movs	r0, #120	@ 0x78
 800044c:	f000 fb70 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	461a      	mov	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	2078      	movs	r0, #120	@ 0x78
 8000458:	f000 fb6a 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800045c:	2200      	movs	r2, #0
 800045e:	2100      	movs	r1, #0
 8000460:	2078      	movs	r0, #120	@ 0x78
 8000462:	f000 fb65 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000466:	79bb      	ldrb	r3, [r7, #6]
 8000468:	461a      	mov	r2, r3
 800046a:	2100      	movs	r1, #0
 800046c:	2078      	movs	r0, #120	@ 0x78
 800046e:	f000 fb5f 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000472:	2200      	movs	r2, #0
 8000474:	2100      	movs	r1, #0
 8000476:	2078      	movs	r0, #120	@ 0x78
 8000478:	f000 fb5a 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800047c:	22ff      	movs	r2, #255	@ 0xff
 800047e:	2100      	movs	r1, #0
 8000480:	2078      	movs	r0, #120	@ 0x78
 8000482:	f000 fb55 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000486:	222f      	movs	r2, #47	@ 0x2f
 8000488:	2100      	movs	r1, #0
 800048a:	2078      	movs	r0, #120	@ 0x78
 800048c:	f000 fb50 	bl	8000b30 <ssd1306_I2C_Write>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	460a      	mov	r2, r1
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	4613      	mov	r3, r2
 80004a6:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80004a8:	2227      	movs	r2, #39	@ 0x27
 80004aa:	2100      	movs	r1, #0
 80004ac:	2078      	movs	r0, #120	@ 0x78
 80004ae:	f000 fb3f 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	2078      	movs	r0, #120	@ 0x78
 80004b8:	f000 fb3a 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	461a      	mov	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	2078      	movs	r0, #120	@ 0x78
 80004c4:	f000 fb34 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2078      	movs	r0, #120	@ 0x78
 80004ce:	f000 fb2f 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	461a      	mov	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	2078      	movs	r0, #120	@ 0x78
 80004da:	f000 fb29 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	2078      	movs	r0, #120	@ 0x78
 80004e4:	f000 fb24 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80004e8:	22ff      	movs	r2, #255	@ 0xff
 80004ea:	2100      	movs	r1, #0
 80004ec:	2078      	movs	r0, #120	@ 0x78
 80004ee:	f000 fb1f 	bl	8000b30 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80004f2:	222f      	movs	r2, #47	@ 0x2f
 80004f4:	2100      	movs	r1, #0
 80004f6:	2078      	movs	r0, #120	@ 0x78
 80004f8:	f000 fb1a 	bl	8000b30 <ssd1306_I2C_Write>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000508:	222e      	movs	r2, #46	@ 0x2e
 800050a:	2100      	movs	r1, #0
 800050c:	2078      	movs	r0, #120	@ 0x78
 800050e:	f000 fb0f 	bl	8000b30 <ssd1306_I2C_Write>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}

08000516 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b086      	sub	sp, #24
 800051a:	af00      	add	r7, sp, #0
 800051c:	60ba      	str	r2, [r7, #8]
 800051e:	461a      	mov	r2, r3
 8000520:	4603      	mov	r3, r0
 8000522:	81fb      	strh	r3, [r7, #14]
 8000524:	460b      	mov	r3, r1
 8000526:	81bb      	strh	r3, [r7, #12]
 8000528:	4613      	mov	r3, r2
 800052a:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800052c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000530:	3307      	adds	r3, #7
 8000532:	2b00      	cmp	r3, #0
 8000534:	da00      	bge.n	8000538 <SSD1306_DrawBitmap+0x22>
 8000536:	3307      	adds	r3, #7
 8000538:	10db      	asrs	r3, r3, #3
 800053a:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000540:	2300      	movs	r3, #0
 8000542:	82bb      	strh	r3, [r7, #20]
 8000544:	e044      	b.n	80005d0 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000546:	2300      	movs	r3, #0
 8000548:	827b      	strh	r3, [r7, #18]
 800054a:	e02f      	b.n	80005ac <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800054c:	8a7b      	ldrh	r3, [r7, #18]
 800054e:	f003 0307 	and.w	r3, r3, #7
 8000552:	2b00      	cmp	r3, #0
 8000554:	d003      	beq.n	800055e <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	75fb      	strb	r3, [r7, #23]
 800055c:	e012      	b.n	8000584 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800055e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000562:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000566:	fb03 f202 	mul.w	r2, r3, r2
 800056a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800056e:	2b00      	cmp	r3, #0
 8000570:	da00      	bge.n	8000574 <SSD1306_DrawBitmap+0x5e>
 8000572:	3307      	adds	r3, #7
 8000574:	10db      	asrs	r3, r3, #3
 8000576:	b21b      	sxth	r3, r3
 8000578:	4413      	add	r3, r2
 800057a:	461a      	mov	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4413      	add	r3, r2
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000588:	2b00      	cmp	r3, #0
 800058a:	da09      	bge.n	80005a0 <SSD1306_DrawBitmap+0x8a>
 800058c:	89fa      	ldrh	r2, [r7, #14]
 800058e:	8a7b      	ldrh	r3, [r7, #18]
 8000590:	4413      	add	r3, r2
 8000592:	b29b      	uxth	r3, r3
 8000594:	89b9      	ldrh	r1, [r7, #12]
 8000596:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f92e 	bl	80007fc <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80005a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	3301      	adds	r3, #1
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	827b      	strh	r3, [r7, #18]
 80005ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80005b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbc9      	blt.n	800054c <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80005b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	3301      	adds	r3, #1
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	82bb      	strh	r3, [r7, #20]
 80005c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	81bb      	strh	r3, [r7, #12]
 80005d0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80005d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbb4      	blt.n	8000546 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80005ee:	f000 fa25 	bl	8000a3c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005f2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80005f6:	2201      	movs	r2, #1
 80005f8:	2178      	movs	r1, #120	@ 0x78
 80005fa:	485b      	ldr	r0, [pc, #364]	@ (8000768 <SSD1306_Init+0x180>)
 80005fc:	f001 f916 	bl	800182c <HAL_I2C_IsDeviceReady>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000606:	2300      	movs	r3, #0
 8000608:	e0a9      	b.n	800075e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800060a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800060e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000610:	e002      	b.n	8000618 <SSD1306_Init+0x30>
		p--;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3b01      	subs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f9      	bne.n	8000612 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800061e:	22ae      	movs	r2, #174	@ 0xae
 8000620:	2100      	movs	r1, #0
 8000622:	2078      	movs	r0, #120	@ 0x78
 8000624:	f000 fa84 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000628:	2220      	movs	r2, #32
 800062a:	2100      	movs	r1, #0
 800062c:	2078      	movs	r0, #120	@ 0x78
 800062e:	f000 fa7f 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000632:	2210      	movs	r2, #16
 8000634:	2100      	movs	r1, #0
 8000636:	2078      	movs	r0, #120	@ 0x78
 8000638:	f000 fa7a 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800063c:	22b0      	movs	r2, #176	@ 0xb0
 800063e:	2100      	movs	r1, #0
 8000640:	2078      	movs	r0, #120	@ 0x78
 8000642:	f000 fa75 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000646:	22c8      	movs	r2, #200	@ 0xc8
 8000648:	2100      	movs	r1, #0
 800064a:	2078      	movs	r0, #120	@ 0x78
 800064c:	f000 fa70 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2078      	movs	r0, #120	@ 0x78
 8000656:	f000 fa6b 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800065a:	2210      	movs	r2, #16
 800065c:	2100      	movs	r1, #0
 800065e:	2078      	movs	r0, #120	@ 0x78
 8000660:	f000 fa66 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000664:	2240      	movs	r2, #64	@ 0x40
 8000666:	2100      	movs	r1, #0
 8000668:	2078      	movs	r0, #120	@ 0x78
 800066a:	f000 fa61 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800066e:	2281      	movs	r2, #129	@ 0x81
 8000670:	2100      	movs	r1, #0
 8000672:	2078      	movs	r0, #120	@ 0x78
 8000674:	f000 fa5c 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000678:	22ff      	movs	r2, #255	@ 0xff
 800067a:	2100      	movs	r1, #0
 800067c:	2078      	movs	r0, #120	@ 0x78
 800067e:	f000 fa57 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000682:	22a1      	movs	r2, #161	@ 0xa1
 8000684:	2100      	movs	r1, #0
 8000686:	2078      	movs	r0, #120	@ 0x78
 8000688:	f000 fa52 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800068c:	22a6      	movs	r2, #166	@ 0xa6
 800068e:	2100      	movs	r1, #0
 8000690:	2078      	movs	r0, #120	@ 0x78
 8000692:	f000 fa4d 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000696:	22a8      	movs	r2, #168	@ 0xa8
 8000698:	2100      	movs	r1, #0
 800069a:	2078      	movs	r0, #120	@ 0x78
 800069c:	f000 fa48 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80006a0:	223f      	movs	r2, #63	@ 0x3f
 80006a2:	2100      	movs	r1, #0
 80006a4:	2078      	movs	r0, #120	@ 0x78
 80006a6:	f000 fa43 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006aa:	22a4      	movs	r2, #164	@ 0xa4
 80006ac:	2100      	movs	r1, #0
 80006ae:	2078      	movs	r0, #120	@ 0x78
 80006b0:	f000 fa3e 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80006b4:	22d3      	movs	r2, #211	@ 0xd3
 80006b6:	2100      	movs	r1, #0
 80006b8:	2078      	movs	r0, #120	@ 0x78
 80006ba:	f000 fa39 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2078      	movs	r0, #120	@ 0x78
 80006c4:	f000 fa34 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80006c8:	22d5      	movs	r2, #213	@ 0xd5
 80006ca:	2100      	movs	r1, #0
 80006cc:	2078      	movs	r0, #120	@ 0x78
 80006ce:	f000 fa2f 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80006d2:	22f0      	movs	r2, #240	@ 0xf0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2078      	movs	r0, #120	@ 0x78
 80006d8:	f000 fa2a 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80006dc:	22d9      	movs	r2, #217	@ 0xd9
 80006de:	2100      	movs	r1, #0
 80006e0:	2078      	movs	r0, #120	@ 0x78
 80006e2:	f000 fa25 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80006e6:	2222      	movs	r2, #34	@ 0x22
 80006e8:	2100      	movs	r1, #0
 80006ea:	2078      	movs	r0, #120	@ 0x78
 80006ec:	f000 fa20 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006f0:	22da      	movs	r2, #218	@ 0xda
 80006f2:	2100      	movs	r1, #0
 80006f4:	2078      	movs	r0, #120	@ 0x78
 80006f6:	f000 fa1b 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80006fa:	2212      	movs	r2, #18
 80006fc:	2100      	movs	r1, #0
 80006fe:	2078      	movs	r0, #120	@ 0x78
 8000700:	f000 fa16 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000704:	22db      	movs	r2, #219	@ 0xdb
 8000706:	2100      	movs	r1, #0
 8000708:	2078      	movs	r0, #120	@ 0x78
 800070a:	f000 fa11 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800070e:	2220      	movs	r2, #32
 8000710:	2100      	movs	r1, #0
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fa0c 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000718:	228d      	movs	r2, #141	@ 0x8d
 800071a:	2100      	movs	r1, #0
 800071c:	2078      	movs	r0, #120	@ 0x78
 800071e:	f000 fa07 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000722:	2214      	movs	r2, #20
 8000724:	2100      	movs	r1, #0
 8000726:	2078      	movs	r0, #120	@ 0x78
 8000728:	f000 fa02 	bl	8000b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800072c:	22af      	movs	r2, #175	@ 0xaf
 800072e:	2100      	movs	r1, #0
 8000730:	2078      	movs	r0, #120	@ 0x78
 8000732:	f000 f9fd 	bl	8000b30 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000736:	222e      	movs	r2, #46	@ 0x2e
 8000738:	2100      	movs	r1, #0
 800073a:	2078      	movs	r0, #120	@ 0x78
 800073c:	f000 f9f8 	bl	8000b30 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 f843 	bl	80007cc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000746:	f000 f813 	bl	8000770 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <SSD1306_Init+0x184>)
 800074c:	2200      	movs	r2, #0
 800074e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <SSD1306_Init+0x184>)
 8000752:	2200      	movs	r2, #0
 8000754:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <SSD1306_Init+0x184>)
 8000758:	2201      	movs	r2, #1
 800075a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800075c:	2301      	movs	r3, #1
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000088 	.word	0x20000088
 800076c:	200004e4 	.word	0x200004e4

08000770 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	e01d      	b.n	80007b8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	3b50      	subs	r3, #80	@ 0x50
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	2078      	movs	r0, #120	@ 0x78
 8000788:	f000 f9d2 	bl	8000b30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2078      	movs	r0, #120	@ 0x78
 8000792:	f000 f9cd 	bl	8000b30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000796:	2210      	movs	r2, #16
 8000798:	2100      	movs	r1, #0
 800079a:	2078      	movs	r0, #120	@ 0x78
 800079c:	f000 f9c8 	bl	8000b30 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	01db      	lsls	r3, r3, #7
 80007a4:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <SSD1306_UpdateScreen+0x58>)
 80007a6:	441a      	add	r2, r3
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	2140      	movs	r1, #64	@ 0x40
 80007ac:	2078      	movs	r0, #120	@ 0x78
 80007ae:	f000 f959 	bl	8000a64 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	3301      	adds	r3, #1
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	d9de      	bls.n	800077c <SSD1306_UpdateScreen+0xc>
	}
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000e4 	.word	0x200000e4

080007cc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d101      	bne.n	80007e0 <SSD1306_Fill+0x14>
 80007dc:	2300      	movs	r3, #0
 80007de:	e000      	b.n	80007e2 <SSD1306_Fill+0x16>
 80007e0:	23ff      	movs	r3, #255	@ 0xff
 80007e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007e6:	4619      	mov	r1, r3
 80007e8:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <SSD1306_Fill+0x2c>)
 80007ea:	f002 f879 	bl	80028e0 <memset>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000e4 	.word	0x200000e4

080007fc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
 8000806:	460b      	mov	r3, r1
 8000808:	80bb      	strh	r3, [r7, #4]
 800080a:	4613      	mov	r3, r2
 800080c:	70fb      	strb	r3, [r7, #3]
	if (
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	2b7f      	cmp	r3, #127	@ 0x7f
 8000812:	d848      	bhi.n	80008a6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000814:	88bb      	ldrh	r3, [r7, #4]
 8000816:	2b3f      	cmp	r3, #63	@ 0x3f
 8000818:	d845      	bhi.n	80008a6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800081a:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <SSD1306_DrawPixel+0xb4>)
 800081c:	791b      	ldrb	r3, [r3, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2b00      	cmp	r3, #0
 8000826:	bf0c      	ite	eq
 8000828:	2301      	moveq	r3, #1
 800082a:	2300      	movne	r3, #0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d11a      	bne.n	800086c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000836:	88fa      	ldrh	r2, [r7, #6]
 8000838:	88bb      	ldrh	r3, [r7, #4]
 800083a:	08db      	lsrs	r3, r3, #3
 800083c:	b298      	uxth	r0, r3
 800083e:	4603      	mov	r3, r0
 8000840:	01db      	lsls	r3, r3, #7
 8000842:	4413      	add	r3, r2
 8000844:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <SSD1306_DrawPixel+0xb8>)
 8000846:	5cd3      	ldrb	r3, [r2, r3]
 8000848:	b25a      	sxtb	r2, r3
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	f003 0307 	and.w	r3, r3, #7
 8000850:	2101      	movs	r1, #1
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	b25b      	sxtb	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b259      	sxtb	r1, r3
 800085c:	88fa      	ldrh	r2, [r7, #6]
 800085e:	4603      	mov	r3, r0
 8000860:	01db      	lsls	r3, r3, #7
 8000862:	4413      	add	r3, r2
 8000864:	b2c9      	uxtb	r1, r1
 8000866:	4a13      	ldr	r2, [pc, #76]	@ (80008b4 <SSD1306_DrawPixel+0xb8>)
 8000868:	54d1      	strb	r1, [r2, r3]
 800086a:	e01d      	b.n	80008a8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800086c:	88fa      	ldrh	r2, [r7, #6]
 800086e:	88bb      	ldrh	r3, [r7, #4]
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	b298      	uxth	r0, r3
 8000874:	4603      	mov	r3, r0
 8000876:	01db      	lsls	r3, r3, #7
 8000878:	4413      	add	r3, r2
 800087a:	4a0e      	ldr	r2, [pc, #56]	@ (80008b4 <SSD1306_DrawPixel+0xb8>)
 800087c:	5cd3      	ldrb	r3, [r2, r3]
 800087e:	b25a      	sxtb	r2, r3
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	b25b      	sxtb	r3, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	b25b      	sxtb	r3, r3
 8000892:	4013      	ands	r3, r2
 8000894:	b259      	sxtb	r1, r3
 8000896:	88fa      	ldrh	r2, [r7, #6]
 8000898:	4603      	mov	r3, r0
 800089a:	01db      	lsls	r3, r3, #7
 800089c:	4413      	add	r3, r2
 800089e:	b2c9      	uxtb	r1, r1
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <SSD1306_DrawPixel+0xb8>)
 80008a2:	54d1      	strb	r1, [r2, r3]
 80008a4:	e000      	b.n	80008a8 <SSD1306_DrawPixel+0xac>
		return;
 80008a6:	bf00      	nop
	}
}
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	200004e4 	.word	0x200004e4
 80008b4:	200000e4 	.word	0x200000e4

080008b8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	80fb      	strh	r3, [r7, #6]
 80008c4:	4613      	mov	r3, r2
 80008c6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80008c8:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <SSD1306_GotoXY+0x28>)
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80008ce:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <SSD1306_GotoXY+0x28>)
 80008d0:	88bb      	ldrh	r3, [r7, #4]
 80008d2:	8053      	strh	r3, [r2, #2]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	200004e4 	.word	0x200004e4

080008e4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008f4:	4b39      	ldr	r3, [pc, #228]	@ (80009dc <SSD1306_Putc+0xf8>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
	if (
 8000900:	2b7f      	cmp	r3, #127	@ 0x7f
 8000902:	dc07      	bgt.n	8000914 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000904:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <SSD1306_Putc+0xf8>)
 8000906:	885b      	ldrh	r3, [r3, #2]
 8000908:	461a      	mov	r2, r3
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	785b      	ldrb	r3, [r3, #1]
 800090e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000910:	2b3f      	cmp	r3, #63	@ 0x3f
 8000912:	dd01      	ble.n	8000918 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000914:	2300      	movs	r3, #0
 8000916:	e05d      	b.n	80009d4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	e04b      	b.n	80009b6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	3b20      	subs	r3, #32
 8000926:	6839      	ldr	r1, [r7, #0]
 8000928:	7849      	ldrb	r1, [r1, #1]
 800092a:	fb01 f303 	mul.w	r3, r1, r3
 800092e:	4619      	mov	r1, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	440b      	add	r3, r1
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	e030      	b.n	80009a4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d010      	beq.n	8000974 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000952:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <SSD1306_Putc+0xf8>)
 8000954:	881a      	ldrh	r2, [r3, #0]
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	b29b      	uxth	r3, r3
 800095a:	4413      	add	r3, r2
 800095c:	b298      	uxth	r0, r3
 800095e:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <SSD1306_Putc+0xf8>)
 8000960:	885a      	ldrh	r2, [r3, #2]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	b29b      	uxth	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	b29b      	uxth	r3, r3
 800096a:	79ba      	ldrb	r2, [r7, #6]
 800096c:	4619      	mov	r1, r3
 800096e:	f7ff ff45 	bl	80007fc <SSD1306_DrawPixel>
 8000972:	e014      	b.n	800099e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000974:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <SSD1306_Putc+0xf8>)
 8000976:	881a      	ldrh	r2, [r3, #0]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	b29b      	uxth	r3, r3
 800097c:	4413      	add	r3, r2
 800097e:	b298      	uxth	r0, r3
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <SSD1306_Putc+0xf8>)
 8000982:	885a      	ldrh	r2, [r3, #2]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	b29b      	uxth	r3, r3
 8000988:	4413      	add	r3, r2
 800098a:	b299      	uxth	r1, r3
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	2b00      	cmp	r3, #0
 8000990:	bf0c      	ite	eq
 8000992:	2301      	moveq	r3, #1
 8000994:	2300      	movne	r3, #0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	f7ff ff2f 	bl	80007fc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	3301      	adds	r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d3c8      	bcc.n	8000942 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	3301      	adds	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	461a      	mov	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	4293      	cmp	r3, r2
 80009c0:	d3ad      	bcc.n	800091e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <SSD1306_Putc+0xf8>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <SSD1306_Putc+0xf8>)
 80009d0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200004e4 	.word	0x200004e4

080009e0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	4613      	mov	r3, r2
 80009ec:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80009ee:	e012      	b.n	8000a16 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff73 	bl	80008e4 <SSD1306_Putc>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d002      	beq.n	8000a10 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	e008      	b.n	8000a22 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1e8      	bne.n	80009f0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	781b      	ldrb	r3, [r3, #0]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fecc 	bl	80007cc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000a34:	f7ff fe9c 	bl	8000770 <SSD1306_UpdateScreen>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a42:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <ssd1306_I2C_Init+0x24>)
 8000a44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a46:	e002      	b.n	8000a4e <ssd1306_I2C_Init+0x12>
		p--;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1f9      	bne.n	8000a48 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	0003d090 	.word	0x0003d090

08000a64 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b0c7      	sub	sp, #284	@ 0x11c
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000a72:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000a76:	600a      	str	r2, [r1, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a7e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a82:	4622      	mov	r2, r4
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a8a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000a8e:	4602      	mov	r2, r0
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a9a:	460a      	mov	r2, r1
 8000a9c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000aa6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000aaa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000ab8:	e015      	b.n	8000ae6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000aba:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000abe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ac2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	441a      	add	r2, r3
 8000aca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000ace:	3301      	adds	r3, #1
 8000ad0:	7811      	ldrb	r1, [r2, #0]
 8000ad2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ad6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000ada:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000adc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000ae6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000af0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000af4:	8812      	ldrh	r2, [r2, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d8df      	bhi.n	8000aba <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000afa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000afe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b299      	uxth	r1, r3
 8000b06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	200a      	movs	r0, #10
 8000b1a:	9000      	str	r0, [sp, #0]
 8000b1c:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <ssd1306_I2C_WriteMulti+0xc8>)
 8000b1e:	f000 fd87 	bl	8001630 <HAL_I2C_Master_Transmit>
}
 8000b22:	bf00      	nop
 8000b24:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	20000088 	.word	0x20000088

08000b30 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	71bb      	strb	r3, [r7, #6]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b42:	79bb      	ldrb	r3, [r7, #6]
 8000b44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b46:	797b      	ldrb	r3, [r7, #5]
 8000b48:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	b299      	uxth	r1, r3
 8000b4e:	f107 020c 	add.w	r2, r7, #12
 8000b52:	230a      	movs	r3, #10
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2302      	movs	r3, #2
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <ssd1306_I2C_Write+0x38>)
 8000b5a:	f000 fd69 	bl	8001630 <HAL_I2C_Master_Transmit>
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000088 	.word	0x20000088

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_MspInit+0x60>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <HAL_MspInit+0x60>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a15      	ldr	r2, [pc, #84]	@ (8000c40 <HAL_I2C_MspInit+0x70>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d123      	bne.n	8000c38 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <HAL_I2C_MspInit+0x74>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a13      	ldr	r2, [pc, #76]	@ (8000c44 <HAL_I2C_MspInit+0x74>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <HAL_I2C_MspInit+0x74>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0308 	and.w	r3, r3, #8
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c08:	23c0      	movs	r3, #192	@ 0xc0
 8000c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0c:	2312      	movs	r3, #18
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480b      	ldr	r0, [pc, #44]	@ (8000c48 <HAL_I2C_MspInit+0x78>)
 8000c1c:	f000 fa0e 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HAL_I2C_MspInit+0x74>)
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	4a07      	ldr	r2, [pc, #28]	@ (8000c44 <HAL_I2C_MspInit+0x74>)
 8000c26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c2a:	61d3      	str	r3, [r2, #28]
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_I2C_MspInit+0x74>)
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40005400 	.word	0x40005400
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010c00 	.word	0x40010c00

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f8aa 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d207      	bcs.n	8000ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd4:	f001 fe1c 	bl	8002910 <__errno>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	e009      	b.n	8000cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <_sbrk+0x64>)
 8000cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20005000 	.word	0x20005000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	200004ec 	.word	0x200004ec
 8000d0c:	20000640 	.word	0x20000640

08000d10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d1c:	f7ff fff8 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480b      	ldr	r0, [pc, #44]	@ (8000d50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d22:	490c      	ldr	r1, [pc, #48]	@ (8000d54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d24:	4a0c      	ldr	r2, [pc, #48]	@ (8000d58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a09      	ldr	r2, [pc, #36]	@ (8000d5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d38:	4c09      	ldr	r4, [pc, #36]	@ (8000d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f001 fde9 	bl	800291c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4a:	f7ff fa1b 	bl	8000184 <main>
  bx lr
 8000d4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d58:	08004284 	.word	0x08004284
  ldr r2, =_sbss
 8000d5c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d60:	2000063c 	.word	0x2000063c

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_Init+0x28>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_Init+0x28>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f92b 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fef2 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f935 	bl	8001022 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f90b 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	@ (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000010 	.word	0x20000010
 8000dec:	20000018 	.word	0x20000018
 8000df0:	20000014 	.word	0x20000014

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <HAL_IncTick+0x1c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_IncTick+0x20>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a03      	ldr	r2, [pc, #12]	@ (8000e14 <HAL_IncTick+0x20>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000018 	.word	0x20000018
 8000e14:	200004f0 	.word	0x200004f0

08000e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	@ (8000e28 <HAL_GetTick+0x10>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	200004f0 	.word	0x200004f0

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff fff0 	bl	8000e18 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffe0 	bl	8000e18 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000018 	.word	0x20000018

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff90 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff49 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff5e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff90 	bl	8000f2c <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5f 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb0 	bl	8000f90 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b08b      	sub	sp, #44	@ 0x2c
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104e:	e169      	b.n	8001324 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001050:	2201      	movs	r2, #1
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	429a      	cmp	r2, r3
 800106a:	f040 8158 	bne.w	800131e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4a9a      	ldr	r2, [pc, #616]	@ (80012dc <HAL_GPIO_Init+0x2a0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d05e      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 8001078:	4a98      	ldr	r2, [pc, #608]	@ (80012dc <HAL_GPIO_Init+0x2a0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d875      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 800107e:	4a98      	ldr	r2, [pc, #608]	@ (80012e0 <HAL_GPIO_Init+0x2a4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d058      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 8001084:	4a96      	ldr	r2, [pc, #600]	@ (80012e0 <HAL_GPIO_Init+0x2a4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d86f      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 800108a:	4a96      	ldr	r2, [pc, #600]	@ (80012e4 <HAL_GPIO_Init+0x2a8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d052      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 8001090:	4a94      	ldr	r2, [pc, #592]	@ (80012e4 <HAL_GPIO_Init+0x2a8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d869      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 8001096:	4a94      	ldr	r2, [pc, #592]	@ (80012e8 <HAL_GPIO_Init+0x2ac>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d04c      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 800109c:	4a92      	ldr	r2, [pc, #584]	@ (80012e8 <HAL_GPIO_Init+0x2ac>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d863      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 80010a2:	4a92      	ldr	r2, [pc, #584]	@ (80012ec <HAL_GPIO_Init+0x2b0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d046      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 80010a8:	4a90      	ldr	r2, [pc, #576]	@ (80012ec <HAL_GPIO_Init+0x2b0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d85d      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 80010ae:	2b12      	cmp	r3, #18
 80010b0:	d82a      	bhi.n	8001108 <HAL_GPIO_Init+0xcc>
 80010b2:	2b12      	cmp	r3, #18
 80010b4:	d859      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 80010b6:	a201      	add	r2, pc, #4	@ (adr r2, 80010bc <HAL_GPIO_Init+0x80>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	08001137 	.word	0x08001137
 80010c0:	08001111 	.word	0x08001111
 80010c4:	08001123 	.word	0x08001123
 80010c8:	08001165 	.word	0x08001165
 80010cc:	0800116b 	.word	0x0800116b
 80010d0:	0800116b 	.word	0x0800116b
 80010d4:	0800116b 	.word	0x0800116b
 80010d8:	0800116b 	.word	0x0800116b
 80010dc:	0800116b 	.word	0x0800116b
 80010e0:	0800116b 	.word	0x0800116b
 80010e4:	0800116b 	.word	0x0800116b
 80010e8:	0800116b 	.word	0x0800116b
 80010ec:	0800116b 	.word	0x0800116b
 80010f0:	0800116b 	.word	0x0800116b
 80010f4:	0800116b 	.word	0x0800116b
 80010f8:	0800116b 	.word	0x0800116b
 80010fc:	0800116b 	.word	0x0800116b
 8001100:	08001119 	.word	0x08001119
 8001104:	0800112d 	.word	0x0800112d
 8001108:	4a79      	ldr	r2, [pc, #484]	@ (80012f0 <HAL_GPIO_Init+0x2b4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800110e:	e02c      	b.n	800116a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	623b      	str	r3, [r7, #32]
          break;
 8001116:	e029      	b.n	800116c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	3304      	adds	r3, #4
 800111e:	623b      	str	r3, [r7, #32]
          break;
 8001120:	e024      	b.n	800116c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	3308      	adds	r3, #8
 8001128:	623b      	str	r3, [r7, #32]
          break;
 800112a:	e01f      	b.n	800116c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	330c      	adds	r3, #12
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e01a      	b.n	800116c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800113e:	2304      	movs	r3, #4
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e013      	b.n	800116c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d105      	bne.n	8001158 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800114c:	2308      	movs	r3, #8
 800114e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	611a      	str	r2, [r3, #16]
          break;
 8001156:	e009      	b.n	800116c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001158:	2308      	movs	r3, #8
 800115a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	615a      	str	r2, [r3, #20]
          break;
 8001162:	e003      	b.n	800116c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
          break;
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x130>
          break;
 800116a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2bff      	cmp	r3, #255	@ 0xff
 8001170:	d801      	bhi.n	8001176 <HAL_GPIO_Init+0x13a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	e001      	b.n	800117a <HAL_GPIO_Init+0x13e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3304      	adds	r3, #4
 800117a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	2bff      	cmp	r3, #255	@ 0xff
 8001180:	d802      	bhi.n	8001188 <HAL_GPIO_Init+0x14c>
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x152>
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	3b08      	subs	r3, #8
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	210f      	movs	r1, #15
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	6a39      	ldr	r1, [r7, #32]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	431a      	orrs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 80b1 	beq.w	800131e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011bc:	4b4d      	ldr	r3, [pc, #308]	@ (80012f4 <HAL_GPIO_Init+0x2b8>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	@ (80012f4 <HAL_GPIO_Init+0x2b8>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_GPIO_Init+0x2b8>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011d4:	4a48      	ldr	r2, [pc, #288]	@ (80012f8 <HAL_GPIO_Init+0x2bc>)
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4013      	ands	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a40      	ldr	r2, [pc, #256]	@ (80012fc <HAL_GPIO_Init+0x2c0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d013      	beq.n	8001228 <HAL_GPIO_Init+0x1ec>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3f      	ldr	r2, [pc, #252]	@ (8001300 <HAL_GPIO_Init+0x2c4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d00d      	beq.n	8001224 <HAL_GPIO_Init+0x1e8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3e      	ldr	r2, [pc, #248]	@ (8001304 <HAL_GPIO_Init+0x2c8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d007      	beq.n	8001220 <HAL_GPIO_Init+0x1e4>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a3d      	ldr	r2, [pc, #244]	@ (8001308 <HAL_GPIO_Init+0x2cc>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d101      	bne.n	800121c <HAL_GPIO_Init+0x1e0>
 8001218:	2303      	movs	r3, #3
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x1ee>
 800121c:	2304      	movs	r3, #4
 800121e:	e004      	b.n	800122a <HAL_GPIO_Init+0x1ee>
 8001220:	2302      	movs	r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x1ee>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_GPIO_Init+0x1ee>
 8001228:	2300      	movs	r3, #0
 800122a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800122c:	f002 0203 	and.w	r2, r2, #3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4093      	lsls	r3, r2
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800123a:	492f      	ldr	r1, [pc, #188]	@ (80012f8 <HAL_GPIO_Init+0x2bc>)
 800123c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	492c      	ldr	r1, [pc, #176]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	608b      	str	r3, [r1, #8]
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	43db      	mvns	r3, r3
 800126a:	4928      	ldr	r1, [pc, #160]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 800126c:	4013      	ands	r3, r2
 800126e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d006      	beq.n	800128a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	4922      	ldr	r1, [pc, #136]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	60cb      	str	r3, [r1, #12]
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800128a:	4b20      	ldr	r3, [pc, #128]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	43db      	mvns	r3, r3
 8001292:	491e      	ldr	r1, [pc, #120]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 8001294:	4013      	ands	r3, r2
 8001296:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4918      	ldr	r1, [pc, #96]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4914      	ldr	r1, [pc, #80]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012bc:	4013      	ands	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d021      	beq.n	8001310 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	490e      	ldr	r1, [pc, #56]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
 80012d8:	e021      	b.n	800131e <HAL_GPIO_Init+0x2e2>
 80012da:	bf00      	nop
 80012dc:	10320000 	.word	0x10320000
 80012e0:	10310000 	.word	0x10310000
 80012e4:	10220000 	.word	0x10220000
 80012e8:	10210000 	.word	0x10210000
 80012ec:	10120000 	.word	0x10120000
 80012f0:	10110000 	.word	0x10110000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40010800 	.word	0x40010800
 8001300:	40010c00 	.word	0x40010c00
 8001304:	40011000 	.word	0x40011000
 8001308:	40011400 	.word	0x40011400
 800130c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_GPIO_Init+0x304>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	43db      	mvns	r3, r3
 8001318:	4909      	ldr	r1, [pc, #36]	@ (8001340 <HAL_GPIO_Init+0x304>)
 800131a:	4013      	ands	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001320:	3301      	adds	r3, #1
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	f47f ae8e 	bne.w	8001050 <HAL_GPIO_Init+0x14>
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	372c      	adds	r7, #44	@ 0x2c
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001360:	e003      	b.n	800136a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	611a      	str	r2, [r3, #16]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4013      	ands	r3, r2
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43d9      	mvns	r1, r3
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	400b      	ands	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e12b      	b.n	8001612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fbfe 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	@ 0x24
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800140a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800140c:	f001 f960 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8001410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a81      	ldr	r2, [pc, #516]	@ (800161c <HAL_I2C_Init+0x274>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d807      	bhi.n	800142c <HAL_I2C_Init+0x84>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4a80      	ldr	r2, [pc, #512]	@ (8001620 <HAL_I2C_Init+0x278>)
 8001420:	4293      	cmp	r3, r2
 8001422:	bf94      	ite	ls
 8001424:	2301      	movls	r3, #1
 8001426:	2300      	movhi	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e006      	b.n	800143a <HAL_I2C_Init+0x92>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4a7d      	ldr	r2, [pc, #500]	@ (8001624 <HAL_I2C_Init+0x27c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	bf94      	ite	ls
 8001434:	2301      	movls	r3, #1
 8001436:	2300      	movhi	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0e7      	b.n	8001612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a78      	ldr	r2, [pc, #480]	@ (8001628 <HAL_I2C_Init+0x280>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a6a      	ldr	r2, [pc, #424]	@ (800161c <HAL_I2C_Init+0x274>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d802      	bhi.n	800147c <HAL_I2C_Init+0xd4>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3301      	adds	r3, #1
 800147a:	e009      	b.n	8001490 <HAL_I2C_Init+0xe8>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	4a69      	ldr	r2, [pc, #420]	@ (800162c <HAL_I2C_Init+0x284>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	3301      	adds	r3, #1
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	430b      	orrs	r3, r1
 8001496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	495c      	ldr	r1, [pc, #368]	@ (800161c <HAL_I2C_Init+0x274>)
 80014ac:	428b      	cmp	r3, r1
 80014ae:	d819      	bhi.n	80014e4 <HAL_I2C_Init+0x13c>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e59      	subs	r1, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80014be:	1c59      	adds	r1, r3, #1
 80014c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014c4:	400b      	ands	r3, r1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00a      	beq.n	80014e0 <HAL_I2C_Init+0x138>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1e59      	subs	r1, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014de:	e051      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 80014e0:	2304      	movs	r3, #4
 80014e2:	e04f      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_I2C_Init+0x168>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e58      	subs	r0, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	e012      	b.n	8001536 <HAL_I2C_Init+0x18e>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	0099      	lsls	r1, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	fbb0 f3f3 	udiv	r3, r0, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Init+0x196>
 800153a:	2301      	movs	r3, #1
 800153c:	e022      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10e      	bne.n	8001564 <HAL_I2C_Init+0x1bc>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e58      	subs	r0, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6859      	ldr	r1, [r3, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	440b      	add	r3, r1
 8001554:	fbb0 f3f3 	udiv	r3, r0, r3
 8001558:	3301      	adds	r3, #1
 800155a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001562:	e00f      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	0099      	lsls	r1, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	fbb0 f3f3 	udiv	r3, r0, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	6809      	ldr	r1, [r1, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6911      	ldr	r1, [r2, #16]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68d2      	ldr	r2, [r2, #12]
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	000186a0 	.word	0x000186a0
 8001620:	001e847f 	.word	0x001e847f
 8001624:	003d08ff 	.word	0x003d08ff
 8001628:	431bde83 	.word	0x431bde83
 800162c:	10624dd3 	.word	0x10624dd3

08001630 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	460b      	mov	r3, r1
 800163e:	817b      	strh	r3, [r7, #10]
 8001640:	4613      	mov	r3, r2
 8001642:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fbe8 	bl	8000e18 <HAL_GetTick>
 8001648:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b20      	cmp	r3, #32
 8001654:	f040 80e0 	bne.w	8001818 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2319      	movs	r3, #25
 800165e:	2201      	movs	r2, #1
 8001660:	4970      	ldr	r1, [pc, #448]	@ (8001824 <HAL_I2C_Master_Transmit+0x1f4>)
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 fa92 	bl	8001b8c <I2C_WaitOnFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	e0d3      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_I2C_Master_Transmit+0x50>
 800167c:	2302      	movs	r3, #2
 800167e:	e0cc      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d007      	beq.n	80016a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2221      	movs	r2, #33	@ 0x21
 80016ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2210      	movs	r2, #16
 80016c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	893a      	ldrh	r2, [r7, #8]
 80016d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4a50      	ldr	r2, [pc, #320]	@ (8001828 <HAL_I2C_Master_Transmit+0x1f8>)
 80016e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	6a3a      	ldr	r2, [r7, #32]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f9ca 	bl	8001a88 <I2C_MasterRequestWrite>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e08d      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001714:	e066      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	6a39      	ldr	r1, [r7, #32]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 fb50 	bl	8001dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00d      	beq.n	8001742 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	2b04      	cmp	r3, #4
 800172c:	d107      	bne.n	800173e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800173c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b04      	cmp	r3, #4
 800177e:	d11b      	bne.n	80017b8 <HAL_I2C_Master_Transmit+0x188>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d017      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	6a39      	ldr	r1, [r7, #32]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fb47 	bl	8001e50 <I2C_WaitOnBTFFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d107      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01a      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d194      	bne.n	8001716 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	00100002 	.word	0x00100002
 8001828:	ffff0000 	.word	0xffff0000

0800182c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	460b      	mov	r3, r1
 800183a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff faec 	bl	8000e18 <HAL_GetTick>
 8001840:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b20      	cmp	r3, #32
 8001850:	f040 8111 	bne.w	8001a76 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2319      	movs	r3, #25
 800185a:	2201      	movs	r2, #1
 800185c:	4988      	ldr	r1, [pc, #544]	@ (8001a80 <HAL_I2C_IsDeviceReady+0x254>)
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f994 	bl	8001b8c <I2C_WaitOnFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800186a:	2302      	movs	r3, #2
 800186c:	e104      	b.n	8001a78 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <HAL_I2C_IsDeviceReady+0x50>
 8001878:	2302      	movs	r3, #2
 800187a:	e0fd      	b.n	8001a78 <HAL_I2C_IsDeviceReady+0x24c>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b01      	cmp	r3, #1
 8001890:	d007      	beq.n	80018a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0201 	orr.w	r2, r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2224      	movs	r2, #36	@ 0x24
 80018b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4a70      	ldr	r2, [pc, #448]	@ (8001a84 <HAL_I2C_IsDeviceReady+0x258>)
 80018c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f952 	bl	8001b8c <I2C_WaitOnFlagUntilTimeout>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00d      	beq.n	800190a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018fc:	d103      	bne.n	8001906 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0b6      	b.n	8001a78 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800190a:	897b      	ldrh	r3, [r7, #10]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001918:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff fa7d 	bl	8000e18 <HAL_GetTick>
 800191e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b02      	cmp	r3, #2
 800192c:	bf0c      	ite	eq
 800192e:	2301      	moveq	r3, #1
 8001930:	2300      	movne	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800194e:	e025      	b.n	800199c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001950:	f7ff fa62 	bl	8000e18 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d302      	bcc.n	8001966 <HAL_I2C_IsDeviceReady+0x13a>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	22a0      	movs	r2, #160	@ 0xa0
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b02      	cmp	r3, #2
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80019a6:	d005      	beq.n	80019b4 <HAL_I2C_IsDeviceReady+0x188>
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_I2C_IsDeviceReady+0x188>
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0cd      	beq.n	8001950 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d129      	bne.n	8001a1e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2319      	movs	r3, #25
 80019f6:	2201      	movs	r2, #1
 80019f8:	4921      	ldr	r1, [pc, #132]	@ (8001a80 <HAL_I2C_IsDeviceReady+0x254>)
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f8c6 	bl	8001b8c <I2C_WaitOnFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e036      	b.n	8001a78 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e02c      	b.n	8001a78 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a36:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2319      	movs	r3, #25
 8001a3e:	2201      	movs	r2, #1
 8001a40:	490f      	ldr	r1, [pc, #60]	@ (8001a80 <HAL_I2C_IsDeviceReady+0x254>)
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f8a2 	bl	8001b8c <I2C_WaitOnFlagUntilTimeout>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e012      	b.n	8001a78 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	3301      	adds	r3, #1
 8001a56:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f4ff af32 	bcc.w	80018c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2220      	movs	r2, #32
 8001a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001a76:	2302      	movs	r3, #2
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	00100002 	.word	0x00100002
 8001a84:	ffff0000 	.word	0xffff0000

08001a88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	460b      	mov	r3, r1
 8001a96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d006      	beq.n	8001ab2 <I2C_MasterRequestWrite+0x2a>
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d003      	beq.n	8001ab2 <I2C_MasterRequestWrite+0x2a>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ab0:	d108      	bne.n	8001ac4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e00b      	b.n	8001adc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	d107      	bne.n	8001adc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ada:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f84f 	bl	8001b8c <I2C_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b02:	d103      	bne.n	8001b0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e035      	b.n	8001b7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b18:	d108      	bne.n	8001b2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b1a:	897b      	ldrh	r3, [r7, #10]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	e01b      	b.n	8001b64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b2c:	897b      	ldrh	r3, [r7, #10]
 8001b2e:	11db      	asrs	r3, r3, #7
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f003 0306 	and.w	r3, r3, #6
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f063 030f 	orn	r3, r3, #15
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	490e      	ldr	r1, [pc, #56]	@ (8001b84 <I2C_MasterRequestWrite+0xfc>)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f898 	bl	8001c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e010      	b.n	8001b7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4907      	ldr	r1, [pc, #28]	@ (8001b88 <I2C_MasterRequestWrite+0x100>)
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f888 	bl	8001c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	00010008 	.word	0x00010008
 8001b88:	00010002 	.word	0x00010002

08001b8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b9c:	e048      	b.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d044      	beq.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba6:	f7ff f937 	bl	8000e18 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d139      	bne.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	0c1b      	lsrs	r3, r3, #16
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10d      	bne.n	8001be2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	e00c      	b.n	8001bfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	43da      	mvns	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	4013      	ands	r3, r2
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d116      	bne.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f043 0220 	orr.w	r2, r3, #32
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e023      	b.n	8001c78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10d      	bne.n	8001c56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	43da      	mvns	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	4013      	ands	r3, r2
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	e00c      	b.n	8001c70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4013      	ands	r3, r2
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d093      	beq.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c8e:	e071      	b.n	8001d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c9e:	d123      	bne.n	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f043 0204 	orr.w	r2, r3, #4
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e067      	b.n	8001db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cee:	d041      	beq.n	8001d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf0:	f7ff f892 	bl	8000e18 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d302      	bcc.n	8001d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d136      	bne.n	8001d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d10c      	bne.n	8001d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	e00b      	b.n	8001d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	43da      	mvns	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4013      	ands	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d016      	beq.n	8001d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	f043 0220 	orr.w	r2, r3, #32
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e021      	b.n	8001db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d10c      	bne.n	8001d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	43da      	mvns	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	e00b      	b.n	8001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4013      	ands	r3, r2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f47f af6d 	bne.w	8001c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dcc:	e034      	b.n	8001e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f886 	bl	8001ee0 <I2C_IsAcknowledgeFailed>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e034      	b.n	8001e48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d028      	beq.n	8001e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de6:	f7ff f817 	bl	8000e18 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d302      	bcc.n	8001dfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11d      	bne.n	8001e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e06:	2b80      	cmp	r3, #128	@ 0x80
 8001e08:	d016      	beq.n	8001e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f043 0220 	orr.w	r2, r3, #32
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e007      	b.n	8001e48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e42:	2b80      	cmp	r3, #128	@ 0x80
 8001e44:	d1c3      	bne.n	8001dce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e5c:	e034      	b.n	8001ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f83e 	bl	8001ee0 <I2C_IsAcknowledgeFailed>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e034      	b.n	8001ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d028      	beq.n	8001ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e76:	f7fe ffcf 	bl	8000e18 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d302      	bcc.n	8001e8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11d      	bne.n	8001ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d016      	beq.n	8001ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f043 0220 	orr.w	r2, r3, #32
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e007      	b.n	8001ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d1c3      	bne.n	8001e5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef6:	d11b      	bne.n	8001f30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f043 0204 	orr.w	r2, r3, #4
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e272      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8087 	beq.w	800206a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5c:	4b92      	ldr	r3, [pc, #584]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d00c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f68:	4b8f      	ldr	r3, [pc, #572]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d112      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5e>
 8001f74:	4b8c      	ldr	r3, [pc, #560]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f80:	d10b      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f82:	4b89      	ldr	r3, [pc, #548]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d06c      	beq.n	8002068 <HAL_RCC_OscConfig+0x12c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d168      	bne.n	8002068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e24c      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x76>
 8001fa4:	4b80      	ldr	r3, [pc, #512]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a7f      	ldr	r2, [pc, #508]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e02e      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x98>
 8001fba:	4b7b      	ldr	r3, [pc, #492]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7a      	ldr	r2, [pc, #488]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b78      	ldr	r3, [pc, #480]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a77      	ldr	r2, [pc, #476]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xbc>
 8001fde:	4b72      	ldr	r3, [pc, #456]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a71      	ldr	r2, [pc, #452]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b6f      	ldr	r3, [pc, #444]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6e      	ldr	r2, [pc, #440]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b68      	ldr	r3, [pc, #416]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a67      	ldr	r2, [pc, #412]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800200e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe fefe 	bl	8000e18 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fefa 	bl	8000e18 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	@ 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e200      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b5d      	ldr	r3, [pc, #372]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xe4>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe feea 	bl	8000e18 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe fee6 	bl	8000e18 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	@ 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1ec      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b53      	ldr	r3, [pc, #332]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x10c>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d063      	beq.n	800213e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002076:	4b4c      	ldr	r3, [pc, #304]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002082:	4b49      	ldr	r3, [pc, #292]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x18c>
 800208e:	4b46      	ldr	r3, [pc, #280]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d116      	bne.n	80020c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	4b43      	ldr	r3, [pc, #268]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1c0      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b3d      	ldr	r3, [pc, #244]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4939      	ldr	r1, [pc, #228]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	e03a      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b36      	ldr	r3, [pc, #216]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7fe fe9f 	bl	8000e18 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020de:	f7fe fe9b 	bl	8000e18 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e1a1      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	4b2d      	ldr	r3, [pc, #180]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b2a      	ldr	r3, [pc, #168]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4927      	ldr	r1, [pc, #156]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe fe7e 	bl	8000e18 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002120:	f7fe fe7a 	bl	8000e18 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e180      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d03a      	beq.n	80021c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d019      	beq.n	8002186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7fe fe5e 	bl	8000e18 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002160:	f7fe fe5a 	bl	8000e18 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e160      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800217e:	2001      	movs	r0, #1
 8002180:	f000 faba 	bl	80026f8 <RCC_Delay>
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218c:	f7fe fe44 	bl	8000e18 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002192:	e00f      	b.n	80021b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7fe fe40 	bl	8000e18 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d908      	bls.n	80021b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e146      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	42420000 	.word	0x42420000
 80021b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b92      	ldr	r3, [pc, #584]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e9      	bne.n	8002194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a6 	beq.w	800231a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10d      	bne.n	80021fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b88      	ldr	r3, [pc, #544]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a87      	ldr	r2, [pc, #540]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b85      	ldr	r3, [pc, #532]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b82      	ldr	r3, [pc, #520]	@ (8002404 <HAL_RCC_OscConfig+0x4c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b7f      	ldr	r3, [pc, #508]	@ (8002404 <HAL_RCC_OscConfig+0x4c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7e      	ldr	r2, [pc, #504]	@ (8002404 <HAL_RCC_OscConfig+0x4c8>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe fe01 	bl	8000e18 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7fe fdfd 	bl	8000e18 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	@ 0x64
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e103      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b75      	ldr	r3, [pc, #468]	@ (8002404 <HAL_RCC_OscConfig+0x4c8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x312>
 8002240:	4b6f      	ldr	r3, [pc, #444]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a6e      	ldr	r2, [pc, #440]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	e02d      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x334>
 8002256:	4b6a      	ldr	r3, [pc, #424]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a69      	ldr	r2, [pc, #420]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	4b67      	ldr	r3, [pc, #412]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a66      	ldr	r2, [pc, #408]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	e01c      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x356>
 8002278:	4b61      	ldr	r3, [pc, #388]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a60      	ldr	r2, [pc, #384]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	4b5e      	ldr	r3, [pc, #376]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a5d      	ldr	r2, [pc, #372]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	e00b      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 8002292:	4b5b      	ldr	r3, [pc, #364]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a5a      	ldr	r2, [pc, #360]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	4b58      	ldr	r3, [pc, #352]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a57      	ldr	r2, [pc, #348]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7fe fdb1 	bl	8000e18 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fdad 	bl	8000e18 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0b1      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ee      	beq.n	80022ba <HAL_RCC_OscConfig+0x37e>
 80022dc:	e014      	b.n	8002308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe fd9b 	bl	8000e18 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fd97 	bl	8000e18 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e09b      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	4b40      	ldr	r3, [pc, #256]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ee      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d105      	bne.n	800231a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b3c      	ldr	r3, [pc, #240]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a3b      	ldr	r2, [pc, #236]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002324:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d061      	beq.n	80023f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d146      	bne.n	80023c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b33      	ldr	r3, [pc, #204]	@ (8002408 <HAL_RCC_OscConfig+0x4cc>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe fd6b 	bl	8000e18 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7fe fd67 	bl	8000e18 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e06d      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	4b29      	ldr	r3, [pc, #164]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800236e:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4921      	ldr	r1, [pc, #132]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002380:	4b1f      	ldr	r3, [pc, #124]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a19      	ldr	r1, [r3, #32]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	430b      	orrs	r3, r1
 8002392:	491b      	ldr	r1, [pc, #108]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_RCC_OscConfig+0x4cc>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe fd3b 	bl	8000e18 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe fd37 	bl	8000e18 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e03d      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x46a>
 80023c4:	e035      	b.n	8002432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fd24 	bl	8000e18 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fd20 	bl	8000e18 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e026      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x498>
 80023f2:	e01e      	b.n	8002432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e019      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
 8002408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_RCC_OscConfig+0x500>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d0      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b67      	ldr	r3, [pc, #412]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4965      	ldr	r1, [pc, #404]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a58      	ldr	r2, [pc, #352]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e073      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b39      	ldr	r3, [pc, #228]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4936      	ldr	r1, [pc, #216]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7fe fc72 	bl	8000e18 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fc6e 	bl	8000e18 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e053      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2d      	ldr	r3, [pc, #180]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d210      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4922      	ldr	r1, [pc, #136]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490a      	ldr	r1, [pc, #40]	@ (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	@ (800260c <HAL_RCC_ClockConfig+0x1cc>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_RCC_ClockConfig+0x1d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fbd0 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	0800421c 	.word	0x0800421c
 800260c:	20000010 	.word	0x20000010
 8002610:	20000014 	.word	0x20000014

08002614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262e:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x30>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x36>
 8002642:	e027      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	e027      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a17      	ldr	r2, [pc, #92]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002662:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0c5b      	lsrs	r3, r3, #17
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	4a11      	ldr	r2, [pc, #68]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a0d      	ldr	r2, [pc, #52]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002676:	fb03 f202 	mul.w	r2, r3, r2
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e004      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a0c      	ldr	r2, [pc, #48]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	613b      	str	r3, [r7, #16]
      break;
 8002692:	e002      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002696:	613b      	str	r3, [r7, #16]
      break;
 8002698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269a:	693b      	ldr	r3, [r7, #16]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	08004234 	.word	0x08004234
 80026b4:	08004244 	.word	0x08004244
 80026b8:	003d0900 	.word	0x003d0900

080026bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b02      	ldr	r3, [pc, #8]	@ (80026cc <HAL_RCC_GetHCLKFreq+0x10>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	20000010 	.word	0x20000010

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff2 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	@ (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	0800422c 	.word	0x0800422c

080026f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <RCC_Delay+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <RCC_Delay+0x38>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a5b      	lsrs	r3, r3, #9
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002714:	bf00      	nop
  }
  while (Delay --);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <RCC_Delay+0x1c>
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000010 	.word	0x20000010
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <malloc>:
 8002734:	4b02      	ldr	r3, [pc, #8]	@ (8002740 <malloc+0xc>)
 8002736:	4601      	mov	r1, r0
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	f000 b825 	b.w	8002788 <_malloc_r>
 800273e:	bf00      	nop
 8002740:	2000001c 	.word	0x2000001c

08002744 <sbrk_aligned>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	4e0f      	ldr	r6, [pc, #60]	@ (8002784 <sbrk_aligned+0x40>)
 8002748:	460c      	mov	r4, r1
 800274a:	6831      	ldr	r1, [r6, #0]
 800274c:	4605      	mov	r5, r0
 800274e:	b911      	cbnz	r1, 8002756 <sbrk_aligned+0x12>
 8002750:	f000 f8ce 	bl	80028f0 <_sbrk_r>
 8002754:	6030      	str	r0, [r6, #0]
 8002756:	4621      	mov	r1, r4
 8002758:	4628      	mov	r0, r5
 800275a:	f000 f8c9 	bl	80028f0 <_sbrk_r>
 800275e:	1c43      	adds	r3, r0, #1
 8002760:	d103      	bne.n	800276a <sbrk_aligned+0x26>
 8002762:	f04f 34ff 	mov.w	r4, #4294967295
 8002766:	4620      	mov	r0, r4
 8002768:	bd70      	pop	{r4, r5, r6, pc}
 800276a:	1cc4      	adds	r4, r0, #3
 800276c:	f024 0403 	bic.w	r4, r4, #3
 8002770:	42a0      	cmp	r0, r4
 8002772:	d0f8      	beq.n	8002766 <sbrk_aligned+0x22>
 8002774:	1a21      	subs	r1, r4, r0
 8002776:	4628      	mov	r0, r5
 8002778:	f000 f8ba 	bl	80028f0 <_sbrk_r>
 800277c:	3001      	adds	r0, #1
 800277e:	d1f2      	bne.n	8002766 <sbrk_aligned+0x22>
 8002780:	e7ef      	b.n	8002762 <sbrk_aligned+0x1e>
 8002782:	bf00      	nop
 8002784:	200004f4 	.word	0x200004f4

08002788 <_malloc_r>:
 8002788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800278c:	1ccd      	adds	r5, r1, #3
 800278e:	f025 0503 	bic.w	r5, r5, #3
 8002792:	3508      	adds	r5, #8
 8002794:	2d0c      	cmp	r5, #12
 8002796:	bf38      	it	cc
 8002798:	250c      	movcc	r5, #12
 800279a:	2d00      	cmp	r5, #0
 800279c:	4606      	mov	r6, r0
 800279e:	db01      	blt.n	80027a4 <_malloc_r+0x1c>
 80027a0:	42a9      	cmp	r1, r5
 80027a2:	d904      	bls.n	80027ae <_malloc_r+0x26>
 80027a4:	230c      	movs	r3, #12
 80027a6:	6033      	str	r3, [r6, #0]
 80027a8:	2000      	movs	r0, #0
 80027aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002884 <_malloc_r+0xfc>
 80027b2:	f000 f869 	bl	8002888 <__malloc_lock>
 80027b6:	f8d8 3000 	ldr.w	r3, [r8]
 80027ba:	461c      	mov	r4, r3
 80027bc:	bb44      	cbnz	r4, 8002810 <_malloc_r+0x88>
 80027be:	4629      	mov	r1, r5
 80027c0:	4630      	mov	r0, r6
 80027c2:	f7ff ffbf 	bl	8002744 <sbrk_aligned>
 80027c6:	1c43      	adds	r3, r0, #1
 80027c8:	4604      	mov	r4, r0
 80027ca:	d158      	bne.n	800287e <_malloc_r+0xf6>
 80027cc:	f8d8 4000 	ldr.w	r4, [r8]
 80027d0:	4627      	mov	r7, r4
 80027d2:	2f00      	cmp	r7, #0
 80027d4:	d143      	bne.n	800285e <_malloc_r+0xd6>
 80027d6:	2c00      	cmp	r4, #0
 80027d8:	d04b      	beq.n	8002872 <_malloc_r+0xea>
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	4639      	mov	r1, r7
 80027de:	4630      	mov	r0, r6
 80027e0:	eb04 0903 	add.w	r9, r4, r3
 80027e4:	f000 f884 	bl	80028f0 <_sbrk_r>
 80027e8:	4581      	cmp	r9, r0
 80027ea:	d142      	bne.n	8002872 <_malloc_r+0xea>
 80027ec:	6821      	ldr	r1, [r4, #0]
 80027ee:	4630      	mov	r0, r6
 80027f0:	1a6d      	subs	r5, r5, r1
 80027f2:	4629      	mov	r1, r5
 80027f4:	f7ff ffa6 	bl	8002744 <sbrk_aligned>
 80027f8:	3001      	adds	r0, #1
 80027fa:	d03a      	beq.n	8002872 <_malloc_r+0xea>
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	442b      	add	r3, r5
 8002800:	6023      	str	r3, [r4, #0]
 8002802:	f8d8 3000 	ldr.w	r3, [r8]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	bb62      	cbnz	r2, 8002864 <_malloc_r+0xdc>
 800280a:	f8c8 7000 	str.w	r7, [r8]
 800280e:	e00f      	b.n	8002830 <_malloc_r+0xa8>
 8002810:	6822      	ldr	r2, [r4, #0]
 8002812:	1b52      	subs	r2, r2, r5
 8002814:	d420      	bmi.n	8002858 <_malloc_r+0xd0>
 8002816:	2a0b      	cmp	r2, #11
 8002818:	d917      	bls.n	800284a <_malloc_r+0xc2>
 800281a:	1961      	adds	r1, r4, r5
 800281c:	42a3      	cmp	r3, r4
 800281e:	6025      	str	r5, [r4, #0]
 8002820:	bf18      	it	ne
 8002822:	6059      	strne	r1, [r3, #4]
 8002824:	6863      	ldr	r3, [r4, #4]
 8002826:	bf08      	it	eq
 8002828:	f8c8 1000 	streq.w	r1, [r8]
 800282c:	5162      	str	r2, [r4, r5]
 800282e:	604b      	str	r3, [r1, #4]
 8002830:	4630      	mov	r0, r6
 8002832:	f000 f82f 	bl	8002894 <__malloc_unlock>
 8002836:	f104 000b 	add.w	r0, r4, #11
 800283a:	1d23      	adds	r3, r4, #4
 800283c:	f020 0007 	bic.w	r0, r0, #7
 8002840:	1ac2      	subs	r2, r0, r3
 8002842:	bf1c      	itt	ne
 8002844:	1a1b      	subne	r3, r3, r0
 8002846:	50a3      	strne	r3, [r4, r2]
 8002848:	e7af      	b.n	80027aa <_malloc_r+0x22>
 800284a:	6862      	ldr	r2, [r4, #4]
 800284c:	42a3      	cmp	r3, r4
 800284e:	bf0c      	ite	eq
 8002850:	f8c8 2000 	streq.w	r2, [r8]
 8002854:	605a      	strne	r2, [r3, #4]
 8002856:	e7eb      	b.n	8002830 <_malloc_r+0xa8>
 8002858:	4623      	mov	r3, r4
 800285a:	6864      	ldr	r4, [r4, #4]
 800285c:	e7ae      	b.n	80027bc <_malloc_r+0x34>
 800285e:	463c      	mov	r4, r7
 8002860:	687f      	ldr	r7, [r7, #4]
 8002862:	e7b6      	b.n	80027d2 <_malloc_r+0x4a>
 8002864:	461a      	mov	r2, r3
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	42a3      	cmp	r3, r4
 800286a:	d1fb      	bne.n	8002864 <_malloc_r+0xdc>
 800286c:	2300      	movs	r3, #0
 800286e:	6053      	str	r3, [r2, #4]
 8002870:	e7de      	b.n	8002830 <_malloc_r+0xa8>
 8002872:	230c      	movs	r3, #12
 8002874:	4630      	mov	r0, r6
 8002876:	6033      	str	r3, [r6, #0]
 8002878:	f000 f80c 	bl	8002894 <__malloc_unlock>
 800287c:	e794      	b.n	80027a8 <_malloc_r+0x20>
 800287e:	6005      	str	r5, [r0, #0]
 8002880:	e7d6      	b.n	8002830 <_malloc_r+0xa8>
 8002882:	bf00      	nop
 8002884:	200004f8 	.word	0x200004f8

08002888 <__malloc_lock>:
 8002888:	4801      	ldr	r0, [pc, #4]	@ (8002890 <__malloc_lock+0x8>)
 800288a:	f000 b86b 	b.w	8002964 <__retarget_lock_acquire_recursive>
 800288e:	bf00      	nop
 8002890:	20000638 	.word	0x20000638

08002894 <__malloc_unlock>:
 8002894:	4801      	ldr	r0, [pc, #4]	@ (800289c <__malloc_unlock+0x8>)
 8002896:	f000 b866 	b.w	8002966 <__retarget_lock_release_recursive>
 800289a:	bf00      	nop
 800289c:	20000638 	.word	0x20000638

080028a0 <siprintf>:
 80028a0:	b40e      	push	{r1, r2, r3}
 80028a2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80028a6:	b500      	push	{lr}
 80028a8:	b09c      	sub	sp, #112	@ 0x70
 80028aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80028ac:	9002      	str	r0, [sp, #8]
 80028ae:	9006      	str	r0, [sp, #24]
 80028b0:	9107      	str	r1, [sp, #28]
 80028b2:	9104      	str	r1, [sp, #16]
 80028b4:	4808      	ldr	r0, [pc, #32]	@ (80028d8 <siprintf+0x38>)
 80028b6:	4909      	ldr	r1, [pc, #36]	@ (80028dc <siprintf+0x3c>)
 80028b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80028bc:	9105      	str	r1, [sp, #20]
 80028be:	6800      	ldr	r0, [r0, #0]
 80028c0:	a902      	add	r1, sp, #8
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	f000 f8f4 	bl	8002ab0 <_svfiprintf_r>
 80028c8:	2200      	movs	r2, #0
 80028ca:	9b02      	ldr	r3, [sp, #8]
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	b01c      	add	sp, #112	@ 0x70
 80028d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80028d4:	b003      	add	sp, #12
 80028d6:	4770      	bx	lr
 80028d8:	2000001c 	.word	0x2000001c
 80028dc:	ffff0208 	.word	0xffff0208

080028e0 <memset>:
 80028e0:	4603      	mov	r3, r0
 80028e2:	4402      	add	r2, r0
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d100      	bne.n	80028ea <memset+0xa>
 80028e8:	4770      	bx	lr
 80028ea:	f803 1b01 	strb.w	r1, [r3], #1
 80028ee:	e7f9      	b.n	80028e4 <memset+0x4>

080028f0 <_sbrk_r>:
 80028f0:	b538      	push	{r3, r4, r5, lr}
 80028f2:	2300      	movs	r3, #0
 80028f4:	4d05      	ldr	r5, [pc, #20]	@ (800290c <_sbrk_r+0x1c>)
 80028f6:	4604      	mov	r4, r0
 80028f8:	4608      	mov	r0, r1
 80028fa:	602b      	str	r3, [r5, #0]
 80028fc:	f7fe f9d2 	bl	8000ca4 <_sbrk>
 8002900:	1c43      	adds	r3, r0, #1
 8002902:	d102      	bne.n	800290a <_sbrk_r+0x1a>
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	b103      	cbz	r3, 800290a <_sbrk_r+0x1a>
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	20000634 	.word	0x20000634

08002910 <__errno>:
 8002910:	4b01      	ldr	r3, [pc, #4]	@ (8002918 <__errno+0x8>)
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	2000001c 	.word	0x2000001c

0800291c <__libc_init_array>:
 800291c:	b570      	push	{r4, r5, r6, lr}
 800291e:	2600      	movs	r6, #0
 8002920:	4d0c      	ldr	r5, [pc, #48]	@ (8002954 <__libc_init_array+0x38>)
 8002922:	4c0d      	ldr	r4, [pc, #52]	@ (8002958 <__libc_init_array+0x3c>)
 8002924:	1b64      	subs	r4, r4, r5
 8002926:	10a4      	asrs	r4, r4, #2
 8002928:	42a6      	cmp	r6, r4
 800292a:	d109      	bne.n	8002940 <__libc_init_array+0x24>
 800292c:	f000 fbba 	bl	80030a4 <_init>
 8002930:	2600      	movs	r6, #0
 8002932:	4d0a      	ldr	r5, [pc, #40]	@ (800295c <__libc_init_array+0x40>)
 8002934:	4c0a      	ldr	r4, [pc, #40]	@ (8002960 <__libc_init_array+0x44>)
 8002936:	1b64      	subs	r4, r4, r5
 8002938:	10a4      	asrs	r4, r4, #2
 800293a:	42a6      	cmp	r6, r4
 800293c:	d105      	bne.n	800294a <__libc_init_array+0x2e>
 800293e:	bd70      	pop	{r4, r5, r6, pc}
 8002940:	f855 3b04 	ldr.w	r3, [r5], #4
 8002944:	4798      	blx	r3
 8002946:	3601      	adds	r6, #1
 8002948:	e7ee      	b.n	8002928 <__libc_init_array+0xc>
 800294a:	f855 3b04 	ldr.w	r3, [r5], #4
 800294e:	4798      	blx	r3
 8002950:	3601      	adds	r6, #1
 8002952:	e7f2      	b.n	800293a <__libc_init_array+0x1e>
 8002954:	0800427c 	.word	0x0800427c
 8002958:	0800427c 	.word	0x0800427c
 800295c:	0800427c 	.word	0x0800427c
 8002960:	08004280 	.word	0x08004280

08002964 <__retarget_lock_acquire_recursive>:
 8002964:	4770      	bx	lr

08002966 <__retarget_lock_release_recursive>:
 8002966:	4770      	bx	lr

08002968 <_free_r>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4605      	mov	r5, r0
 800296c:	2900      	cmp	r1, #0
 800296e:	d040      	beq.n	80029f2 <_free_r+0x8a>
 8002970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002974:	1f0c      	subs	r4, r1, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	bfb8      	it	lt
 800297a:	18e4      	addlt	r4, r4, r3
 800297c:	f7ff ff84 	bl	8002888 <__malloc_lock>
 8002980:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <_free_r+0x8c>)
 8002982:	6813      	ldr	r3, [r2, #0]
 8002984:	b933      	cbnz	r3, 8002994 <_free_r+0x2c>
 8002986:	6063      	str	r3, [r4, #4]
 8002988:	6014      	str	r4, [r2, #0]
 800298a:	4628      	mov	r0, r5
 800298c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002990:	f7ff bf80 	b.w	8002894 <__malloc_unlock>
 8002994:	42a3      	cmp	r3, r4
 8002996:	d908      	bls.n	80029aa <_free_r+0x42>
 8002998:	6820      	ldr	r0, [r4, #0]
 800299a:	1821      	adds	r1, r4, r0
 800299c:	428b      	cmp	r3, r1
 800299e:	bf01      	itttt	eq
 80029a0:	6819      	ldreq	r1, [r3, #0]
 80029a2:	685b      	ldreq	r3, [r3, #4]
 80029a4:	1809      	addeq	r1, r1, r0
 80029a6:	6021      	streq	r1, [r4, #0]
 80029a8:	e7ed      	b.n	8002986 <_free_r+0x1e>
 80029aa:	461a      	mov	r2, r3
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	b10b      	cbz	r3, 80029b4 <_free_r+0x4c>
 80029b0:	42a3      	cmp	r3, r4
 80029b2:	d9fa      	bls.n	80029aa <_free_r+0x42>
 80029b4:	6811      	ldr	r1, [r2, #0]
 80029b6:	1850      	adds	r0, r2, r1
 80029b8:	42a0      	cmp	r0, r4
 80029ba:	d10b      	bne.n	80029d4 <_free_r+0x6c>
 80029bc:	6820      	ldr	r0, [r4, #0]
 80029be:	4401      	add	r1, r0
 80029c0:	1850      	adds	r0, r2, r1
 80029c2:	4283      	cmp	r3, r0
 80029c4:	6011      	str	r1, [r2, #0]
 80029c6:	d1e0      	bne.n	800298a <_free_r+0x22>
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4408      	add	r0, r1
 80029ce:	6010      	str	r0, [r2, #0]
 80029d0:	6053      	str	r3, [r2, #4]
 80029d2:	e7da      	b.n	800298a <_free_r+0x22>
 80029d4:	d902      	bls.n	80029dc <_free_r+0x74>
 80029d6:	230c      	movs	r3, #12
 80029d8:	602b      	str	r3, [r5, #0]
 80029da:	e7d6      	b.n	800298a <_free_r+0x22>
 80029dc:	6820      	ldr	r0, [r4, #0]
 80029de:	1821      	adds	r1, r4, r0
 80029e0:	428b      	cmp	r3, r1
 80029e2:	bf01      	itttt	eq
 80029e4:	6819      	ldreq	r1, [r3, #0]
 80029e6:	685b      	ldreq	r3, [r3, #4]
 80029e8:	1809      	addeq	r1, r1, r0
 80029ea:	6021      	streq	r1, [r4, #0]
 80029ec:	6063      	str	r3, [r4, #4]
 80029ee:	6054      	str	r4, [r2, #4]
 80029f0:	e7cb      	b.n	800298a <_free_r+0x22>
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	200004f8 	.word	0x200004f8

080029f8 <__ssputs_r>:
 80029f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029fc:	461f      	mov	r7, r3
 80029fe:	688e      	ldr	r6, [r1, #8]
 8002a00:	4682      	mov	sl, r0
 8002a02:	42be      	cmp	r6, r7
 8002a04:	460c      	mov	r4, r1
 8002a06:	4690      	mov	r8, r2
 8002a08:	680b      	ldr	r3, [r1, #0]
 8002a0a:	d82d      	bhi.n	8002a68 <__ssputs_r+0x70>
 8002a0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002a14:	d026      	beq.n	8002a64 <__ssputs_r+0x6c>
 8002a16:	6965      	ldr	r5, [r4, #20]
 8002a18:	6909      	ldr	r1, [r1, #16]
 8002a1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a1e:	eba3 0901 	sub.w	r9, r3, r1
 8002a22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a26:	1c7b      	adds	r3, r7, #1
 8002a28:	444b      	add	r3, r9
 8002a2a:	106d      	asrs	r5, r5, #1
 8002a2c:	429d      	cmp	r5, r3
 8002a2e:	bf38      	it	cc
 8002a30:	461d      	movcc	r5, r3
 8002a32:	0553      	lsls	r3, r2, #21
 8002a34:	d527      	bpl.n	8002a86 <__ssputs_r+0x8e>
 8002a36:	4629      	mov	r1, r5
 8002a38:	f7ff fea6 	bl	8002788 <_malloc_r>
 8002a3c:	4606      	mov	r6, r0
 8002a3e:	b360      	cbz	r0, 8002a9a <__ssputs_r+0xa2>
 8002a40:	464a      	mov	r2, r9
 8002a42:	6921      	ldr	r1, [r4, #16]
 8002a44:	f000 faea 	bl	800301c <memcpy>
 8002a48:	89a3      	ldrh	r3, [r4, #12]
 8002a4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a52:	81a3      	strh	r3, [r4, #12]
 8002a54:	6126      	str	r6, [r4, #16]
 8002a56:	444e      	add	r6, r9
 8002a58:	6026      	str	r6, [r4, #0]
 8002a5a:	463e      	mov	r6, r7
 8002a5c:	6165      	str	r5, [r4, #20]
 8002a5e:	eba5 0509 	sub.w	r5, r5, r9
 8002a62:	60a5      	str	r5, [r4, #8]
 8002a64:	42be      	cmp	r6, r7
 8002a66:	d900      	bls.n	8002a6a <__ssputs_r+0x72>
 8002a68:	463e      	mov	r6, r7
 8002a6a:	4632      	mov	r2, r6
 8002a6c:	4641      	mov	r1, r8
 8002a6e:	6820      	ldr	r0, [r4, #0]
 8002a70:	f000 faac 	bl	8002fcc <memmove>
 8002a74:	2000      	movs	r0, #0
 8002a76:	68a3      	ldr	r3, [r4, #8]
 8002a78:	1b9b      	subs	r3, r3, r6
 8002a7a:	60a3      	str	r3, [r4, #8]
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	4433      	add	r3, r6
 8002a80:	6023      	str	r3, [r4, #0]
 8002a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a86:	462a      	mov	r2, r5
 8002a88:	f000 fad6 	bl	8003038 <_realloc_r>
 8002a8c:	4606      	mov	r6, r0
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d1e0      	bne.n	8002a54 <__ssputs_r+0x5c>
 8002a92:	4650      	mov	r0, sl
 8002a94:	6921      	ldr	r1, [r4, #16]
 8002a96:	f7ff ff67 	bl	8002968 <_free_r>
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	f8ca 3000 	str.w	r3, [sl]
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aaa:	81a3      	strh	r3, [r4, #12]
 8002aac:	e7e9      	b.n	8002a82 <__ssputs_r+0x8a>
	...

08002ab0 <_svfiprintf_r>:
 8002ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab4:	4698      	mov	r8, r3
 8002ab6:	898b      	ldrh	r3, [r1, #12]
 8002ab8:	4607      	mov	r7, r0
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	460d      	mov	r5, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	b09d      	sub	sp, #116	@ 0x74
 8002ac2:	d510      	bpl.n	8002ae6 <_svfiprintf_r+0x36>
 8002ac4:	690b      	ldr	r3, [r1, #16]
 8002ac6:	b973      	cbnz	r3, 8002ae6 <_svfiprintf_r+0x36>
 8002ac8:	2140      	movs	r1, #64	@ 0x40
 8002aca:	f7ff fe5d 	bl	8002788 <_malloc_r>
 8002ace:	6028      	str	r0, [r5, #0]
 8002ad0:	6128      	str	r0, [r5, #16]
 8002ad2:	b930      	cbnz	r0, 8002ae2 <_svfiprintf_r+0x32>
 8002ad4:	230c      	movs	r3, #12
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	b01d      	add	sp, #116	@ 0x74
 8002ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae2:	2340      	movs	r3, #64	@ 0x40
 8002ae4:	616b      	str	r3, [r5, #20]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002aea:	2320      	movs	r3, #32
 8002aec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002af0:	2330      	movs	r3, #48	@ 0x30
 8002af2:	f04f 0901 	mov.w	r9, #1
 8002af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002afa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002c94 <_svfiprintf_r+0x1e4>
 8002afe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b02:	4623      	mov	r3, r4
 8002b04:	469a      	mov	sl, r3
 8002b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b0a:	b10a      	cbz	r2, 8002b10 <_svfiprintf_r+0x60>
 8002b0c:	2a25      	cmp	r2, #37	@ 0x25
 8002b0e:	d1f9      	bne.n	8002b04 <_svfiprintf_r+0x54>
 8002b10:	ebba 0b04 	subs.w	fp, sl, r4
 8002b14:	d00b      	beq.n	8002b2e <_svfiprintf_r+0x7e>
 8002b16:	465b      	mov	r3, fp
 8002b18:	4622      	mov	r2, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	4638      	mov	r0, r7
 8002b1e:	f7ff ff6b 	bl	80029f8 <__ssputs_r>
 8002b22:	3001      	adds	r0, #1
 8002b24:	f000 80a7 	beq.w	8002c76 <_svfiprintf_r+0x1c6>
 8002b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b2a:	445a      	add	r2, fp
 8002b2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 809f 	beq.w	8002c76 <_svfiprintf_r+0x1c6>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b42:	f10a 0a01 	add.w	sl, sl, #1
 8002b46:	9304      	str	r3, [sp, #16]
 8002b48:	9307      	str	r3, [sp, #28]
 8002b4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b50:	4654      	mov	r4, sl
 8002b52:	2205      	movs	r2, #5
 8002b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b58:	484e      	ldr	r0, [pc, #312]	@ (8002c94 <_svfiprintf_r+0x1e4>)
 8002b5a:	f000 fa51 	bl	8003000 <memchr>
 8002b5e:	9a04      	ldr	r2, [sp, #16]
 8002b60:	b9d8      	cbnz	r0, 8002b9a <_svfiprintf_r+0xea>
 8002b62:	06d0      	lsls	r0, r2, #27
 8002b64:	bf44      	itt	mi
 8002b66:	2320      	movmi	r3, #32
 8002b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b6c:	0711      	lsls	r1, r2, #28
 8002b6e:	bf44      	itt	mi
 8002b70:	232b      	movmi	r3, #43	@ 0x2b
 8002b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b76:	f89a 3000 	ldrb.w	r3, [sl]
 8002b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b7c:	d015      	beq.n	8002baa <_svfiprintf_r+0xfa>
 8002b7e:	4654      	mov	r4, sl
 8002b80:	2000      	movs	r0, #0
 8002b82:	f04f 0c0a 	mov.w	ip, #10
 8002b86:	9a07      	ldr	r2, [sp, #28]
 8002b88:	4621      	mov	r1, r4
 8002b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b8e:	3b30      	subs	r3, #48	@ 0x30
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	d94b      	bls.n	8002c2c <_svfiprintf_r+0x17c>
 8002b94:	b1b0      	cbz	r0, 8002bc4 <_svfiprintf_r+0x114>
 8002b96:	9207      	str	r2, [sp, #28]
 8002b98:	e014      	b.n	8002bc4 <_svfiprintf_r+0x114>
 8002b9a:	eba0 0308 	sub.w	r3, r0, r8
 8002b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	46a2      	mov	sl, r4
 8002ba6:	9304      	str	r3, [sp, #16]
 8002ba8:	e7d2      	b.n	8002b50 <_svfiprintf_r+0xa0>
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	1d19      	adds	r1, r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	9103      	str	r1, [sp, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bfbb      	ittet	lt
 8002bb6:	425b      	neglt	r3, r3
 8002bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8002bbc:	9307      	strge	r3, [sp, #28]
 8002bbe:	9307      	strlt	r3, [sp, #28]
 8002bc0:	bfb8      	it	lt
 8002bc2:	9204      	strlt	r2, [sp, #16]
 8002bc4:	7823      	ldrb	r3, [r4, #0]
 8002bc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002bc8:	d10a      	bne.n	8002be0 <_svfiprintf_r+0x130>
 8002bca:	7863      	ldrb	r3, [r4, #1]
 8002bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bce:	d132      	bne.n	8002c36 <_svfiprintf_r+0x186>
 8002bd0:	9b03      	ldr	r3, [sp, #12]
 8002bd2:	3402      	adds	r4, #2
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	9203      	str	r2, [sp, #12]
 8002bda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002bde:	9305      	str	r3, [sp, #20]
 8002be0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002c98 <_svfiprintf_r+0x1e8>
 8002be4:	2203      	movs	r2, #3
 8002be6:	4650      	mov	r0, sl
 8002be8:	7821      	ldrb	r1, [r4, #0]
 8002bea:	f000 fa09 	bl	8003000 <memchr>
 8002bee:	b138      	cbz	r0, 8002c00 <_svfiprintf_r+0x150>
 8002bf0:	2240      	movs	r2, #64	@ 0x40
 8002bf2:	9b04      	ldr	r3, [sp, #16]
 8002bf4:	eba0 000a 	sub.w	r0, r0, sl
 8002bf8:	4082      	lsls	r2, r0
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	3401      	adds	r4, #1
 8002bfe:	9304      	str	r3, [sp, #16]
 8002c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c04:	2206      	movs	r2, #6
 8002c06:	4825      	ldr	r0, [pc, #148]	@ (8002c9c <_svfiprintf_r+0x1ec>)
 8002c08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c0c:	f000 f9f8 	bl	8003000 <memchr>
 8002c10:	2800      	cmp	r0, #0
 8002c12:	d036      	beq.n	8002c82 <_svfiprintf_r+0x1d2>
 8002c14:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <_svfiprintf_r+0x1f0>)
 8002c16:	bb1b      	cbnz	r3, 8002c60 <_svfiprintf_r+0x1b0>
 8002c18:	9b03      	ldr	r3, [sp, #12]
 8002c1a:	3307      	adds	r3, #7
 8002c1c:	f023 0307 	bic.w	r3, r3, #7
 8002c20:	3308      	adds	r3, #8
 8002c22:	9303      	str	r3, [sp, #12]
 8002c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c26:	4433      	add	r3, r6
 8002c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c2a:	e76a      	b.n	8002b02 <_svfiprintf_r+0x52>
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	2001      	movs	r0, #1
 8002c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c34:	e7a8      	b.n	8002b88 <_svfiprintf_r+0xd8>
 8002c36:	2300      	movs	r3, #0
 8002c38:	f04f 0c0a 	mov.w	ip, #10
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	3401      	adds	r4, #1
 8002c40:	9305      	str	r3, [sp, #20]
 8002c42:	4620      	mov	r0, r4
 8002c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c48:	3a30      	subs	r2, #48	@ 0x30
 8002c4a:	2a09      	cmp	r2, #9
 8002c4c:	d903      	bls.n	8002c56 <_svfiprintf_r+0x1a6>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0c6      	beq.n	8002be0 <_svfiprintf_r+0x130>
 8002c52:	9105      	str	r1, [sp, #20]
 8002c54:	e7c4      	b.n	8002be0 <_svfiprintf_r+0x130>
 8002c56:	4604      	mov	r4, r0
 8002c58:	2301      	movs	r3, #1
 8002c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c5e:	e7f0      	b.n	8002c42 <_svfiprintf_r+0x192>
 8002c60:	ab03      	add	r3, sp, #12
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	462a      	mov	r2, r5
 8002c66:	4638      	mov	r0, r7
 8002c68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <_svfiprintf_r+0x1f4>)
 8002c6a:	a904      	add	r1, sp, #16
 8002c6c:	f3af 8000 	nop.w
 8002c70:	1c42      	adds	r2, r0, #1
 8002c72:	4606      	mov	r6, r0
 8002c74:	d1d6      	bne.n	8002c24 <_svfiprintf_r+0x174>
 8002c76:	89ab      	ldrh	r3, [r5, #12]
 8002c78:	065b      	lsls	r3, r3, #25
 8002c7a:	f53f af2d 	bmi.w	8002ad8 <_svfiprintf_r+0x28>
 8002c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c80:	e72c      	b.n	8002adc <_svfiprintf_r+0x2c>
 8002c82:	ab03      	add	r3, sp, #12
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	462a      	mov	r2, r5
 8002c88:	4638      	mov	r0, r7
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <_svfiprintf_r+0x1f4>)
 8002c8c:	a904      	add	r1, sp, #16
 8002c8e:	f000 f87d 	bl	8002d8c <_printf_i>
 8002c92:	e7ed      	b.n	8002c70 <_svfiprintf_r+0x1c0>
 8002c94:	08004246 	.word	0x08004246
 8002c98:	0800424c 	.word	0x0800424c
 8002c9c:	08004250 	.word	0x08004250
 8002ca0:	00000000 	.word	0x00000000
 8002ca4:	080029f9 	.word	0x080029f9

08002ca8 <_printf_common>:
 8002ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cac:	4616      	mov	r6, r2
 8002cae:	4698      	mov	r8, r3
 8002cb0:	688a      	ldr	r2, [r1, #8]
 8002cb2:	690b      	ldr	r3, [r1, #16]
 8002cb4:	4607      	mov	r7, r0
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	bfb8      	it	lt
 8002cba:	4613      	movlt	r3, r2
 8002cbc:	6033      	str	r3, [r6, #0]
 8002cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002cc2:	460c      	mov	r4, r1
 8002cc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002cc8:	b10a      	cbz	r2, 8002cce <_printf_common+0x26>
 8002cca:	3301      	adds	r3, #1
 8002ccc:	6033      	str	r3, [r6, #0]
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	0699      	lsls	r1, r3, #26
 8002cd2:	bf42      	ittt	mi
 8002cd4:	6833      	ldrmi	r3, [r6, #0]
 8002cd6:	3302      	addmi	r3, #2
 8002cd8:	6033      	strmi	r3, [r6, #0]
 8002cda:	6825      	ldr	r5, [r4, #0]
 8002cdc:	f015 0506 	ands.w	r5, r5, #6
 8002ce0:	d106      	bne.n	8002cf0 <_printf_common+0x48>
 8002ce2:	f104 0a19 	add.w	sl, r4, #25
 8002ce6:	68e3      	ldr	r3, [r4, #12]
 8002ce8:	6832      	ldr	r2, [r6, #0]
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	dc2b      	bgt.n	8002d48 <_printf_common+0xa0>
 8002cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002cf4:	6822      	ldr	r2, [r4, #0]
 8002cf6:	3b00      	subs	r3, #0
 8002cf8:	bf18      	it	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	0692      	lsls	r2, r2, #26
 8002cfe:	d430      	bmi.n	8002d62 <_printf_common+0xba>
 8002d00:	4641      	mov	r1, r8
 8002d02:	4638      	mov	r0, r7
 8002d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d08:	47c8      	blx	r9
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	d023      	beq.n	8002d56 <_printf_common+0xae>
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	f003 0306 	and.w	r3, r3, #6
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	bf14      	ite	ne
 8002d1a:	2500      	movne	r5, #0
 8002d1c:	6833      	ldreq	r3, [r6, #0]
 8002d1e:	f04f 0600 	mov.w	r6, #0
 8002d22:	bf08      	it	eq
 8002d24:	68e5      	ldreq	r5, [r4, #12]
 8002d26:	f104 041a 	add.w	r4, r4, #26
 8002d2a:	bf08      	it	eq
 8002d2c:	1aed      	subeq	r5, r5, r3
 8002d2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d32:	bf08      	it	eq
 8002d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bfc4      	itt	gt
 8002d3c:	1a9b      	subgt	r3, r3, r2
 8002d3e:	18ed      	addgt	r5, r5, r3
 8002d40:	42b5      	cmp	r5, r6
 8002d42:	d11a      	bne.n	8002d7a <_printf_common+0xd2>
 8002d44:	2000      	movs	r0, #0
 8002d46:	e008      	b.n	8002d5a <_printf_common+0xb2>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	4652      	mov	r2, sl
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	4638      	mov	r0, r7
 8002d50:	47c8      	blx	r9
 8002d52:	3001      	adds	r0, #1
 8002d54:	d103      	bne.n	8002d5e <_printf_common+0xb6>
 8002d56:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5e:	3501      	adds	r5, #1
 8002d60:	e7c1      	b.n	8002ce6 <_printf_common+0x3e>
 8002d62:	2030      	movs	r0, #48	@ 0x30
 8002d64:	18e1      	adds	r1, r4, r3
 8002d66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002d70:	4422      	add	r2, r4
 8002d72:	3302      	adds	r3, #2
 8002d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002d78:	e7c2      	b.n	8002d00 <_printf_common+0x58>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	4641      	mov	r1, r8
 8002d80:	4638      	mov	r0, r7
 8002d82:	47c8      	blx	r9
 8002d84:	3001      	adds	r0, #1
 8002d86:	d0e6      	beq.n	8002d56 <_printf_common+0xae>
 8002d88:	3601      	adds	r6, #1
 8002d8a:	e7d9      	b.n	8002d40 <_printf_common+0x98>

08002d8c <_printf_i>:
 8002d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d90:	7e0f      	ldrb	r7, [r1, #24]
 8002d92:	4691      	mov	r9, r2
 8002d94:	2f78      	cmp	r7, #120	@ 0x78
 8002d96:	4680      	mov	r8, r0
 8002d98:	460c      	mov	r4, r1
 8002d9a:	469a      	mov	sl, r3
 8002d9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002da2:	d807      	bhi.n	8002db4 <_printf_i+0x28>
 8002da4:	2f62      	cmp	r7, #98	@ 0x62
 8002da6:	d80a      	bhi.n	8002dbe <_printf_i+0x32>
 8002da8:	2f00      	cmp	r7, #0
 8002daa:	f000 80d3 	beq.w	8002f54 <_printf_i+0x1c8>
 8002dae:	2f58      	cmp	r7, #88	@ 0x58
 8002db0:	f000 80ba 	beq.w	8002f28 <_printf_i+0x19c>
 8002db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002db8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002dbc:	e03a      	b.n	8002e34 <_printf_i+0xa8>
 8002dbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002dc2:	2b15      	cmp	r3, #21
 8002dc4:	d8f6      	bhi.n	8002db4 <_printf_i+0x28>
 8002dc6:	a101      	add	r1, pc, #4	@ (adr r1, 8002dcc <_printf_i+0x40>)
 8002dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dcc:	08002e25 	.word	0x08002e25
 8002dd0:	08002e39 	.word	0x08002e39
 8002dd4:	08002db5 	.word	0x08002db5
 8002dd8:	08002db5 	.word	0x08002db5
 8002ddc:	08002db5 	.word	0x08002db5
 8002de0:	08002db5 	.word	0x08002db5
 8002de4:	08002e39 	.word	0x08002e39
 8002de8:	08002db5 	.word	0x08002db5
 8002dec:	08002db5 	.word	0x08002db5
 8002df0:	08002db5 	.word	0x08002db5
 8002df4:	08002db5 	.word	0x08002db5
 8002df8:	08002f3b 	.word	0x08002f3b
 8002dfc:	08002e63 	.word	0x08002e63
 8002e00:	08002ef5 	.word	0x08002ef5
 8002e04:	08002db5 	.word	0x08002db5
 8002e08:	08002db5 	.word	0x08002db5
 8002e0c:	08002f5d 	.word	0x08002f5d
 8002e10:	08002db5 	.word	0x08002db5
 8002e14:	08002e63 	.word	0x08002e63
 8002e18:	08002db5 	.word	0x08002db5
 8002e1c:	08002db5 	.word	0x08002db5
 8002e20:	08002efd 	.word	0x08002efd
 8002e24:	6833      	ldr	r3, [r6, #0]
 8002e26:	1d1a      	adds	r2, r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6032      	str	r2, [r6, #0]
 8002e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e34:	2301      	movs	r3, #1
 8002e36:	e09e      	b.n	8002f76 <_printf_i+0x1ea>
 8002e38:	6833      	ldr	r3, [r6, #0]
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	1d19      	adds	r1, r3, #4
 8002e3e:	6031      	str	r1, [r6, #0]
 8002e40:	0606      	lsls	r6, r0, #24
 8002e42:	d501      	bpl.n	8002e48 <_printf_i+0xbc>
 8002e44:	681d      	ldr	r5, [r3, #0]
 8002e46:	e003      	b.n	8002e50 <_printf_i+0xc4>
 8002e48:	0645      	lsls	r5, r0, #25
 8002e4a:	d5fb      	bpl.n	8002e44 <_printf_i+0xb8>
 8002e4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e50:	2d00      	cmp	r5, #0
 8002e52:	da03      	bge.n	8002e5c <_printf_i+0xd0>
 8002e54:	232d      	movs	r3, #45	@ 0x2d
 8002e56:	426d      	negs	r5, r5
 8002e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e5c:	230a      	movs	r3, #10
 8002e5e:	4859      	ldr	r0, [pc, #356]	@ (8002fc4 <_printf_i+0x238>)
 8002e60:	e011      	b.n	8002e86 <_printf_i+0xfa>
 8002e62:	6821      	ldr	r1, [r4, #0]
 8002e64:	6833      	ldr	r3, [r6, #0]
 8002e66:	0608      	lsls	r0, r1, #24
 8002e68:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e6c:	d402      	bmi.n	8002e74 <_printf_i+0xe8>
 8002e6e:	0649      	lsls	r1, r1, #25
 8002e70:	bf48      	it	mi
 8002e72:	b2ad      	uxthmi	r5, r5
 8002e74:	2f6f      	cmp	r7, #111	@ 0x6f
 8002e76:	6033      	str	r3, [r6, #0]
 8002e78:	bf14      	ite	ne
 8002e7a:	230a      	movne	r3, #10
 8002e7c:	2308      	moveq	r3, #8
 8002e7e:	4851      	ldr	r0, [pc, #324]	@ (8002fc4 <_printf_i+0x238>)
 8002e80:	2100      	movs	r1, #0
 8002e82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e86:	6866      	ldr	r6, [r4, #4]
 8002e88:	2e00      	cmp	r6, #0
 8002e8a:	bfa8      	it	ge
 8002e8c:	6821      	ldrge	r1, [r4, #0]
 8002e8e:	60a6      	str	r6, [r4, #8]
 8002e90:	bfa4      	itt	ge
 8002e92:	f021 0104 	bicge.w	r1, r1, #4
 8002e96:	6021      	strge	r1, [r4, #0]
 8002e98:	b90d      	cbnz	r5, 8002e9e <_printf_i+0x112>
 8002e9a:	2e00      	cmp	r6, #0
 8002e9c:	d04b      	beq.n	8002f36 <_printf_i+0x1aa>
 8002e9e:	4616      	mov	r6, r2
 8002ea0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ea4:	fb03 5711 	mls	r7, r3, r1, r5
 8002ea8:	5dc7      	ldrb	r7, [r0, r7]
 8002eaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002eae:	462f      	mov	r7, r5
 8002eb0:	42bb      	cmp	r3, r7
 8002eb2:	460d      	mov	r5, r1
 8002eb4:	d9f4      	bls.n	8002ea0 <_printf_i+0x114>
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d10b      	bne.n	8002ed2 <_printf_i+0x146>
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	07df      	lsls	r7, r3, #31
 8002ebe:	d508      	bpl.n	8002ed2 <_printf_i+0x146>
 8002ec0:	6923      	ldr	r3, [r4, #16]
 8002ec2:	6861      	ldr	r1, [r4, #4]
 8002ec4:	4299      	cmp	r1, r3
 8002ec6:	bfde      	ittt	le
 8002ec8:	2330      	movle	r3, #48	@ 0x30
 8002eca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ece:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ed2:	1b92      	subs	r2, r2, r6
 8002ed4:	6122      	str	r2, [r4, #16]
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	4621      	mov	r1, r4
 8002eda:	4640      	mov	r0, r8
 8002edc:	f8cd a000 	str.w	sl, [sp]
 8002ee0:	aa03      	add	r2, sp, #12
 8002ee2:	f7ff fee1 	bl	8002ca8 <_printf_common>
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d14a      	bne.n	8002f80 <_printf_i+0x1f4>
 8002eea:	f04f 30ff 	mov.w	r0, #4294967295
 8002eee:	b004      	add	sp, #16
 8002ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	f043 0320 	orr.w	r3, r3, #32
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	2778      	movs	r7, #120	@ 0x78
 8002efe:	4832      	ldr	r0, [pc, #200]	@ (8002fc8 <_printf_i+0x23c>)
 8002f00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	6831      	ldr	r1, [r6, #0]
 8002f08:	061f      	lsls	r7, r3, #24
 8002f0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f0e:	d402      	bmi.n	8002f16 <_printf_i+0x18a>
 8002f10:	065f      	lsls	r7, r3, #25
 8002f12:	bf48      	it	mi
 8002f14:	b2ad      	uxthmi	r5, r5
 8002f16:	6031      	str	r1, [r6, #0]
 8002f18:	07d9      	lsls	r1, r3, #31
 8002f1a:	bf44      	itt	mi
 8002f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8002f20:	6023      	strmi	r3, [r4, #0]
 8002f22:	b11d      	cbz	r5, 8002f2c <_printf_i+0x1a0>
 8002f24:	2310      	movs	r3, #16
 8002f26:	e7ab      	b.n	8002e80 <_printf_i+0xf4>
 8002f28:	4826      	ldr	r0, [pc, #152]	@ (8002fc4 <_printf_i+0x238>)
 8002f2a:	e7e9      	b.n	8002f00 <_printf_i+0x174>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	f023 0320 	bic.w	r3, r3, #32
 8002f32:	6023      	str	r3, [r4, #0]
 8002f34:	e7f6      	b.n	8002f24 <_printf_i+0x198>
 8002f36:	4616      	mov	r6, r2
 8002f38:	e7bd      	b.n	8002eb6 <_printf_i+0x12a>
 8002f3a:	6833      	ldr	r3, [r6, #0]
 8002f3c:	6825      	ldr	r5, [r4, #0]
 8002f3e:	1d18      	adds	r0, r3, #4
 8002f40:	6961      	ldr	r1, [r4, #20]
 8002f42:	6030      	str	r0, [r6, #0]
 8002f44:	062e      	lsls	r6, r5, #24
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	d501      	bpl.n	8002f4e <_printf_i+0x1c2>
 8002f4a:	6019      	str	r1, [r3, #0]
 8002f4c:	e002      	b.n	8002f54 <_printf_i+0x1c8>
 8002f4e:	0668      	lsls	r0, r5, #25
 8002f50:	d5fb      	bpl.n	8002f4a <_printf_i+0x1be>
 8002f52:	8019      	strh	r1, [r3, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	4616      	mov	r6, r2
 8002f58:	6123      	str	r3, [r4, #16]
 8002f5a:	e7bc      	b.n	8002ed6 <_printf_i+0x14a>
 8002f5c:	6833      	ldr	r3, [r6, #0]
 8002f5e:	2100      	movs	r1, #0
 8002f60:	1d1a      	adds	r2, r3, #4
 8002f62:	6032      	str	r2, [r6, #0]
 8002f64:	681e      	ldr	r6, [r3, #0]
 8002f66:	6862      	ldr	r2, [r4, #4]
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f000 f849 	bl	8003000 <memchr>
 8002f6e:	b108      	cbz	r0, 8002f74 <_printf_i+0x1e8>
 8002f70:	1b80      	subs	r0, r0, r6
 8002f72:	6060      	str	r0, [r4, #4]
 8002f74:	6863      	ldr	r3, [r4, #4]
 8002f76:	6123      	str	r3, [r4, #16]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f7e:	e7aa      	b.n	8002ed6 <_printf_i+0x14a>
 8002f80:	4632      	mov	r2, r6
 8002f82:	4649      	mov	r1, r9
 8002f84:	4640      	mov	r0, r8
 8002f86:	6923      	ldr	r3, [r4, #16]
 8002f88:	47d0      	blx	sl
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d0ad      	beq.n	8002eea <_printf_i+0x15e>
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	079b      	lsls	r3, r3, #30
 8002f92:	d413      	bmi.n	8002fbc <_printf_i+0x230>
 8002f94:	68e0      	ldr	r0, [r4, #12]
 8002f96:	9b03      	ldr	r3, [sp, #12]
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	bfb8      	it	lt
 8002f9c:	4618      	movlt	r0, r3
 8002f9e:	e7a6      	b.n	8002eee <_printf_i+0x162>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	4632      	mov	r2, r6
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	47d0      	blx	sl
 8002faa:	3001      	adds	r0, #1
 8002fac:	d09d      	beq.n	8002eea <_printf_i+0x15e>
 8002fae:	3501      	adds	r5, #1
 8002fb0:	68e3      	ldr	r3, [r4, #12]
 8002fb2:	9903      	ldr	r1, [sp, #12]
 8002fb4:	1a5b      	subs	r3, r3, r1
 8002fb6:	42ab      	cmp	r3, r5
 8002fb8:	dcf2      	bgt.n	8002fa0 <_printf_i+0x214>
 8002fba:	e7eb      	b.n	8002f94 <_printf_i+0x208>
 8002fbc:	2500      	movs	r5, #0
 8002fbe:	f104 0619 	add.w	r6, r4, #25
 8002fc2:	e7f5      	b.n	8002fb0 <_printf_i+0x224>
 8002fc4:	08004257 	.word	0x08004257
 8002fc8:	08004268 	.word	0x08004268

08002fcc <memmove>:
 8002fcc:	4288      	cmp	r0, r1
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	eb01 0402 	add.w	r4, r1, r2
 8002fd4:	d902      	bls.n	8002fdc <memmove+0x10>
 8002fd6:	4284      	cmp	r4, r0
 8002fd8:	4623      	mov	r3, r4
 8002fda:	d807      	bhi.n	8002fec <memmove+0x20>
 8002fdc:	1e43      	subs	r3, r0, #1
 8002fde:	42a1      	cmp	r1, r4
 8002fe0:	d008      	beq.n	8002ff4 <memmove+0x28>
 8002fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fea:	e7f8      	b.n	8002fde <memmove+0x12>
 8002fec:	4601      	mov	r1, r0
 8002fee:	4402      	add	r2, r0
 8002ff0:	428a      	cmp	r2, r1
 8002ff2:	d100      	bne.n	8002ff6 <memmove+0x2a>
 8002ff4:	bd10      	pop	{r4, pc}
 8002ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ffe:	e7f7      	b.n	8002ff0 <memmove+0x24>

08003000 <memchr>:
 8003000:	4603      	mov	r3, r0
 8003002:	b510      	push	{r4, lr}
 8003004:	b2c9      	uxtb	r1, r1
 8003006:	4402      	add	r2, r0
 8003008:	4293      	cmp	r3, r2
 800300a:	4618      	mov	r0, r3
 800300c:	d101      	bne.n	8003012 <memchr+0x12>
 800300e:	2000      	movs	r0, #0
 8003010:	e003      	b.n	800301a <memchr+0x1a>
 8003012:	7804      	ldrb	r4, [r0, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	428c      	cmp	r4, r1
 8003018:	d1f6      	bne.n	8003008 <memchr+0x8>
 800301a:	bd10      	pop	{r4, pc}

0800301c <memcpy>:
 800301c:	440a      	add	r2, r1
 800301e:	4291      	cmp	r1, r2
 8003020:	f100 33ff 	add.w	r3, r0, #4294967295
 8003024:	d100      	bne.n	8003028 <memcpy+0xc>
 8003026:	4770      	bx	lr
 8003028:	b510      	push	{r4, lr}
 800302a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800302e:	4291      	cmp	r1, r2
 8003030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003034:	d1f9      	bne.n	800302a <memcpy+0xe>
 8003036:	bd10      	pop	{r4, pc}

08003038 <_realloc_r>:
 8003038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800303c:	4680      	mov	r8, r0
 800303e:	4615      	mov	r5, r2
 8003040:	460c      	mov	r4, r1
 8003042:	b921      	cbnz	r1, 800304e <_realloc_r+0x16>
 8003044:	4611      	mov	r1, r2
 8003046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800304a:	f7ff bb9d 	b.w	8002788 <_malloc_r>
 800304e:	b92a      	cbnz	r2, 800305c <_realloc_r+0x24>
 8003050:	f7ff fc8a 	bl	8002968 <_free_r>
 8003054:	2400      	movs	r4, #0
 8003056:	4620      	mov	r0, r4
 8003058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800305c:	f000 f81a 	bl	8003094 <_malloc_usable_size_r>
 8003060:	4285      	cmp	r5, r0
 8003062:	4606      	mov	r6, r0
 8003064:	d802      	bhi.n	800306c <_realloc_r+0x34>
 8003066:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800306a:	d8f4      	bhi.n	8003056 <_realloc_r+0x1e>
 800306c:	4629      	mov	r1, r5
 800306e:	4640      	mov	r0, r8
 8003070:	f7ff fb8a 	bl	8002788 <_malloc_r>
 8003074:	4607      	mov	r7, r0
 8003076:	2800      	cmp	r0, #0
 8003078:	d0ec      	beq.n	8003054 <_realloc_r+0x1c>
 800307a:	42b5      	cmp	r5, r6
 800307c:	462a      	mov	r2, r5
 800307e:	4621      	mov	r1, r4
 8003080:	bf28      	it	cs
 8003082:	4632      	movcs	r2, r6
 8003084:	f7ff ffca 	bl	800301c <memcpy>
 8003088:	4621      	mov	r1, r4
 800308a:	4640      	mov	r0, r8
 800308c:	f7ff fc6c 	bl	8002968 <_free_r>
 8003090:	463c      	mov	r4, r7
 8003092:	e7e0      	b.n	8003056 <_realloc_r+0x1e>

08003094 <_malloc_usable_size_r>:
 8003094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003098:	1f18      	subs	r0, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	bfbc      	itt	lt
 800309e:	580b      	ldrlt	r3, [r1, r0]
 80030a0:	18c0      	addlt	r0, r0, r3
 80030a2:	4770      	bx	lr

080030a4 <_init>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr

080030b0 <_fini>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr
