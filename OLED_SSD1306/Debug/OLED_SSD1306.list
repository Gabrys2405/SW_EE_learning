
OLED_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  0800405c  0800405c  0000505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e30  08004e30  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  08004e30  08004e30  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e30  08004e30  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e30  08004e30  00005e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e34  08004e34  00005e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004e38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000064  08004e9c  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08004e9c  00006680  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086e4  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b43  00000000  00000000  0000e771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  000102b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ec  00000000  00000000  00010bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a74  00000000  00000000  000112b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2e2  00000000  00000000  00028d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008736c  00000000  00000000  0003500a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  000bc3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000bed74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08004044 	.word	0x08004044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08004044 	.word	0x08004044

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <uint32_to_string.0>:
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	char* uint32_to_string(uint32_t value) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	f8c7 c000 	str.w	ip, [r7]

		char* buffer = (char*)malloc(11);
 8000374:	200b      	movs	r0, #11
 8000376:	f003 f9ad 	bl	80036d4 <malloc>
 800037a:	4603      	mov	r3, r0
 800037c:	60fb      	str	r3, [r7, #12]
		if (buffer == NULL) {
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d101      	bne.n	8000388 <uint32_to_string.0+0x20>
			return NULL;
 8000384:	2300      	movs	r3, #0
 8000386:	e005      	b.n	8000394 <uint32_to_string.0+0x2c>
		}


		sprintf(buffer, "%u", value);
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4904      	ldr	r1, [pc, #16]	@ (800039c <uint32_to_string.0+0x34>)
 800038c:	68f8      	ldr	r0, [r7, #12]
 800038e:	f003 fa57 	bl	8003840 <siprintf>

		return buffer;
 8000392:	68fb      	ldr	r3, [r7, #12]
	}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	0800405c 	.word	0x0800405c

080003a0 <main>:
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af02      	add	r7, sp, #8
int main(void)
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 ff3e 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f8a3 	bl	80004fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f000 f96a 	bl	800068c <MX_GPIO_Init>
  MX_I2C1_Init();
 80003b8:	f000 f93a 	bl	8000630 <MX_I2C1_Init>
  MX_ADC1_Init();
 80003bc:	f000 f8f8 	bl	80005b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80003c0:	483b      	ldr	r0, [pc, #236]	@ (80004b0 <main+0x110>)
 80003c2:	f001 f86d 	bl	80014a0 <HAL_ADC_Start>


  SSD1306_Init();
 80003c6:	f000 f9f3 	bl	80007b0 <SSD1306_Init>
////  HAL_Delay(3000);
////  SSD1306_ScrollRight(0, 10);
//  HAL_Delay(5000);
//  SSD1306_Stopscroll();
//  HAL_Delay(3000);
  SSD1306_Clear();
 80003ca:	f000 fd5a 	bl	8000e82 <SSD1306_Clear>
//	HAL_Delay(1000);
//	HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
//	HAL_Delay(1000);
//	HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);

  if(adc_flag){
 80003ce:	4b39      	ldr	r3, [pc, #228]	@ (80004b4 <main+0x114>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d023      	beq.n	8000420 <main+0x80>

	  HAL_ADC_PollForConversion(&hadc1,1000);
 80003d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003dc:	4834      	ldr	r0, [pc, #208]	@ (80004b0 <main+0x110>)
 80003de:	f001 f90d 	bl	80015fc <HAL_ADC_PollForConversion>
	  volume = HAL_ADC_GetValue(&hadc1);
 80003e2:	4833      	ldr	r0, [pc, #204]	@ (80004b0 <main+0x110>)
 80003e4:	f001 fa10 	bl	8001808 <HAL_ADC_GetValue>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4a33      	ldr	r2, [pc, #204]	@ (80004b8 <main+0x118>)
 80003ec:	6013      	str	r3, [r2, #0]
	  if (volume<= 1000){
 80003ee:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <main+0x118>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003f6:	d808      	bhi.n	800040a <main+0x6a>
		  if (clear_flag == 0){
 80003f8:	4b30      	ldr	r3, [pc, #192]	@ (80004bc <main+0x11c>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d10b      	bne.n	800041a <main+0x7a>
			  clear_flag = 1;
 8000402:	4b2e      	ldr	r3, [pc, #184]	@ (80004bc <main+0x11c>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
 8000408:	e007      	b.n	800041a <main+0x7a>
		  }
	  }
	  else if (volume >= 1000){
 800040a:	4b2b      	ldr	r3, [pc, #172]	@ (80004b8 <main+0x118>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000412:	d302      	bcc.n	800041a <main+0x7a>
		  clear_flag = 0;
 8000414:	4b29      	ldr	r3, [pc, #164]	@ (80004bc <main+0x11c>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	  }
	  adc_flag = 0;
 800041a:	4b26      	ldr	r3, [pc, #152]	@ (80004b4 <main+0x114>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
	  }
  if (oled_flag){
 8000420:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <main+0x120>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0d1      	beq.n	80003ce <main+0x2e>
	  SSD1306_UpdateScreen();
 800042a:	f000 fa85 	bl	8000938 <SSD1306_UpdateScreen>
	  if(clear_flag == 1){
 800042e:	4b23      	ldr	r3, [pc, #140]	@ (80004bc <main+0x11c>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	b2db      	uxtb	r3, r3
 8000434:	2b01      	cmp	r3, #1
 8000436:	d104      	bne.n	8000442 <main+0xa2>

		  SSD1306_Clear();
 8000438:	f000 fd23 	bl	8000e82 <SSD1306_Clear>
		  clear_flag = 2;
 800043c:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <main+0x11c>)
 800043e:	2202      	movs	r2, #2
 8000440:	701a      	strb	r2, [r3, #0]
	  }


	  volume_str = uint32_to_string(volume);
 8000442:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <main+0x118>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	1d3a      	adds	r2, r7, #4
 8000448:	4694      	mov	ip, r2
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff8c 	bl	8000368 <uint32_to_string.0>
 8000450:	4603      	mov	r3, r0
 8000452:	4a1c      	ldr	r2, [pc, #112]	@ (80004c4 <main+0x124>)
 8000454:	6013      	str	r3, [r2, #0]
	  SSD1306_GotoXY(40, 5);
 8000456:	2105      	movs	r1, #5
 8000458:	2028      	movs	r0, #40	@ 0x28
 800045a:	f000 fb11 	bl	8000a80 <SSD1306_GotoXY>
	  SSD1306_Puts(volume_str, &Font_11x18, 1);
 800045e:	4b19      	ldr	r3, [pc, #100]	@ (80004c4 <main+0x124>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2201      	movs	r2, #1
 8000464:	4918      	ldr	r1, [pc, #96]	@ (80004c8 <main+0x128>)
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fb9e 	bl	8000ba8 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800046c:	f000 fa64 	bl	8000938 <SSD1306_UpdateScreen>
	  SSD1306_GotoXY(0,40);
 8000470:	2128      	movs	r1, #40	@ 0x28
 8000472:	2000      	movs	r0, #0
 8000474:	f000 fb04 	bl	8000a80 <SSD1306_GotoXY>
	  progress = calculate_progress(volume);
 8000478:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <main+0x118>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	1d3a      	adds	r2, r7, #4
 800047e:	4694      	mov	ip, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f000 f825 	bl	80004d0 <calculate_progress.1>
 8000486:	4603      	mov	r3, r0
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff15 	bl	80002b8 <__aeabi_ui2f>
 800048e:	4603      	mov	r3, r0
 8000490:	4a0e      	ldr	r2, [pc, #56]	@ (80004cc <main+0x12c>)
 8000492:	6013      	str	r3, [r2, #0]
	  SSD1306_DrawFilledRectangle(0,40,128,10,1);
 8000494:	2301      	movs	r3, #1
 8000496:	9300      	str	r3, [sp, #0]
 8000498:	230a      	movs	r3, #10
 800049a:	2280      	movs	r2, #128	@ 0x80
 800049c:	2128      	movs	r1, #40	@ 0x28
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 fca2 	bl	8000de8 <SSD1306_DrawFilledRectangle>
	  SSD1306_UpdateScreen();
 80004a4:	f000 fa48 	bl	8000938 <SSD1306_UpdateScreen>
////	  SSD1306_Puts(volume_str, &Font_11x18, 1);
//	  SSD1306_UpdateScreen();
//	  SSD1306_DrawRectangle(16,25,100,3,1);
//
//	  SSD1306_UpdateScreen();
	  oled_flag = 0;
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <main+0x120>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
  if(adc_flag){
 80004ae:	e78e      	b.n	80003ce <main+0x2e>
 80004b0:	20000080 	.word	0x20000080
 80004b4:	20000108 	.word	0x20000108
 80004b8:	2000011c 	.word	0x2000011c
 80004bc:	20000118 	.word	0x20000118
 80004c0:	20000110 	.word	0x20000110
 80004c4:	20000124 	.word	0x20000124
 80004c8:	20000000 	.word	0x20000000
 80004cc:	20000120 	.word	0x20000120

080004d0 <calculate_progress.1>:
	uint8_t calculate_progress(uint32_t value){
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	f8c7 c000 	str.w	ip, [r7]
		uint32_t result = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
		value /= 4096;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	0b1b      	lsrs	r3, r3, #12
 80004e4:	607b      	str	r3, [r7, #4]
		result = value * 128;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	01db      	lsls	r3, r3, #7
 80004ea:	60fb      	str	r3, [r7, #12]
		return result;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	b2db      	uxtb	r3, r3
	}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b094      	sub	sp, #80	@ 0x50
 80004fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000500:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000504:	2228      	movs	r2, #40	@ 0x28
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f003 f9b9 	bl	8003880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052a:	2301      	movs	r3, #1
 800052c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053c:	2302      	movs	r3, #2
 800053e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000540:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000544:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000546:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800054a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000550:	4618      	mov	r0, r3
 8000552:	f002 fb43 	bl	8002bdc <HAL_RCC_OscConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055c:	f000 f922 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	230f      	movs	r3, #15
 8000562:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000564:	2302      	movs	r3, #2
 8000566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800056c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000570:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2102      	movs	r1, #2
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fdaf 	bl	80030e0 <HAL_RCC_ClockConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000588:	f000 f90c 	bl	80007a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800058c:	2302      	movs	r3, #2
 800058e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000594:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f002 ff2f 	bl	80033fc <HAL_RCCEx_PeriphCLKConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005a4:	f000 f8fe 	bl	80007a4 <Error_Handler>
  }
}
 80005a8:	bf00      	nop
 80005aa:	3750      	adds	r7, #80	@ 0x50
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <MX_ADC1_Init+0x78>)
 80005c2:	4a1a      	ldr	r2, [pc, #104]	@ (800062c <MX_ADC1_Init+0x7c>)
 80005c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005c6:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <MX_ADC1_Init+0x78>)
 80005c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ce:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <MX_ADC1_Init+0x78>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <MX_ADC1_Init+0x78>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <MX_ADC1_Init+0x78>)
 80005dc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80005e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_ADC1_Init+0x78>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <MX_ADC1_Init+0x78>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ee:	480e      	ldr	r0, [pc, #56]	@ (8000628 <MX_ADC1_Init+0x78>)
 80005f0:	f000 fe7e 	bl	80012f0 <HAL_ADC_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80005fa:	f000 f8d3 	bl	80007a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000602:	2301      	movs	r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	@ (8000628 <MX_ADC1_Init+0x78>)
 8000610:	f001 f906 	bl	8001820 <HAL_ADC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800061a:	f000 f8c3 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000080 	.word	0x20000080
 800062c:	40012400 	.word	0x40012400

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	@ (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f001 fceb 	bl	8002048 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f894 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000b0 	.word	0x200000b0
 8000684:	40005400 	.word	0x40005400
 8000688:	00061a80 	.word	0x00061a80

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a23      	ldr	r2, [pc, #140]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0310 	and.w	r3, r3, #16
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0320 	and.w	r3, r3, #32
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006ee:	f043 0308 	orr.w	r3, r3, #8
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_GPIO_Init+0xa8>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000706:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_GPIO_Init+0xac>)
 8000708:	f001 fc86 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2302      	movs	r3, #2
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	4619      	mov	r1, r3
 8000724:	4804      	ldr	r0, [pc, #16]	@ (8000738 <MX_GPIO_Init+0xac>)
 8000726:	f001 faf3 	bl	8001d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072a:	bf00      	nop
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000
 8000738:	40011000 	.word	0x40011000

0800073c <SysTick_Handler>:

/* USER CODE BEGIN 4 */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 fdba 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  time_adc_conv++;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <SysTick_Handler+0x54>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a11      	ldr	r2, [pc, #68]	@ (8000790 <SysTick_Handler+0x54>)
 800074c:	6013      	str	r3, [r2, #0]
  time_oled++;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <SysTick_Handler+0x58>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	4a0f      	ldr	r2, [pc, #60]	@ (8000794 <SysTick_Handler+0x58>)
 8000756:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */

  if (time_adc_conv == 10){
 8000758:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <SysTick_Handler+0x54>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b0a      	cmp	r3, #10
 800075e:	d10a      	bne.n	8000776 <SysTick_Handler+0x3a>
	  adc_flag = 1;
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <SysTick_Handler+0x5c>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
	  debug_counter++;
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <SysTick_Handler+0x60>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	4a0b      	ldr	r2, [pc, #44]	@ (800079c <SysTick_Handler+0x60>)
 800076e:	6013      	str	r3, [r2, #0]
	  time_adc_conv = 0;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <SysTick_Handler+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
  }
  if (time_oled == 20){
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <SysTick_Handler+0x58>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b14      	cmp	r3, #20
 800077c:	d105      	bne.n	800078a <SysTick_Handler+0x4e>
  	  oled_flag = 1;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <SysTick_Handler+0x64>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
  	  time_oled = 0;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <SysTick_Handler+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
  }



}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000104 	.word	0x20000104
 8000794:	2000010c 	.word	0x2000010c
 8000798:	20000108 	.word	0x20000108
 800079c:	20000114 	.word	0x20000114
 80007a0:	20000110 	.word	0x20000110

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80007b6:	f000 fb6d 	bl	8000e94 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80007ba:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80007be:	2201      	movs	r2, #1
 80007c0:	2178      	movs	r1, #120	@ 0x78
 80007c2:	485b      	ldr	r0, [pc, #364]	@ (8000930 <SSD1306_Init+0x180>)
 80007c4:	f001 fe82 	bl	80024cc <HAL_I2C_IsDeviceReady>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e0a9      	b.n	8000926 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80007d2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80007d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007d8:	e002      	b.n	80007e0 <SSD1306_Init+0x30>
		p--;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3b01      	subs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f9      	bne.n	80007da <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80007e6:	22ae      	movs	r2, #174	@ 0xae
 80007e8:	2100      	movs	r1, #0
 80007ea:	2078      	movs	r0, #120	@ 0x78
 80007ec:	f000 fbcc 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80007f0:	2220      	movs	r2, #32
 80007f2:	2100      	movs	r1, #0
 80007f4:	2078      	movs	r0, #120	@ 0x78
 80007f6:	f000 fbc7 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80007fa:	2210      	movs	r2, #16
 80007fc:	2100      	movs	r1, #0
 80007fe:	2078      	movs	r0, #120	@ 0x78
 8000800:	f000 fbc2 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000804:	22b0      	movs	r2, #176	@ 0xb0
 8000806:	2100      	movs	r1, #0
 8000808:	2078      	movs	r0, #120	@ 0x78
 800080a:	f000 fbbd 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800080e:	22c8      	movs	r2, #200	@ 0xc8
 8000810:	2100      	movs	r1, #0
 8000812:	2078      	movs	r0, #120	@ 0x78
 8000814:	f000 fbb8 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2078      	movs	r0, #120	@ 0x78
 800081e:	f000 fbb3 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000822:	2210      	movs	r2, #16
 8000824:	2100      	movs	r1, #0
 8000826:	2078      	movs	r0, #120	@ 0x78
 8000828:	f000 fbae 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800082c:	2240      	movs	r2, #64	@ 0x40
 800082e:	2100      	movs	r1, #0
 8000830:	2078      	movs	r0, #120	@ 0x78
 8000832:	f000 fba9 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000836:	2281      	movs	r2, #129	@ 0x81
 8000838:	2100      	movs	r1, #0
 800083a:	2078      	movs	r0, #120	@ 0x78
 800083c:	f000 fba4 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000840:	22ff      	movs	r2, #255	@ 0xff
 8000842:	2100      	movs	r1, #0
 8000844:	2078      	movs	r0, #120	@ 0x78
 8000846:	f000 fb9f 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800084a:	22a1      	movs	r2, #161	@ 0xa1
 800084c:	2100      	movs	r1, #0
 800084e:	2078      	movs	r0, #120	@ 0x78
 8000850:	f000 fb9a 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000854:	22a6      	movs	r2, #166	@ 0xa6
 8000856:	2100      	movs	r1, #0
 8000858:	2078      	movs	r0, #120	@ 0x78
 800085a:	f000 fb95 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800085e:	22a8      	movs	r2, #168	@ 0xa8
 8000860:	2100      	movs	r1, #0
 8000862:	2078      	movs	r0, #120	@ 0x78
 8000864:	f000 fb90 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000868:	223f      	movs	r2, #63	@ 0x3f
 800086a:	2100      	movs	r1, #0
 800086c:	2078      	movs	r0, #120	@ 0x78
 800086e:	f000 fb8b 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000872:	22a4      	movs	r2, #164	@ 0xa4
 8000874:	2100      	movs	r1, #0
 8000876:	2078      	movs	r0, #120	@ 0x78
 8000878:	f000 fb86 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800087c:	22d3      	movs	r2, #211	@ 0xd3
 800087e:	2100      	movs	r1, #0
 8000880:	2078      	movs	r0, #120	@ 0x78
 8000882:	f000 fb81 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2078      	movs	r0, #120	@ 0x78
 800088c:	f000 fb7c 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000890:	22d5      	movs	r2, #213	@ 0xd5
 8000892:	2100      	movs	r1, #0
 8000894:	2078      	movs	r0, #120	@ 0x78
 8000896:	f000 fb77 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800089a:	22f0      	movs	r2, #240	@ 0xf0
 800089c:	2100      	movs	r1, #0
 800089e:	2078      	movs	r0, #120	@ 0x78
 80008a0:	f000 fb72 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80008a4:	22d9      	movs	r2, #217	@ 0xd9
 80008a6:	2100      	movs	r1, #0
 80008a8:	2078      	movs	r0, #120	@ 0x78
 80008aa:	f000 fb6d 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80008ae:	2222      	movs	r2, #34	@ 0x22
 80008b0:	2100      	movs	r1, #0
 80008b2:	2078      	movs	r0, #120	@ 0x78
 80008b4:	f000 fb68 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80008b8:	22da      	movs	r2, #218	@ 0xda
 80008ba:	2100      	movs	r1, #0
 80008bc:	2078      	movs	r0, #120	@ 0x78
 80008be:	f000 fb63 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80008c2:	2212      	movs	r2, #18
 80008c4:	2100      	movs	r1, #0
 80008c6:	2078      	movs	r0, #120	@ 0x78
 80008c8:	f000 fb5e 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80008cc:	22db      	movs	r2, #219	@ 0xdb
 80008ce:	2100      	movs	r1, #0
 80008d0:	2078      	movs	r0, #120	@ 0x78
 80008d2:	f000 fb59 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80008d6:	2220      	movs	r2, #32
 80008d8:	2100      	movs	r1, #0
 80008da:	2078      	movs	r0, #120	@ 0x78
 80008dc:	f000 fb54 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80008e0:	228d      	movs	r2, #141	@ 0x8d
 80008e2:	2100      	movs	r1, #0
 80008e4:	2078      	movs	r0, #120	@ 0x78
 80008e6:	f000 fb4f 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80008ea:	2214      	movs	r2, #20
 80008ec:	2100      	movs	r1, #0
 80008ee:	2078      	movs	r0, #120	@ 0x78
 80008f0:	f000 fb4a 	bl	8000f88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80008f4:	22af      	movs	r2, #175	@ 0xaf
 80008f6:	2100      	movs	r1, #0
 80008f8:	2078      	movs	r0, #120	@ 0x78
 80008fa:	f000 fb45 	bl	8000f88 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80008fe:	222e      	movs	r2, #46	@ 0x2e
 8000900:	2100      	movs	r1, #0
 8000902:	2078      	movs	r0, #120	@ 0x78
 8000904:	f000 fb40 	bl	8000f88 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000908:	2000      	movs	r0, #0
 800090a:	f000 f843 	bl	8000994 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800090e:	f000 f813 	bl	8000938 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <SSD1306_Init+0x184>)
 8000914:	2200      	movs	r2, #0
 8000916:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <SSD1306_Init+0x184>)
 800091a:	2200      	movs	r2, #0
 800091c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <SSD1306_Init+0x184>)
 8000920:	2201      	movs	r2, #1
 8000922:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000924:	2301      	movs	r3, #1
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000b0 	.word	0x200000b0
 8000934:	20000528 	.word	0x20000528

08000938 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800093e:	2300      	movs	r3, #0
 8000940:	71fb      	strb	r3, [r7, #7]
 8000942:	e01d      	b.n	8000980 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	3b50      	subs	r3, #80	@ 0x50
 8000948:	b2db      	uxtb	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	2100      	movs	r1, #0
 800094e:	2078      	movs	r0, #120	@ 0x78
 8000950:	f000 fb1a 	bl	8000f88 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2078      	movs	r0, #120	@ 0x78
 800095a:	f000 fb15 	bl	8000f88 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800095e:	2210      	movs	r2, #16
 8000960:	2100      	movs	r1, #0
 8000962:	2078      	movs	r0, #120	@ 0x78
 8000964:	f000 fb10 	bl	8000f88 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	01db      	lsls	r3, r3, #7
 800096c:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <SSD1306_UpdateScreen+0x58>)
 800096e:	441a      	add	r2, r3
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	2140      	movs	r1, #64	@ 0x40
 8000974:	2078      	movs	r0, #120	@ 0x78
 8000976:	f000 faa1 	bl	8000ebc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	3301      	adds	r3, #1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b07      	cmp	r3, #7
 8000984:	d9de      	bls.n	8000944 <SSD1306_UpdateScreen+0xc>
	}
}
 8000986:	bf00      	nop
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000128 	.word	0x20000128

08000994 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <SSD1306_Fill+0x14>
 80009a4:	2300      	movs	r3, #0
 80009a6:	e000      	b.n	80009aa <SSD1306_Fill+0x16>
 80009a8:	23ff      	movs	r3, #255	@ 0xff
 80009aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009ae:	4619      	mov	r1, r3
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <SSD1306_Fill+0x2c>)
 80009b2:	f002 ff65 	bl	8003880 <memset>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000128 	.word	0x20000128

080009c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	460b      	mov	r3, r1
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	4613      	mov	r3, r2
 80009d4:	70fb      	strb	r3, [r7, #3]
	if (
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80009da:	d848      	bhi.n	8000a6e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80009dc:	88bb      	ldrh	r3, [r7, #4]
 80009de:	2b3f      	cmp	r3, #63	@ 0x3f
 80009e0:	d845      	bhi.n	8000a6e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80009e2:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <SSD1306_DrawPixel+0xb4>)
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d11a      	bne.n	8000a34 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009fe:	88fa      	ldrh	r2, [r7, #6]
 8000a00:	88bb      	ldrh	r3, [r7, #4]
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	b298      	uxth	r0, r3
 8000a06:	4603      	mov	r3, r0
 8000a08:	01db      	lsls	r3, r3, #7
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <SSD1306_DrawPixel+0xb8>)
 8000a0e:	5cd3      	ldrb	r3, [r2, r3]
 8000a10:	b25a      	sxtb	r2, r3
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b259      	sxtb	r1, r3
 8000a24:	88fa      	ldrh	r2, [r7, #6]
 8000a26:	4603      	mov	r3, r0
 8000a28:	01db      	lsls	r3, r3, #7
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b2c9      	uxtb	r1, r1
 8000a2e:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <SSD1306_DrawPixel+0xb8>)
 8000a30:	54d1      	strb	r1, [r2, r3]
 8000a32:	e01d      	b.n	8000a70 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a34:	88fa      	ldrh	r2, [r7, #6]
 8000a36:	88bb      	ldrh	r3, [r7, #4]
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	b298      	uxth	r0, r3
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	01db      	lsls	r3, r3, #7
 8000a40:	4413      	add	r3, r2
 8000a42:	4a0e      	ldr	r2, [pc, #56]	@ (8000a7c <SSD1306_DrawPixel+0xb8>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	b25a      	sxtb	r2, r3
 8000a48:	88bb      	ldrh	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	2101      	movs	r1, #1
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	b259      	sxtb	r1, r3
 8000a5e:	88fa      	ldrh	r2, [r7, #6]
 8000a60:	4603      	mov	r3, r0
 8000a62:	01db      	lsls	r3, r3, #7
 8000a64:	4413      	add	r3, r2
 8000a66:	b2c9      	uxtb	r1, r1
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <SSD1306_DrawPixel+0xb8>)
 8000a6a:	54d1      	strb	r1, [r2, r3]
 8000a6c:	e000      	b.n	8000a70 <SSD1306_DrawPixel+0xac>
		return;
 8000a6e:	bf00      	nop
	}
}
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000528 	.word	0x20000528
 8000a7c:	20000128 	.word	0x20000128

08000a80 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	80fb      	strh	r3, [r7, #6]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000a90:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <SSD1306_GotoXY+0x28>)
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000a96:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <SSD1306_GotoXY+0x28>)
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	8053      	strh	r3, [r2, #2]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000528 	.word	0x20000528

08000aac <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000abc:	4b39      	ldr	r3, [pc, #228]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
	if (
 8000ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aca:	dc07      	bgt.n	8000adc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000acc:	4b35      	ldr	r3, [pc, #212]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000ace:	885b      	ldrh	r3, [r3, #2]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	785b      	ldrb	r3, [r3, #1]
 8000ad6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ad8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ada:	dd01      	ble.n	8000ae0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e05d      	b.n	8000b9c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e04b      	b.n	8000b7e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	3b20      	subs	r3, #32
 8000aee:	6839      	ldr	r1, [r7, #0]
 8000af0:	7849      	ldrb	r1, [r1, #1]
 8000af2:	fb01 f303 	mul.w	r3, r1, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	440b      	add	r3, r1
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	e030      	b.n	8000b6c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d010      	beq.n	8000b3c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b1c:	881a      	ldrh	r2, [r3, #0]
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4413      	add	r3, r2
 8000b24:	b298      	uxth	r0, r3
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b28:	885a      	ldrh	r2, [r3, #2]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	79ba      	ldrb	r2, [r7, #6]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f7ff ff45 	bl	80009c4 <SSD1306_DrawPixel>
 8000b3a:	e014      	b.n	8000b66 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b3e:	881a      	ldrh	r2, [r3, #0]
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	b298      	uxth	r0, r3
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b4a:	885a      	ldrh	r2, [r3, #2]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	b299      	uxth	r1, r3
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf0c      	ite	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	2300      	movne	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	f7ff ff2f 	bl	80009c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d3c8      	bcc.n	8000b0a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	785b      	ldrb	r3, [r3, #1]
 8000b82:	461a      	mov	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d3ad      	bcc.n	8000ae6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b98:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000528 	.word	0x20000528

08000ba8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000bb6:	e012      	b.n	8000bde <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	68b9      	ldr	r1, [r7, #8]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff73 	bl	8000aac <SSD1306_Putc>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d002      	beq.n	8000bd8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	e008      	b.n	8000bea <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1e8      	bne.n	8000bb8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	781b      	ldrb	r3, [r3, #0]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000bf2:	b590      	push	{r4, r7, lr}
 8000bf4:	b087      	sub	sp, #28
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4623      	mov	r3, r4
 8000c02:	80fb      	strh	r3, [r7, #6]
 8000c04:	4603      	mov	r3, r0
 8000c06:	80bb      	strh	r3, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c14:	d901      	bls.n	8000c1a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000c16:	237f      	movs	r3, #127	@ 0x7f
 8000c18:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c1e:	d901      	bls.n	8000c24 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000c20:	237f      	movs	r3, #127	@ 0x7f
 8000c22:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c28:	d901      	bls.n	8000c2e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000c2a:	233f      	movs	r3, #63	@ 0x3f
 8000c2c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000c2e:	883b      	ldrh	r3, [r7, #0]
 8000c30:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c32:	d901      	bls.n	8000c38 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000c34:	233f      	movs	r3, #63	@ 0x3f
 8000c36:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d205      	bcs.n	8000c4c <SSD1306_DrawLine+0x5a>
 8000c40:	887a      	ldrh	r2, [r7, #2]
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	e004      	b.n	8000c56 <SSD1306_DrawLine+0x64>
 8000c4c:	88fa      	ldrh	r2, [r7, #6]
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000c58:	88ba      	ldrh	r2, [r7, #4]
 8000c5a:	883b      	ldrh	r3, [r7, #0]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d205      	bcs.n	8000c6c <SSD1306_DrawLine+0x7a>
 8000c60:	883a      	ldrh	r2, [r7, #0]
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	e004      	b.n	8000c76 <SSD1306_DrawLine+0x84>
 8000c6c:	88ba      	ldrh	r2, [r7, #4]
 8000c6e:	883b      	ldrh	r3, [r7, #0]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8000c78:	88fa      	ldrh	r2, [r7, #6]
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d201      	bcs.n	8000c84 <SSD1306_DrawLine+0x92>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e001      	b.n	8000c88 <SSD1306_DrawLine+0x96>
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8000c8a:	88ba      	ldrh	r2, [r7, #4]
 8000c8c:	883b      	ldrh	r3, [r7, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d201      	bcs.n	8000c96 <SSD1306_DrawLine+0xa4>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e001      	b.n	8000c9a <SSD1306_DrawLine+0xa8>
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000c9c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000ca0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dd06      	ble.n	8000cb6 <SSD1306_DrawLine+0xc4>
 8000ca8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cac:	0fda      	lsrs	r2, r3, #31
 8000cae:	4413      	add	r3, r2
 8000cb0:	105b      	asrs	r3, r3, #1
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	e006      	b.n	8000cc4 <SSD1306_DrawLine+0xd2>
 8000cb6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cba:	0fda      	lsrs	r2, r3, #31
 8000cbc:	4413      	add	r3, r2
 8000cbe:	105b      	asrs	r3, r3, #1
 8000cc0:	425b      	negs	r3, r3
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000cc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d129      	bne.n	8000d22 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000cce:	883a      	ldrh	r2, [r7, #0]
 8000cd0:	88bb      	ldrh	r3, [r7, #4]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d205      	bcs.n	8000ce2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000cd6:	883b      	ldrh	r3, [r7, #0]
 8000cd8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000cde:	893b      	ldrh	r3, [r7, #8]
 8000ce0:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d205      	bcs.n	8000cf6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000cf2:	893b      	ldrh	r3, [r7, #8]
 8000cf4:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000cf6:	88bb      	ldrh	r3, [r7, #4]
 8000cf8:	82bb      	strh	r3, [r7, #20]
 8000cfa:	e00c      	b.n	8000d16 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000cfc:	8ab9      	ldrh	r1, [r7, #20]
 8000cfe:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fe5d 	bl	80009c4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000d0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3301      	adds	r3, #1
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	82bb      	strh	r3, [r7, #20]
 8000d16:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000d1a:	883b      	ldrh	r3, [r7, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dded      	ble.n	8000cfc <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8000d20:	e05f      	b.n	8000de2 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8000d22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d129      	bne.n	8000d7e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000d2a:	883a      	ldrh	r2, [r7, #0]
 8000d2c:	88bb      	ldrh	r3, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d205      	bcs.n	8000d3e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000d32:	883b      	ldrh	r3, [r7, #0]
 8000d34:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000d3a:	893b      	ldrh	r3, [r7, #8]
 8000d3c:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d205      	bcs.n	8000d52 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000d4e:	893b      	ldrh	r3, [r7, #8]
 8000d50:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	82bb      	strh	r3, [r7, #20]
 8000d56:	e00c      	b.n	8000d72 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000d58:	8abb      	ldrh	r3, [r7, #20]
 8000d5a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000d5e:	88b9      	ldrh	r1, [r7, #4]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fe2f 	bl	80009c4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000d66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	82bb      	strh	r3, [r7, #20]
 8000d72:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dded      	ble.n	8000d58 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8000d7c:	e031      	b.n	8000de2 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000d7e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000d82:	88b9      	ldrh	r1, [r7, #4]
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe1c 	bl	80009c4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d103      	bne.n	8000d9c <SSD1306_DrawLine+0x1aa>
 8000d94:	88ba      	ldrh	r2, [r7, #4]
 8000d96:	883b      	ldrh	r3, [r7, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d021      	beq.n	8000de0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8000d9c:	8afb      	ldrh	r3, [r7, #22]
 8000d9e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000da0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000da4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000da8:	425b      	negs	r3, r3
 8000daa:	429a      	cmp	r2, r3
 8000dac:	dd08      	ble.n	8000dc0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000dae:	8afa      	ldrh	r2, [r7, #22]
 8000db0:	8a3b      	ldrh	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000db8:	89fa      	ldrh	r2, [r7, #14]
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8000dc0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000dc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dad8      	bge.n	8000d7e <SSD1306_DrawLine+0x18c>
			err += dx;
 8000dcc:	8afa      	ldrh	r2, [r7, #22]
 8000dce:	8a7b      	ldrh	r3, [r7, #18]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000dd6:	89ba      	ldrh	r2, [r7, #12]
 8000dd8:	88bb      	ldrh	r3, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000dde:	e7ce      	b.n	8000d7e <SSD1306_DrawLine+0x18c>
			break;
 8000de0:	bf00      	nop
		}
	}
}
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd90      	pop	{r4, r7, pc}

08000de8 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	4604      	mov	r4, r0
 8000df0:	4608      	mov	r0, r1
 8000df2:	4611      	mov	r1, r2
 8000df4:	461a      	mov	r2, r3
 8000df6:	4623      	mov	r3, r4
 8000df8:	80fb      	strh	r3, [r7, #6]
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80bb      	strh	r3, [r7, #4]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	807b      	strh	r3, [r7, #2]
 8000e02:	4613      	mov	r3, r2
 8000e04:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e0a:	d836      	bhi.n	8000e7a <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8000e0c:	88bb      	ldrh	r3, [r7, #4]
 8000e0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e10:	d833      	bhi.n	8000e7a <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	4413      	add	r3, r2
 8000e18:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e1a:	dd03      	ble.n	8000e24 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000e22:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000e24:	88ba      	ldrh	r2, [r7, #4]
 8000e26:	883b      	ldrh	r3, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e2c:	dd03      	ble.n	8000e36 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000e34:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e018      	b.n	8000e6e <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	b299      	uxth	r1, r3
 8000e46:	88fa      	ldrh	r2, [r7, #6]
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b29c      	uxth	r4, r3
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	88f8      	ldrh	r0, [r7, #6]
 8000e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	4613      	mov	r3, r2
 8000e62:	4622      	mov	r2, r4
 8000e64:	f7ff fec5 	bl	8000bf2 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d2e1      	bcs.n	8000e3c <SSD1306_DrawFilledRectangle+0x54>
 8000e78:	e000      	b.n	8000e7c <SSD1306_DrawFilledRectangle+0x94>
		return;
 8000e7a:	bf00      	nop
	}
}
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd90      	pop	{r4, r7, pc}

08000e82 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff fd84 	bl	8000994 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000e8c:	f7ff fd54 	bl	8000938 <SSD1306_UpdateScreen>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <ssd1306_I2C_Init+0x24>)
 8000e9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e9e:	e002      	b.n	8000ea6 <ssd1306_I2C_Init+0x12>
		p--;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f9      	bne.n	8000ea0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	0003d090 	.word	0x0003d090

08000ebc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b0c7      	sub	sp, #284	@ 0x11c
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000eca:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000ece:	600a      	str	r2, [r1, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ed6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000eda:	4622      	mov	r2, r4
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ee2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000eee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ef6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000efe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f02:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000f10:	e015      	b.n	8000f3e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000f12:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f16:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f1a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	441a      	add	r2, r3
 8000f22:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f26:	3301      	adds	r3, #1
 8000f28:	7811      	ldrb	r1, [r2, #0]
 8000f2a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f2e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000f32:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f34:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000f3e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f48:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000f4c:	8812      	ldrh	r2, [r2, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d8df      	bhi.n	8000f12 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f56:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b299      	uxth	r1, r3
 8000f5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	f107 020c 	add.w	r2, r7, #12
 8000f70:	200a      	movs	r0, #10
 8000f72:	9000      	str	r0, [sp, #0]
 8000f74:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <ssd1306_I2C_WriteMulti+0xc8>)
 8000f76:	f001 f9ab 	bl	80022d0 <HAL_I2C_Master_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd90      	pop	{r4, r7, pc}
 8000f84:	200000b0 	.word	0x200000b0

08000f88 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	460b      	mov	r3, r1
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	4613      	mov	r3, r2
 8000f98:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f9e:	797b      	ldrb	r3, [r7, #5]
 8000fa0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	230a      	movs	r3, #10
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <ssd1306_I2C_Write+0x38>)
 8000fb2:	f001 f98d 	bl	80022d0 <HAL_I2C_Master_Transmit>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200000b0 	.word	0x200000b0

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <HAL_MspInit+0x5c>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <HAL_MspInit+0x5c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_MspInit+0x5c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <HAL_MspInit+0x5c>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <HAL_MspInit+0x5c>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <HAL_MspInit+0x5c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_MspInit+0x60>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_MspInit+0x60>)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000

08001028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <HAL_ADC_MspInit+0x6c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d121      	bne.n	800108c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <HAL_ADC_MspInit+0x70>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <HAL_ADC_MspInit+0x70>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <HAL_ADC_MspInit+0x70>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <HAL_ADC_MspInit+0x70>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a0c      	ldr	r2, [pc, #48]	@ (8001098 <HAL_ADC_MspInit+0x70>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_ADC_MspInit+0x70>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107c:	2303      	movs	r3, #3
 800107e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4619      	mov	r1, r3
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_ADC_MspInit+0x74>)
 8001088:	f000 fe42 	bl	8001d10 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40012400 	.word	0x40012400
 8001098:	40021000 	.word	0x40021000
 800109c:	40010800 	.word	0x40010800

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a15      	ldr	r2, [pc, #84]	@ (8001110 <HAL_I2C_MspInit+0x70>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d123      	bne.n	8001108 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_I2C_MspInit+0x74>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <HAL_I2C_MspInit+0x74>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_I2C_MspInit+0x74>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d8:	23c0      	movs	r3, #192	@ 0xc0
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010dc:	2312      	movs	r3, #18
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	480b      	ldr	r0, [pc, #44]	@ (8001118 <HAL_I2C_MspInit+0x78>)
 80010ec:	f000 fe10 	bl	8001d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_I2C_MspInit+0x74>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <HAL_I2C_MspInit+0x74>)
 80010f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010fa:	61d3      	str	r3, [r2, #28]
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_I2C_MspInit+0x74>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000
 8001118:	40010c00 	.word	0x40010c00

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <NMI_Handler+0x4>

08001124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <MemManage_Handler+0x4>

08001134 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <UsageFault_Handler+0x4>

08001144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <_sbrk>:
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	4a14      	ldr	r2, [pc, #80]	@ (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	@ (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
 8001198:	f002 fb8a 	bl	80038b0 <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	@ (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20005000 	.word	0x20005000
 80011c8:	00000400 	.word	0x00000400
 80011cc:	20000530 	.word	0x20000530
 80011d0:	20000680 	.word	0x20000680

080011d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <Reset_Handler>:
 80011e0:	f7ff fff8 	bl	80011d4 <SystemInit>
 80011e4:	480b      	ldr	r0, [pc, #44]	@ (8001214 <LoopFillZerobss+0xe>)
 80011e6:	490c      	ldr	r1, [pc, #48]	@ (8001218 <LoopFillZerobss+0x12>)
 80011e8:	4a0c      	ldr	r2, [pc, #48]	@ (800121c <LoopFillZerobss+0x16>)
 80011ea:	2300      	movs	r3, #0
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:
 80011ee:	58d4      	ldr	r4, [r2, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:
 80011f4:	18c4      	adds	r4, r0, r3
 80011f6:	428c      	cmp	r4, r1
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
 80011fa:	4a09      	ldr	r2, [pc, #36]	@ (8001220 <LoopFillZerobss+0x1a>)
 80011fc:	4c09      	ldr	r4, [pc, #36]	@ (8001224 <LoopFillZerobss+0x1e>)
 80011fe:	2300      	movs	r3, #0
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:
 8001206:	42a2      	cmp	r2, r4
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>
 800120a:	f002 fb57 	bl	80038bc <__libc_init_array>
 800120e:	f7ff f8c7 	bl	80003a0 <main>
 8001212:	4770      	bx	lr
 8001214:	20000000 	.word	0x20000000
 8001218:	20000064 	.word	0x20000064
 800121c:	08004e38 	.word	0x08004e38
 8001220:	20000064 	.word	0x20000064
 8001224:	20000680 	.word	0x20000680

08001228 <ADC1_2_IRQHandler>:
 8001228:	e7fe      	b.n	8001228 <ADC1_2_IRQHandler>
	...

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <HAL_Init+0x28>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <HAL_Init+0x28>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123c:	2003      	movs	r0, #3
 800123e:	f000 fd33 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001242:	200f      	movs	r0, #15
 8001244:	f000 f808 	bl	8001258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001248:	f7ff febc 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40022000 	.word	0x40022000

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_InitTick+0x54>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_InitTick+0x58>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fd3d 	bl	8001cf6 <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00e      	b.n	80012a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d80a      	bhi.n	80012a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f000 fd13 	bl	8001cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001298:	4a06      	ldr	r2, [pc, #24]	@ (80012b4 <HAL_InitTick+0x5c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000010 	.word	0x20000010
 80012b4:	2000000c 	.word	0x2000000c

080012b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_IncTick+0x1c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <HAL_IncTick+0x20>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a03      	ldr	r2, [pc, #12]	@ (80012d8 <HAL_IncTick+0x20>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000010 	.word	0x20000010
 80012d8:	20000534 	.word	0x20000534

080012dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b02      	ldr	r3, [pc, #8]	@ (80012ec <HAL_GetTick+0x10>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000534 	.word	0x20000534

080012f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0be      	b.n	8001490 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131c:	2b00      	cmp	r3, #0
 800131e:	d109      	bne.n	8001334 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fe7a 	bl	8001028 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fbc5 	bl	8001ac4 <ADC_ConversionStop_Disable>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 8099 	bne.w	800147e <HAL_ADC_Init+0x18e>
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 8095 	bne.w	800147e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001358:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800135c:	f023 0302 	bic.w	r3, r3, #2
 8001360:	f043 0202 	orr.w	r2, r3, #2
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001370:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7b1b      	ldrb	r3, [r3, #12]
 8001376:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001378:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	4313      	orrs	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001388:	d003      	beq.n	8001392 <HAL_ADC_Init+0xa2>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d102      	bne.n	8001398 <HAL_ADC_Init+0xa8>
 8001392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001396:	e000      	b.n	800139a <HAL_ADC_Init+0xaa>
 8001398:	2300      	movs	r3, #0
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7d1b      	ldrb	r3, [r3, #20]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d119      	bne.n	80013dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7b1b      	ldrb	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	035a      	lsls	r2, r3, #13
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	e00b      	b.n	80013dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f043 0220 	orr.w	r2, r3, #32
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d4:	f043 0201 	orr.w	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <HAL_ADC_Init+0x1a8>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	430b      	orrs	r3, r1
 8001402:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800140c:	d003      	beq.n	8001416 <HAL_ADC_Init+0x126>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d104      	bne.n	8001420 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	3b01      	subs	r3, #1
 800141c:	051b      	lsls	r3, r3, #20
 800141e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001426:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	430a      	orrs	r2, r1
 8001432:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <HAL_ADC_Init+0x1ac>)
 800143c:	4013      	ands	r3, r2
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	429a      	cmp	r2, r3
 8001442:	d10b      	bne.n	800145c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	f043 0201 	orr.w	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800145a:	e018      	b.n	800148e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	f023 0312 	bic.w	r3, r3, #18
 8001464:	f043 0210 	orr.w	r2, r3, #16
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001470:	f043 0201 	orr.w	r2, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800147c:	e007      	b.n	800148e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001482:	f043 0210 	orr.w	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800148e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	ffe1f7fd 	.word	0xffe1f7fd
 800149c:	ff1f0efe 	.word	0xff1f0efe

080014a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_Start+0x1a>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e098      	b.n	80015ec <HAL_ADC_Start+0x14c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 faa4 	bl	8001a10 <ADC_Enable>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 8087 	bne.w	80015e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a41      	ldr	r2, [pc, #260]	@ (80015f4 <HAL_ADC_Start+0x154>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d105      	bne.n	80014fe <HAL_ADC_Start+0x5e>
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <HAL_ADC_Start+0x158>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001502:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d026      	beq.n	8001566 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001520:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001528:	e01d      	b.n	8001566 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a2f      	ldr	r2, [pc, #188]	@ (80015f8 <HAL_ADC_Start+0x158>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d004      	beq.n	800154a <HAL_ADC_Start+0xaa>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a2b      	ldr	r2, [pc, #172]	@ (80015f4 <HAL_ADC_Start+0x154>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10d      	bne.n	8001566 <HAL_ADC_Start+0xc6>
 800154a:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <HAL_ADC_Start+0x158>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800155e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001576:	f023 0206 	bic.w	r2, r3, #6
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800157e:	e002      	b.n	8001586 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f06f 0202 	mvn.w	r2, #2
 8001596:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015a6:	d113      	bne.n	80015d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015ac:	4a11      	ldr	r2, [pc, #68]	@ (80015f4 <HAL_ADC_Start+0x154>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d105      	bne.n	80015be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <HAL_ADC_Start+0x158>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d108      	bne.n	80015d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	e00c      	b.n	80015ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	e003      	b.n	80015ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40012800 	.word	0x40012800
 80015f8:	40012400 	.word	0x40012400

080015fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001612:	f7ff fe63 	bl	80012dc <HAL_GetTick>
 8001616:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	f043 0220 	orr.w	r2, r3, #32
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0d3      	b.n	80017e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d131      	bne.n	80016b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001652:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001656:	2b00      	cmp	r3, #0
 8001658:	d12a      	bne.n	80016b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800165a:	e021      	b.n	80016a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001662:	d01d      	beq.n	80016a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_ADC_PollForConversion+0x7e>
 800166a:	f7ff fe37 	bl	80012dc <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d212      	bcs.n	80016a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10b      	bne.n	80016a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168c:	f043 0204 	orr.w	r2, r3, #4
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0a2      	b.n	80017e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0d6      	beq.n	800165c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016ae:	e070      	b.n	8001792 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016b0:	4b4f      	ldr	r3, [pc, #316]	@ (80017f0 <HAL_ADC_PollForConversion+0x1f4>)
 80016b2:	681c      	ldr	r4, [r3, #0]
 80016b4:	2002      	movs	r0, #2
 80016b6:	f001 ff57 	bl	8003568 <HAL_RCCEx_GetPeriphCLKFreq>
 80016ba:	4603      	mov	r3, r0
 80016bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6919      	ldr	r1, [r3, #16]
 80016c6:	4b4b      	ldr	r3, [pc, #300]	@ (80017f4 <HAL_ADC_PollForConversion+0x1f8>)
 80016c8:	400b      	ands	r3, r1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_ADC_PollForConversion+0x104>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68d9      	ldr	r1, [r3, #12]
 80016d4:	4b48      	ldr	r3, [pc, #288]	@ (80017f8 <HAL_ADC_PollForConversion+0x1fc>)
 80016d6:	400b      	ands	r3, r1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <HAL_ADC_PollForConversion+0x104>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6919      	ldr	r1, [r3, #16]
 80016e2:	4b46      	ldr	r3, [pc, #280]	@ (80017fc <HAL_ADC_PollForConversion+0x200>)
 80016e4:	400b      	ands	r3, r1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d108      	bne.n	80016fc <HAL_ADC_PollForConversion+0x100>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68d9      	ldr	r1, [r3, #12]
 80016f0:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <HAL_ADC_PollForConversion+0x204>)
 80016f2:	400b      	ands	r3, r1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_PollForConversion+0x100>
 80016f8:	2314      	movs	r3, #20
 80016fa:	e020      	b.n	800173e <HAL_ADC_PollForConversion+0x142>
 80016fc:	2329      	movs	r3, #41	@ 0x29
 80016fe:	e01e      	b.n	800173e <HAL_ADC_PollForConversion+0x142>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6919      	ldr	r1, [r3, #16]
 8001706:	4b3d      	ldr	r3, [pc, #244]	@ (80017fc <HAL_ADC_PollForConversion+0x200>)
 8001708:	400b      	ands	r3, r1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_ADC_PollForConversion+0x120>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68d9      	ldr	r1, [r3, #12]
 8001714:	4b3a      	ldr	r3, [pc, #232]	@ (8001800 <HAL_ADC_PollForConversion+0x204>)
 8001716:	400b      	ands	r3, r1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00d      	beq.n	8001738 <HAL_ADC_PollForConversion+0x13c>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6919      	ldr	r1, [r3, #16]
 8001722:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <HAL_ADC_PollForConversion+0x208>)
 8001724:	400b      	ands	r3, r1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d108      	bne.n	800173c <HAL_ADC_PollForConversion+0x140>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68d9      	ldr	r1, [r3, #12]
 8001730:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <HAL_ADC_PollForConversion+0x208>)
 8001732:	400b      	ands	r3, r1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_ADC_PollForConversion+0x140>
 8001738:	2354      	movs	r3, #84	@ 0x54
 800173a:	e000      	b.n	800173e <HAL_ADC_PollForConversion+0x142>
 800173c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001744:	e021      	b.n	800178a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d01a      	beq.n	8001784 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d007      	beq.n	8001764 <HAL_ADC_PollForConversion+0x168>
 8001754:	f7ff fdc2 	bl	80012dc <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d20f      	bcs.n	8001784 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d90b      	bls.n	8001784 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	f043 0204 	orr.w	r2, r3, #4
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e030      	b.n	80017e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	429a      	cmp	r2, r3
 8001790:	d8d9      	bhi.n	8001746 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f06f 0212 	mvn.w	r2, #18
 800179a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017b6:	d115      	bne.n	80017e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	24924924 	.word	0x24924924
 80017f8:	00924924 	.word	0x00924924
 80017fc:	12492492 	.word	0x12492492
 8001800:	00492492 	.word	0x00492492
 8001804:	00249249 	.word	0x00249249

08001808 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x20>
 800183c:	2302      	movs	r3, #2
 800183e:	e0dc      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1da>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b06      	cmp	r3, #6
 800184e:	d81c      	bhi.n	800188a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	3b05      	subs	r3, #5
 8001862:	221f      	movs	r2, #31
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	4019      	ands	r1, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	3b05      	subs	r3, #5
 800187c:	fa00 f203 	lsl.w	r2, r0, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34
 8001888:	e03c      	b.n	8001904 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d81c      	bhi.n	80018cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3b23      	subs	r3, #35	@ 0x23
 80018a4:	221f      	movs	r2, #31
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	4019      	ands	r1, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3b23      	subs	r3, #35	@ 0x23
 80018be:	fa00 f203 	lsl.w	r2, r0, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80018ca:	e01b      	b.n	8001904 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	3b41      	subs	r3, #65	@ 0x41
 80018de:	221f      	movs	r2, #31
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4019      	ands	r1, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	3b41      	subs	r3, #65	@ 0x41
 80018f8:	fa00 f203 	lsl.w	r2, r0, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b09      	cmp	r3, #9
 800190a:	d91c      	bls.n	8001946 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68d9      	ldr	r1, [r3, #12]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	3b1e      	subs	r3, #30
 800191e:	2207      	movs	r2, #7
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	4019      	ands	r1, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6898      	ldr	r0, [r3, #8]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	3b1e      	subs	r3, #30
 8001938:	fa00 f203 	lsl.w	r2, r0, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	e019      	b.n	800197a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6919      	ldr	r1, [r3, #16]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	2207      	movs	r2, #7
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	4019      	ands	r1, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6898      	ldr	r0, [r3, #8]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b10      	cmp	r3, #16
 8001980:	d003      	beq.n	800198a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001986:	2b11      	cmp	r3, #17
 8001988:	d132      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1d      	ldr	r2, [pc, #116]	@ (8001a04 <HAL_ADC_ConfigChannel+0x1e4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d125      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d126      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80019b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d11a      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ba:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <HAL_ADC_ConfigChannel+0x1e8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a13      	ldr	r2, [pc, #76]	@ (8001a0c <HAL_ADC_ConfigChannel+0x1ec>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	0c9a      	lsrs	r2, r3, #18
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019d0:	e002      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f9      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x1b2>
 80019de:	e007      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	f043 0220 	orr.w	r2, r3, #32
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	40012400 	.word	0x40012400
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	431bde83 	.word	0x431bde83

08001a10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d040      	beq.n	8001ab0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <ADC_Enable+0xac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac0 <ADC_Enable+0xb0>)
 8001a44:	fba2 2303 	umull	r2, r3, r2, r3
 8001a48:	0c9b      	lsrs	r3, r3, #18
 8001a4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a4c:	e002      	b.n	8001a54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f9      	bne.n	8001a4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a5a:	f7ff fc3f 	bl	80012dc <HAL_GetTick>
 8001a5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a60:	e01f      	b.n	8001aa2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a62:	f7ff fc3b 	bl	80012dc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d918      	bls.n	8001aa2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d011      	beq.n	8001aa2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	f043 0210 	orr.w	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	f043 0201 	orr.w	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e007      	b.n	8001ab2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d1d8      	bne.n	8001a62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d12e      	bne.n	8001b3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aee:	f7ff fbf5 	bl	80012dc <HAL_GetTick>
 8001af2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001af4:	e01b      	b.n	8001b2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001af6:	f7ff fbf1 	bl	80012dc <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d914      	bls.n	8001b2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10d      	bne.n	8001b2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e007      	b.n	8001b3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d0dc      	beq.n	8001af6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	@ 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f7ff ff90 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff49 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff5e 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff90 	bl	8001c00 <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5f 	bl	8001bac <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffb0 	bl	8001c64 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	@ 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e169      	b.n	8001ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d24:	2201      	movs	r2, #1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8158 	bne.w	8001ff2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a9a      	ldr	r2, [pc, #616]	@ (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d4c:	4a98      	ldr	r2, [pc, #608]	@ (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d875      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d52:	4a98      	ldr	r2, [pc, #608]	@ (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d58:	4a96      	ldr	r2, [pc, #600]	@ (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d86f      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d5e:	4a96      	ldr	r2, [pc, #600]	@ (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d052      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d64:	4a94      	ldr	r2, [pc, #592]	@ (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d869      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d6a:	4a94      	ldr	r2, [pc, #592]	@ (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04c      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d70:	4a92      	ldr	r2, [pc, #584]	@ (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d863      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d76:	4a92      	ldr	r2, [pc, #584]	@ (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d046      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a90      	ldr	r2, [pc, #576]	@ (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d85d      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d82a      	bhi.n	8001ddc <HAL_GPIO_Init+0xcc>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d859      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <HAL_GPIO_Init+0x80>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001df7 	.word	0x08001df7
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e3f 	.word	0x08001e3f
 8001da4:	08001e3f 	.word	0x08001e3f
 8001da8:	08001e3f 	.word	0x08001e3f
 8001dac:	08001e3f 	.word	0x08001e3f
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e3f 	.word	0x08001e3f
 8001db8:	08001e3f 	.word	0x08001e3f
 8001dbc:	08001e3f 	.word	0x08001e3f
 8001dc0:	08001e3f 	.word	0x08001e3f
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e3f 	.word	0x08001e3f
 8001dd0:	08001e3f 	.word	0x08001e3f
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	4a79      	ldr	r2, [pc, #484]	@ (8001fc4 <HAL_GPIO_Init+0x2b4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de2:	e02c      	b.n	8001e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e029      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e024      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e01f      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	330c      	adds	r3, #12
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e01a      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e12:	2304      	movs	r3, #4
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e013      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	611a      	str	r2, [r3, #16]
          break;
 8001e2a:	e009      	b.n	8001e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	615a      	str	r2, [r3, #20]
          break;
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          break;
 8001e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	@ 0xff
 8001e44:	d801      	bhi.n	8001e4a <HAL_GPIO_Init+0x13a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x13e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2bff      	cmp	r3, #255	@ 0xff
 8001e54:	d802      	bhi.n	8001e5c <HAL_GPIO_Init+0x14c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x152>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	3b08      	subs	r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	210f      	movs	r1, #15
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80b1 	beq.w	8001ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea8:	4a48      	ldr	r2, [pc, #288]	@ (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a40      	ldr	r2, [pc, #256]	@ (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x1ec>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3e      	ldr	r2, [pc, #248]	@ (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	@ (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1e0>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001efc:	2300      	movs	r3, #0
 8001efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0e:	492f      	ldr	r1, [pc, #188]	@ (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f28:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	492c      	ldr	r1, [pc, #176]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4928      	ldr	r1, [pc, #160]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f50:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4922      	ldr	r1, [pc, #136]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60cb      	str	r3, [r1, #12]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	491e      	ldr	r1, [pc, #120]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4918      	ldr	r1, [pc, #96]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4914      	ldr	r1, [pc, #80]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d021      	beq.n	8001fe4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	490e      	ldr	r1, [pc, #56]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	e021      	b.n	8001ff2 <HAL_GPIO_Init+0x2e2>
 8001fae:	bf00      	nop
 8001fb0:	10320000 	.word	0x10320000
 8001fb4:	10310000 	.word	0x10310000
 8001fb8:	10220000 	.word	0x10220000
 8001fbc:	10210000 	.word	0x10210000
 8001fc0:	10120000 	.word	0x10120000
 8001fc4:	10110000 	.word	0x10110000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
 8001fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_GPIO_Init+0x304>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4909      	ldr	r1, [pc, #36]	@ (8002014 <HAL_GPIO_Init+0x304>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae8e 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	372c      	adds	r7, #44	@ 0x2c
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	611a      	str	r2, [r3, #16]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e12b      	b.n	80022b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff f816 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	@ 0x24
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800209a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020ac:	f001 f960 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a81      	ldr	r2, [pc, #516]	@ (80022bc <HAL_I2C_Init+0x274>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d807      	bhi.n	80020cc <HAL_I2C_Init+0x84>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a80      	ldr	r2, [pc, #512]	@ (80022c0 <HAL_I2C_Init+0x278>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	bf94      	ite	ls
 80020c4:	2301      	movls	r3, #1
 80020c6:	2300      	movhi	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e006      	b.n	80020da <HAL_I2C_Init+0x92>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a7d      	ldr	r2, [pc, #500]	@ (80022c4 <HAL_I2C_Init+0x27c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bf94      	ite	ls
 80020d4:	2301      	movls	r3, #1
 80020d6:	2300      	movhi	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0e7      	b.n	80022b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a78      	ldr	r2, [pc, #480]	@ (80022c8 <HAL_I2C_Init+0x280>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9b      	lsrs	r3, r3, #18
 80020ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a6a      	ldr	r2, [pc, #424]	@ (80022bc <HAL_I2C_Init+0x274>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d802      	bhi.n	800211c <HAL_I2C_Init+0xd4>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3301      	adds	r3, #1
 800211a:	e009      	b.n	8002130 <HAL_I2C_Init+0xe8>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a69      	ldr	r2, [pc, #420]	@ (80022cc <HAL_I2C_Init+0x284>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	3301      	adds	r3, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002142:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	495c      	ldr	r1, [pc, #368]	@ (80022bc <HAL_I2C_Init+0x274>)
 800214c:	428b      	cmp	r3, r1
 800214e:	d819      	bhi.n	8002184 <HAL_I2C_Init+0x13c>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e59      	subs	r1, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fbb1 f3f3 	udiv	r3, r1, r3
 800215e:	1c59      	adds	r1, r3, #1
 8002160:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002164:	400b      	ands	r3, r1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_I2C_Init+0x138>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1e59      	subs	r1, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fbb1 f3f3 	udiv	r3, r1, r3
 8002178:	3301      	adds	r3, #1
 800217a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217e:	e051      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002180:	2304      	movs	r3, #4
 8002182:	e04f      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d111      	bne.n	80021b0 <HAL_I2C_Init+0x168>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	440b      	add	r3, r1
 800219a:	fbb0 f3f3 	udiv	r3, r0, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e012      	b.n	80021d6 <HAL_I2C_Init+0x18e>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	0099      	lsls	r1, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Init+0x196>
 80021da:	2301      	movs	r3, #1
 80021dc:	e022      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10e      	bne.n	8002204 <HAL_I2C_Init+0x1bc>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e58      	subs	r0, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	440b      	add	r3, r1
 80021f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002202:	e00f      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	6809      	ldr	r1, [r1, #0]
 8002228:	4313      	orrs	r3, r2
 800222a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002252:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6911      	ldr	r1, [r2, #16]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68d2      	ldr	r2, [r2, #12]
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	430b      	orrs	r3, r1
 8002266:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	000186a0 	.word	0x000186a0
 80022c0:	001e847f 	.word	0x001e847f
 80022c4:	003d08ff 	.word	0x003d08ff
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	460b      	mov	r3, r1
 80022de:	817b      	strh	r3, [r7, #10]
 80022e0:	4613      	mov	r3, r2
 80022e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7fe fffa 	bl	80012dc <HAL_GetTick>
 80022e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	f040 80e0 	bne.w	80024b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2319      	movs	r3, #25
 80022fe:	2201      	movs	r2, #1
 8002300:	4970      	ldr	r1, [pc, #448]	@ (80024c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fa92 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	e0d3      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2C_Master_Transmit+0x50>
 800231c:	2302      	movs	r3, #2
 800231e:	e0cc      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d007      	beq.n	8002346 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002354:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2221      	movs	r2, #33	@ 0x21
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2210      	movs	r2, #16
 8002362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	893a      	ldrh	r2, [r7, #8]
 8002376:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a50      	ldr	r2, [pc, #320]	@ (80024c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002386:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002388:	8979      	ldrh	r1, [r7, #10]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	6a3a      	ldr	r2, [r7, #32]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f9ca 	bl	8002728 <I2C_MasterRequestWrite>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e08d      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023b4:	e066      	b.n	8002484 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	6a39      	ldr	r1, [r7, #32]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fb50 	bl	8002a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00d      	beq.n	80023e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d107      	bne.n	80023de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06b      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b04      	cmp	r3, #4
 800241e:	d11b      	bne.n	8002458 <HAL_I2C_Master_Transmit+0x188>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d017      	beq.n	8002458 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	6a39      	ldr	r1, [r7, #32]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fb47 	bl	8002af0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	2b04      	cmp	r3, #4
 800246e:	d107      	bne.n	8002480 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e01a      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	d194      	bne.n	80023b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800249a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	00100002 	.word	0x00100002
 80024c8:	ffff0000 	.word	0xffff0000

080024cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	460b      	mov	r3, r1
 80024da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7fe fefe 	bl	80012dc <HAL_GetTick>
 80024e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	f040 8111 	bne.w	8002716 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2319      	movs	r3, #25
 80024fa:	2201      	movs	r2, #1
 80024fc:	4988      	ldr	r1, [pc, #544]	@ (8002720 <HAL_I2C_IsDeviceReady+0x254>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f994 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800250a:	2302      	movs	r3, #2
 800250c:	e104      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_I2C_IsDeviceReady+0x50>
 8002518:	2302      	movs	r3, #2
 800251a:	e0fd      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d007      	beq.n	8002542 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002550:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2224      	movs	r2, #36	@ 0x24
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a70      	ldr	r2, [pc, #448]	@ (8002724 <HAL_I2C_IsDeviceReady+0x258>)
 8002564:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002574:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f952 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800259c:	d103      	bne.n	80025a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0b6      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025aa:	897b      	ldrh	r3, [r7, #10]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fe8f 	bl	80012dc <HAL_GetTick>
 80025be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025ee:	e025      	b.n	800263c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7fe fe74 	bl	80012dc <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d302      	bcc.n	8002606 <HAL_I2C_IsDeviceReady+0x13a>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	22a0      	movs	r2, #160	@ 0xa0
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b02      	cmp	r3, #2
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2ba0      	cmp	r3, #160	@ 0xa0
 8002646:	d005      	beq.n	8002654 <HAL_I2C_IsDeviceReady+0x188>
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <HAL_I2C_IsDeviceReady+0x188>
 800264e:	7dbb      	ldrb	r3, [r7, #22]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0cd      	beq.n	80025f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d129      	bne.n	80026be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002678:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	2201      	movs	r2, #1
 8002698:	4921      	ldr	r1, [pc, #132]	@ (8002720 <HAL_I2C_IsDeviceReady+0x254>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f8c6 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e036      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e02c      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2319      	movs	r3, #25
 80026de:	2201      	movs	r2, #1
 80026e0:	490f      	ldr	r1, [pc, #60]	@ (8002720 <HAL_I2C_IsDeviceReady+0x254>)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f8a2 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e012      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f4ff af32 	bcc.w	8002566 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002716:	2302      	movs	r3, #2
  }
}
 8002718:	4618      	mov	r0, r3
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	00100002 	.word	0x00100002
 8002724:	ffff0000 	.word	0xffff0000

08002728 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	460b      	mov	r3, r1
 8002736:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d006      	beq.n	8002752 <I2C_MasterRequestWrite+0x2a>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d003      	beq.n	8002752 <I2C_MasterRequestWrite+0x2a>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002750:	d108      	bne.n	8002764 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e00b      	b.n	800277c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	2b12      	cmp	r3, #18
 800276a:	d107      	bne.n	800277c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800277a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f84f 	bl	800282c <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027a2:	d103      	bne.n	80027ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e035      	b.n	800281c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027b8:	d108      	bne.n	80027cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	e01b      	b.n	8002804 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027cc:	897b      	ldrh	r3, [r7, #10]
 80027ce:	11db      	asrs	r3, r3, #7
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 0306 	and.w	r3, r3, #6
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f063 030f 	orn	r3, r3, #15
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	490e      	ldr	r1, [pc, #56]	@ (8002824 <I2C_MasterRequestWrite+0xfc>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f898 	bl	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e010      	b.n	800281c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4907      	ldr	r1, [pc, #28]	@ (8002828 <I2C_MasterRequestWrite+0x100>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f888 	bl	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	00010008 	.word	0x00010008
 8002828:	00010002 	.word	0x00010002

0800282c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800283c:	e048      	b.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d044      	beq.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002846:	f7fe fd49 	bl	80012dc <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d139      	bne.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	0c1b      	lsrs	r3, r3, #16
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d10d      	bne.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	43da      	mvns	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	e00c      	b.n	800289c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	43da      	mvns	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4013      	ands	r3, r2
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d116      	bne.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e023      	b.n	8002918 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10d      	bne.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	43da      	mvns	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	e00c      	b.n	8002910 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	429a      	cmp	r2, r3
 8002914:	d093      	beq.n	800283e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292e:	e071      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800293e:	d123      	bne.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002958:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f043 0204 	orr.w	r2, r3, #4
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e067      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298e:	d041      	beq.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002990:	f7fe fca4 	bl	80012dc <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d302      	bcc.n	80029a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d136      	bne.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10c      	bne.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	43da      	mvns	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4013      	ands	r3, r2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e00b      	b.n	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	43da      	mvns	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e021      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10c      	bne.n	8002a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e00b      	b.n	8002a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f af6d 	bne.w	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a6c:	e034      	b.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f886 	bl	8002b80 <I2C_IsAcknowledgeFailed>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e034      	b.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d028      	beq.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe fc29 	bl	80012dc <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11d      	bne.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa6:	2b80      	cmp	r3, #128	@ 0x80
 8002aa8:	d016      	beq.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e007      	b.n	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae2:	2b80      	cmp	r3, #128	@ 0x80
 8002ae4:	d1c3      	bne.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002afc:	e034      	b.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f83e 	bl	8002b80 <I2C_IsAcknowledgeFailed>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e034      	b.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d028      	beq.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe fbe1 	bl	80012dc <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11d      	bne.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d016      	beq.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d1c3      	bne.n	8002afe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b96:	d11b      	bne.n	8002bd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ba0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	f043 0204 	orr.w	r2, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e272      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8087 	beq.w	8002d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfc:	4b92      	ldr	r3, [pc, #584]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d00c      	beq.n	8002c22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c08:	4b8f      	ldr	r3, [pc, #572]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d112      	bne.n	8002c3a <HAL_RCC_OscConfig+0x5e>
 8002c14:	4b8c      	ldr	r3, [pc, #560]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c22:	4b89      	ldr	r3, [pc, #548]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d06c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x12c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d168      	bne.n	8002d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e24c      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x76>
 8002c44:	4b80      	ldr	r3, [pc, #512]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a7f      	ldr	r2, [pc, #508]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	e02e      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x98>
 8002c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7a      	ldr	r2, [pc, #488]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b78      	ldr	r3, [pc, #480]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a77      	ldr	r2, [pc, #476]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0xbc>
 8002c7e:	4b72      	ldr	r3, [pc, #456]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a71      	ldr	r2, [pc, #452]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
 8002c98:	4b6b      	ldr	r3, [pc, #428]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b68      	ldr	r3, [pc, #416]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a67      	ldr	r2, [pc, #412]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fb10 	bl	80012dc <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fb0c 	bl	80012dc <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e200      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe4>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fafc 	bl	80012dc <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe faf8 	bl	80012dc <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	@ 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1ec      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	4b53      	ldr	r3, [pc, #332]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x10c>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d063      	beq.n	8002dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d16:	4b4c      	ldr	r3, [pc, #304]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d22:	4b49      	ldr	r3, [pc, #292]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x18c>
 8002d2e:	4b46      	ldr	r3, [pc, #280]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b43      	ldr	r3, [pc, #268]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x176>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1c0      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b3d      	ldr	r3, [pc, #244]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4939      	ldr	r1, [pc, #228]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e03a      	b.n	8002dde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b36      	ldr	r3, [pc, #216]	@ (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe fab1 	bl	80012dc <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fe faad 	bl	80012dc <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1a1      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	4b2d      	ldr	r3, [pc, #180]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4927      	ldr	r1, [pc, #156]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db2:	4b26      	ldr	r3, [pc, #152]	@ (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe fa90 	bl	80012dc <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fe fa8c 	bl	80012dc <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e180      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d03a      	beq.n	8002e60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d019      	beq.n	8002e26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7fe fa70 	bl	80012dc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e00:	f7fe fa6c 	bl	80012dc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e160      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f000 face 	bl	80033c0 <RCC_Delay>
 8002e24:	e01c      	b.n	8002e60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7fe fa56 	bl	80012dc <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e32:	e00f      	b.n	8002e54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e34:	f7fe fa52 	bl	80012dc <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d908      	bls.n	8002e54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e146      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	42420000 	.word	0x42420000
 8002e50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4b92      	ldr	r3, [pc, #584]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e9      	bne.n	8002e34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a6 	beq.w	8002fba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e72:	4b8b      	ldr	r3, [pc, #556]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4b88      	ldr	r3, [pc, #544]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a87      	ldr	r2, [pc, #540]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]
 8002e8a:	4b85      	ldr	r3, [pc, #532]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b82      	ldr	r3, [pc, #520]	@ (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fa13 	bl	80012dc <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fe fa0f 	bl	80012dc <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	@ 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e103      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b75      	ldr	r3, [pc, #468]	@ (80030a4 <HAL_RCC_OscConfig+0x4c8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x312>
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	e02d      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x334>
 8002ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a69      	ldr	r2, [pc, #420]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	4b67      	ldr	r3, [pc, #412]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a66      	ldr	r2, [pc, #408]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	e01c      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d10c      	bne.n	8002f32 <HAL_RCC_OscConfig+0x356>
 8002f18:	4b61      	ldr	r3, [pc, #388]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a60      	ldr	r2, [pc, #384]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	4b5e      	ldr	r3, [pc, #376]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a5d      	ldr	r2, [pc, #372]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e00b      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
 8002f32:	4b5b      	ldr	r3, [pc, #364]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a5a      	ldr	r2, [pc, #360]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b58      	ldr	r3, [pc, #352]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a57      	ldr	r2, [pc, #348]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d015      	beq.n	8002f7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7fe f9c3 	bl	80012dc <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fe f9bf 	bl	80012dc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0b1      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	4b4b      	ldr	r3, [pc, #300]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ee      	beq.n	8002f5a <HAL_RCC_OscConfig+0x37e>
 8002f7c:	e014      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe f9ad 	bl	80012dc <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe f9a9 	bl	80012dc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e09b      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	4b40      	ldr	r3, [pc, #256]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d105      	bne.n	8002fba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fae:	4b3c      	ldr	r3, [pc, #240]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8087 	beq.w	80030d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc4:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d061      	beq.n	8003094 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d146      	bne.n	8003066 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd8:	4b33      	ldr	r3, [pc, #204]	@ (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe f97d 	bl	80012dc <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe f979 	bl	80012dc <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e06d      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff8:	4b29      	ldr	r3, [pc, #164]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f0      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300c:	d108      	bne.n	8003020 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800300e:	4b24      	ldr	r3, [pc, #144]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4921      	ldr	r1, [pc, #132]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003020:	4b1f      	ldr	r3, [pc, #124]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a19      	ldr	r1, [r3, #32]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	430b      	orrs	r3, r1
 8003032:	491b      	ldr	r1, [pc, #108]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe f94d 	bl	80012dc <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe f949 	bl	80012dc <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e03d      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x46a>
 8003064:	e035      	b.n	80030d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe f936 	bl	80012dc <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe f932 	bl	80012dc <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e026      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x498>
 8003092:	e01e      	b.n	80030d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e019      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <HAL_RCC_OscConfig+0x500>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d0      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b6a      	ldr	r3, [pc, #424]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d910      	bls.n	8003124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b67      	ldr	r3, [pc, #412]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 0207 	bic.w	r2, r3, #7
 800310a:	4965      	ldr	r1, [pc, #404]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b63      	ldr	r3, [pc, #396]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b8      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800313c:	4b59      	ldr	r3, [pc, #356]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a58      	ldr	r2, [pc, #352]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003146:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003154:	4b53      	ldr	r3, [pc, #332]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a52      	ldr	r2, [pc, #328]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800315e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b50      	ldr	r3, [pc, #320]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	494d      	ldr	r1, [pc, #308]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d040      	beq.n	8003200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b47      	ldr	r3, [pc, #284]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d115      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	4b41      	ldr	r3, [pc, #260]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e073      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	4b3d      	ldr	r3, [pc, #244]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06b      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4936      	ldr	r1, [pc, #216]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d0:	f7fe f884 	bl	80012dc <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fe f880 	bl	80012dc <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e053      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b2d      	ldr	r3, [pc, #180]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b27      	ldr	r3, [pc, #156]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d210      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	4922      	ldr	r1, [pc, #136]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e032      	b.n	8003296 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b19      	ldr	r3, [pc, #100]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4916      	ldr	r1, [pc, #88]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325a:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490e      	ldr	r1, [pc, #56]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800326e:	f000 f821 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490a      	ldr	r1, [pc, #40]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <HAL_RCC_ClockConfig+0x1cc>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328a:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_RCC_ClockConfig+0x1d0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd ffe2 	bl	8001258 <HAL_InitTick>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08004dbc 	.word	0x08004dbc
 80032ac:	20000008 	.word	0x20000008
 80032b0:	2000000c 	.word	0x2000000c

080032b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x94>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x30>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x36>
 80032e2:	e027      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e4:	4b19      	ldr	r3, [pc, #100]	@ (800334c <HAL_RCC_GetSysClockFreq+0x98>)
 80032e6:	613b      	str	r3, [r7, #16]
      break;
 80032e8:	e027      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	0c9b      	lsrs	r3, r3, #18
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a17      	ldr	r2, [pc, #92]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003302:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x94>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	0c5b      	lsrs	r3, r3, #17
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	4a11      	ldr	r2, [pc, #68]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xa0>)
 800330e:	5cd3      	ldrb	r3, [r2, r3]
 8003310:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a0d      	ldr	r2, [pc, #52]	@ (800334c <HAL_RCC_GetSysClockFreq+0x98>)
 8003316:	fb03 f202 	mul.w	r2, r3, r2
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e004      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a0c      	ldr	r2, [pc, #48]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	613b      	str	r3, [r7, #16]
      break;
 8003332:	e002      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_RCC_GetSysClockFreq+0x98>)
 8003336:	613b      	str	r3, [r7, #16]
      break;
 8003338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333a:	693b      	ldr	r3, [r7, #16]
}
 800333c:	4618      	mov	r0, r3
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	007a1200 	.word	0x007a1200
 8003350:	08004dd4 	.word	0x08004dd4
 8003354:	08004de4 	.word	0x08004de4
 8003358:	003d0900 	.word	0x003d0900

0800335c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003360:	4b02      	ldr	r3, [pc, #8]	@ (800336c <HAL_RCC_GetHCLKFreq+0x10>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20000008 	.word	0x20000008

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003374:	f7ff fff2 	bl	800335c <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	@ (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	08004dcc 	.word	0x08004dcc

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800339c:	f7ff ffde 	bl	800335c <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0adb      	lsrs	r3, r3, #11
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	@ (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08004dcc 	.word	0x08004dcc

080033c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <RCC_Delay+0x34>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <RCC_Delay+0x38>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	0a5b      	lsrs	r3, r3, #9
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033dc:	bf00      	nop
  }
  while (Delay --);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e5a      	subs	r2, r3, #1
 80033e2:	60fa      	str	r2, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f9      	bne.n	80033dc <RCC_Delay+0x1c>
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	20000008 	.word	0x20000008
 80033f8:	10624dd3 	.word	0x10624dd3

080033fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d07d      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003418:	2300      	movs	r3, #0
 800341a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341c:	4b4f      	ldr	r3, [pc, #316]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10d      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	4b4c      	ldr	r3, [pc, #304]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4a4b      	ldr	r2, [pc, #300]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003432:	61d3      	str	r3, [r2, #28]
 8003434:	4b49      	ldr	r3, [pc, #292]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003440:	2301      	movs	r3, #1
 8003442:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b46      	ldr	r3, [pc, #280]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d118      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003450:	4b43      	ldr	r3, [pc, #268]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a42      	ldr	r2, [pc, #264]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345c:	f7fd ff3e 	bl	80012dc <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	e008      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003464:	f7fd ff3a 	bl	80012dc <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	@ 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e06d      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b3a      	ldr	r3, [pc, #232]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003482:	4b36      	ldr	r3, [pc, #216]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d02e      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d027      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a0:	4b2e      	ldr	r3, [pc, #184]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034b6:	4a29      	ldr	r2, [pc, #164]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d014      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c6:	f7fd ff09 	bl	80012dc <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fd ff05 	bl	80012dc <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e036      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ee      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f0:	4b1a      	ldr	r3, [pc, #104]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4917      	ldr	r1, [pc, #92]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d105      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003508:	4b14      	ldr	r3, [pc, #80]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	4a13      	ldr	r2, [pc, #76]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003512:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003520:	4b0e      	ldr	r3, [pc, #56]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	490b      	ldr	r1, [pc, #44]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800353e:	4b07      	ldr	r3, [pc, #28]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4904      	ldr	r1, [pc, #16]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	40007000 	.word	0x40007000
 8003564:	42420440 	.word	0x42420440

08003568 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b10      	cmp	r3, #16
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b10      	cmp	r3, #16
 800358e:	f200 808a 	bhi.w	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d045      	beq.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d075      	beq.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800359e:	e082      	b.n	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80035a0:	4b46      	ldr	r3, [pc, #280]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035a6:	4b45      	ldr	r3, [pc, #276]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d07b      	beq.n	80036aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	0c9b      	lsrs	r3, r3, #18
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	4a41      	ldr	r2, [pc, #260]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80035bc:	5cd3      	ldrb	r3, [r2, r3]
 80035be:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d015      	beq.n	80035f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ca:	4b3c      	ldr	r3, [pc, #240]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	0c5b      	lsrs	r3, r3, #17
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	4a3b      	ldr	r2, [pc, #236]	@ (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00d      	beq.n	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80035e4:	4a38      	ldr	r2, [pc, #224]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e004      	b.n	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4a34      	ldr	r2, [pc, #208]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003600:	4b2e      	ldr	r3, [pc, #184]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800360c:	d102      	bne.n	8003614 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	61bb      	str	r3, [r7, #24]
      break;
 8003612:	e04a      	b.n	80036aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4a2d      	ldr	r2, [pc, #180]	@ (80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	61bb      	str	r3, [r7, #24]
      break;
 8003622:	e042      	b.n	80036aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003624:	4b25      	ldr	r3, [pc, #148]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003634:	d108      	bne.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	e01f      	b.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003652:	d109      	bne.n	8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003654:	4b19      	ldr	r3, [pc, #100]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003660:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e00f      	b.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003672:	d11c      	bne.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003674:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d016      	beq.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003680:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003684:	61bb      	str	r3, [r7, #24]
      break;
 8003686:	e012      	b.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003688:	e011      	b.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800368a:	f7ff fe85 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 800368e:	4602      	mov	r2, r0
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0b9b      	lsrs	r3, r3, #14
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	3301      	adds	r3, #1
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]
      break;
 80036a4:	e004      	b.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80036ae:	bf00      	nop
    }
  }
  return (frequency);
 80036b0:	69bb      	ldr	r3, [r7, #24]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08004de8 	.word	0x08004de8
 80036c4:	08004df8 	.word	0x08004df8
 80036c8:	007a1200 	.word	0x007a1200
 80036cc:	003d0900 	.word	0x003d0900
 80036d0:	aaaaaaab 	.word	0xaaaaaaab

080036d4 <malloc>:
 80036d4:	4b02      	ldr	r3, [pc, #8]	@ (80036e0 <malloc+0xc>)
 80036d6:	4601      	mov	r1, r0
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	f000 b825 	b.w	8003728 <_malloc_r>
 80036de:	bf00      	nop
 80036e0:	20000014 	.word	0x20000014

080036e4 <sbrk_aligned>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003724 <sbrk_aligned+0x40>)
 80036e8:	460c      	mov	r4, r1
 80036ea:	6831      	ldr	r1, [r6, #0]
 80036ec:	4605      	mov	r5, r0
 80036ee:	b911      	cbnz	r1, 80036f6 <sbrk_aligned+0x12>
 80036f0:	f000 f8ce 	bl	8003890 <_sbrk_r>
 80036f4:	6030      	str	r0, [r6, #0]
 80036f6:	4621      	mov	r1, r4
 80036f8:	4628      	mov	r0, r5
 80036fa:	f000 f8c9 	bl	8003890 <_sbrk_r>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	d103      	bne.n	800370a <sbrk_aligned+0x26>
 8003702:	f04f 34ff 	mov.w	r4, #4294967295
 8003706:	4620      	mov	r0, r4
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	1cc4      	adds	r4, r0, #3
 800370c:	f024 0403 	bic.w	r4, r4, #3
 8003710:	42a0      	cmp	r0, r4
 8003712:	d0f8      	beq.n	8003706 <sbrk_aligned+0x22>
 8003714:	1a21      	subs	r1, r4, r0
 8003716:	4628      	mov	r0, r5
 8003718:	f000 f8ba 	bl	8003890 <_sbrk_r>
 800371c:	3001      	adds	r0, #1
 800371e:	d1f2      	bne.n	8003706 <sbrk_aligned+0x22>
 8003720:	e7ef      	b.n	8003702 <sbrk_aligned+0x1e>
 8003722:	bf00      	nop
 8003724:	20000538 	.word	0x20000538

08003728 <_malloc_r>:
 8003728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800372c:	1ccd      	adds	r5, r1, #3
 800372e:	f025 0503 	bic.w	r5, r5, #3
 8003732:	3508      	adds	r5, #8
 8003734:	2d0c      	cmp	r5, #12
 8003736:	bf38      	it	cc
 8003738:	250c      	movcc	r5, #12
 800373a:	2d00      	cmp	r5, #0
 800373c:	4606      	mov	r6, r0
 800373e:	db01      	blt.n	8003744 <_malloc_r+0x1c>
 8003740:	42a9      	cmp	r1, r5
 8003742:	d904      	bls.n	800374e <_malloc_r+0x26>
 8003744:	230c      	movs	r3, #12
 8003746:	6033      	str	r3, [r6, #0]
 8003748:	2000      	movs	r0, #0
 800374a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800374e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003824 <_malloc_r+0xfc>
 8003752:	f000 f869 	bl	8003828 <__malloc_lock>
 8003756:	f8d8 3000 	ldr.w	r3, [r8]
 800375a:	461c      	mov	r4, r3
 800375c:	bb44      	cbnz	r4, 80037b0 <_malloc_r+0x88>
 800375e:	4629      	mov	r1, r5
 8003760:	4630      	mov	r0, r6
 8003762:	f7ff ffbf 	bl	80036e4 <sbrk_aligned>
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	4604      	mov	r4, r0
 800376a:	d158      	bne.n	800381e <_malloc_r+0xf6>
 800376c:	f8d8 4000 	ldr.w	r4, [r8]
 8003770:	4627      	mov	r7, r4
 8003772:	2f00      	cmp	r7, #0
 8003774:	d143      	bne.n	80037fe <_malloc_r+0xd6>
 8003776:	2c00      	cmp	r4, #0
 8003778:	d04b      	beq.n	8003812 <_malloc_r+0xea>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	4639      	mov	r1, r7
 800377e:	4630      	mov	r0, r6
 8003780:	eb04 0903 	add.w	r9, r4, r3
 8003784:	f000 f884 	bl	8003890 <_sbrk_r>
 8003788:	4581      	cmp	r9, r0
 800378a:	d142      	bne.n	8003812 <_malloc_r+0xea>
 800378c:	6821      	ldr	r1, [r4, #0]
 800378e:	4630      	mov	r0, r6
 8003790:	1a6d      	subs	r5, r5, r1
 8003792:	4629      	mov	r1, r5
 8003794:	f7ff ffa6 	bl	80036e4 <sbrk_aligned>
 8003798:	3001      	adds	r0, #1
 800379a:	d03a      	beq.n	8003812 <_malloc_r+0xea>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	442b      	add	r3, r5
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	f8d8 3000 	ldr.w	r3, [r8]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	bb62      	cbnz	r2, 8003804 <_malloc_r+0xdc>
 80037aa:	f8c8 7000 	str.w	r7, [r8]
 80037ae:	e00f      	b.n	80037d0 <_malloc_r+0xa8>
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	1b52      	subs	r2, r2, r5
 80037b4:	d420      	bmi.n	80037f8 <_malloc_r+0xd0>
 80037b6:	2a0b      	cmp	r2, #11
 80037b8:	d917      	bls.n	80037ea <_malloc_r+0xc2>
 80037ba:	1961      	adds	r1, r4, r5
 80037bc:	42a3      	cmp	r3, r4
 80037be:	6025      	str	r5, [r4, #0]
 80037c0:	bf18      	it	ne
 80037c2:	6059      	strne	r1, [r3, #4]
 80037c4:	6863      	ldr	r3, [r4, #4]
 80037c6:	bf08      	it	eq
 80037c8:	f8c8 1000 	streq.w	r1, [r8]
 80037cc:	5162      	str	r2, [r4, r5]
 80037ce:	604b      	str	r3, [r1, #4]
 80037d0:	4630      	mov	r0, r6
 80037d2:	f000 f82f 	bl	8003834 <__malloc_unlock>
 80037d6:	f104 000b 	add.w	r0, r4, #11
 80037da:	1d23      	adds	r3, r4, #4
 80037dc:	f020 0007 	bic.w	r0, r0, #7
 80037e0:	1ac2      	subs	r2, r0, r3
 80037e2:	bf1c      	itt	ne
 80037e4:	1a1b      	subne	r3, r3, r0
 80037e6:	50a3      	strne	r3, [r4, r2]
 80037e8:	e7af      	b.n	800374a <_malloc_r+0x22>
 80037ea:	6862      	ldr	r2, [r4, #4]
 80037ec:	42a3      	cmp	r3, r4
 80037ee:	bf0c      	ite	eq
 80037f0:	f8c8 2000 	streq.w	r2, [r8]
 80037f4:	605a      	strne	r2, [r3, #4]
 80037f6:	e7eb      	b.n	80037d0 <_malloc_r+0xa8>
 80037f8:	4623      	mov	r3, r4
 80037fa:	6864      	ldr	r4, [r4, #4]
 80037fc:	e7ae      	b.n	800375c <_malloc_r+0x34>
 80037fe:	463c      	mov	r4, r7
 8003800:	687f      	ldr	r7, [r7, #4]
 8003802:	e7b6      	b.n	8003772 <_malloc_r+0x4a>
 8003804:	461a      	mov	r2, r3
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	42a3      	cmp	r3, r4
 800380a:	d1fb      	bne.n	8003804 <_malloc_r+0xdc>
 800380c:	2300      	movs	r3, #0
 800380e:	6053      	str	r3, [r2, #4]
 8003810:	e7de      	b.n	80037d0 <_malloc_r+0xa8>
 8003812:	230c      	movs	r3, #12
 8003814:	4630      	mov	r0, r6
 8003816:	6033      	str	r3, [r6, #0]
 8003818:	f000 f80c 	bl	8003834 <__malloc_unlock>
 800381c:	e794      	b.n	8003748 <_malloc_r+0x20>
 800381e:	6005      	str	r5, [r0, #0]
 8003820:	e7d6      	b.n	80037d0 <_malloc_r+0xa8>
 8003822:	bf00      	nop
 8003824:	2000053c 	.word	0x2000053c

08003828 <__malloc_lock>:
 8003828:	4801      	ldr	r0, [pc, #4]	@ (8003830 <__malloc_lock+0x8>)
 800382a:	f000 b86b 	b.w	8003904 <__retarget_lock_acquire_recursive>
 800382e:	bf00      	nop
 8003830:	2000067c 	.word	0x2000067c

08003834 <__malloc_unlock>:
 8003834:	4801      	ldr	r0, [pc, #4]	@ (800383c <__malloc_unlock+0x8>)
 8003836:	f000 b866 	b.w	8003906 <__retarget_lock_release_recursive>
 800383a:	bf00      	nop
 800383c:	2000067c 	.word	0x2000067c

08003840 <siprintf>:
 8003840:	b40e      	push	{r1, r2, r3}
 8003842:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003846:	b500      	push	{lr}
 8003848:	b09c      	sub	sp, #112	@ 0x70
 800384a:	ab1d      	add	r3, sp, #116	@ 0x74
 800384c:	9002      	str	r0, [sp, #8]
 800384e:	9006      	str	r0, [sp, #24]
 8003850:	9107      	str	r1, [sp, #28]
 8003852:	9104      	str	r1, [sp, #16]
 8003854:	4808      	ldr	r0, [pc, #32]	@ (8003878 <siprintf+0x38>)
 8003856:	4909      	ldr	r1, [pc, #36]	@ (800387c <siprintf+0x3c>)
 8003858:	f853 2b04 	ldr.w	r2, [r3], #4
 800385c:	9105      	str	r1, [sp, #20]
 800385e:	6800      	ldr	r0, [r0, #0]
 8003860:	a902      	add	r1, sp, #8
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	f000 f8f4 	bl	8003a50 <_svfiprintf_r>
 8003868:	2200      	movs	r2, #0
 800386a:	9b02      	ldr	r3, [sp, #8]
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	b01c      	add	sp, #112	@ 0x70
 8003870:	f85d eb04 	ldr.w	lr, [sp], #4
 8003874:	b003      	add	sp, #12
 8003876:	4770      	bx	lr
 8003878:	20000014 	.word	0x20000014
 800387c:	ffff0208 	.word	0xffff0208

08003880 <memset>:
 8003880:	4603      	mov	r3, r0
 8003882:	4402      	add	r2, r0
 8003884:	4293      	cmp	r3, r2
 8003886:	d100      	bne.n	800388a <memset+0xa>
 8003888:	4770      	bx	lr
 800388a:	f803 1b01 	strb.w	r1, [r3], #1
 800388e:	e7f9      	b.n	8003884 <memset+0x4>

08003890 <_sbrk_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	2300      	movs	r3, #0
 8003894:	4d05      	ldr	r5, [pc, #20]	@ (80038ac <_sbrk_r+0x1c>)
 8003896:	4604      	mov	r4, r0
 8003898:	4608      	mov	r0, r1
 800389a:	602b      	str	r3, [r5, #0]
 800389c:	f7fd fc64 	bl	8001168 <_sbrk>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	d102      	bne.n	80038aa <_sbrk_r+0x1a>
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	b103      	cbz	r3, 80038aa <_sbrk_r+0x1a>
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
 80038ac:	20000678 	.word	0x20000678

080038b0 <__errno>:
 80038b0:	4b01      	ldr	r3, [pc, #4]	@ (80038b8 <__errno+0x8>)
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000014 	.word	0x20000014

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	2600      	movs	r6, #0
 80038c0:	4d0c      	ldr	r5, [pc, #48]	@ (80038f4 <__libc_init_array+0x38>)
 80038c2:	4c0d      	ldr	r4, [pc, #52]	@ (80038f8 <__libc_init_array+0x3c>)
 80038c4:	1b64      	subs	r4, r4, r5
 80038c6:	10a4      	asrs	r4, r4, #2
 80038c8:	42a6      	cmp	r6, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	f000 fbba 	bl	8004044 <_init>
 80038d0:	2600      	movs	r6, #0
 80038d2:	4d0a      	ldr	r5, [pc, #40]	@ (80038fc <__libc_init_array+0x40>)
 80038d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003900 <__libc_init_array+0x44>)
 80038d6:	1b64      	subs	r4, r4, r5
 80038d8:	10a4      	asrs	r4, r4, #2
 80038da:	42a6      	cmp	r6, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e4:	4798      	blx	r3
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ee:	4798      	blx	r3
 80038f0:	3601      	adds	r6, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
 80038f4:	08004e30 	.word	0x08004e30
 80038f8:	08004e30 	.word	0x08004e30
 80038fc:	08004e30 	.word	0x08004e30
 8003900:	08004e34 	.word	0x08004e34

08003904 <__retarget_lock_acquire_recursive>:
 8003904:	4770      	bx	lr

08003906 <__retarget_lock_release_recursive>:
 8003906:	4770      	bx	lr

08003908 <_free_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4605      	mov	r5, r0
 800390c:	2900      	cmp	r1, #0
 800390e:	d040      	beq.n	8003992 <_free_r+0x8a>
 8003910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003914:	1f0c      	subs	r4, r1, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	bfb8      	it	lt
 800391a:	18e4      	addlt	r4, r4, r3
 800391c:	f7ff ff84 	bl	8003828 <__malloc_lock>
 8003920:	4a1c      	ldr	r2, [pc, #112]	@ (8003994 <_free_r+0x8c>)
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	b933      	cbnz	r3, 8003934 <_free_r+0x2c>
 8003926:	6063      	str	r3, [r4, #4]
 8003928:	6014      	str	r4, [r2, #0]
 800392a:	4628      	mov	r0, r5
 800392c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003930:	f7ff bf80 	b.w	8003834 <__malloc_unlock>
 8003934:	42a3      	cmp	r3, r4
 8003936:	d908      	bls.n	800394a <_free_r+0x42>
 8003938:	6820      	ldr	r0, [r4, #0]
 800393a:	1821      	adds	r1, r4, r0
 800393c:	428b      	cmp	r3, r1
 800393e:	bf01      	itttt	eq
 8003940:	6819      	ldreq	r1, [r3, #0]
 8003942:	685b      	ldreq	r3, [r3, #4]
 8003944:	1809      	addeq	r1, r1, r0
 8003946:	6021      	streq	r1, [r4, #0]
 8003948:	e7ed      	b.n	8003926 <_free_r+0x1e>
 800394a:	461a      	mov	r2, r3
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b10b      	cbz	r3, 8003954 <_free_r+0x4c>
 8003950:	42a3      	cmp	r3, r4
 8003952:	d9fa      	bls.n	800394a <_free_r+0x42>
 8003954:	6811      	ldr	r1, [r2, #0]
 8003956:	1850      	adds	r0, r2, r1
 8003958:	42a0      	cmp	r0, r4
 800395a:	d10b      	bne.n	8003974 <_free_r+0x6c>
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	4401      	add	r1, r0
 8003960:	1850      	adds	r0, r2, r1
 8003962:	4283      	cmp	r3, r0
 8003964:	6011      	str	r1, [r2, #0]
 8003966:	d1e0      	bne.n	800392a <_free_r+0x22>
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4408      	add	r0, r1
 800396e:	6010      	str	r0, [r2, #0]
 8003970:	6053      	str	r3, [r2, #4]
 8003972:	e7da      	b.n	800392a <_free_r+0x22>
 8003974:	d902      	bls.n	800397c <_free_r+0x74>
 8003976:	230c      	movs	r3, #12
 8003978:	602b      	str	r3, [r5, #0]
 800397a:	e7d6      	b.n	800392a <_free_r+0x22>
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	1821      	adds	r1, r4, r0
 8003980:	428b      	cmp	r3, r1
 8003982:	bf01      	itttt	eq
 8003984:	6819      	ldreq	r1, [r3, #0]
 8003986:	685b      	ldreq	r3, [r3, #4]
 8003988:	1809      	addeq	r1, r1, r0
 800398a:	6021      	streq	r1, [r4, #0]
 800398c:	6063      	str	r3, [r4, #4]
 800398e:	6054      	str	r4, [r2, #4]
 8003990:	e7cb      	b.n	800392a <_free_r+0x22>
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	2000053c 	.word	0x2000053c

08003998 <__ssputs_r>:
 8003998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	461f      	mov	r7, r3
 800399e:	688e      	ldr	r6, [r1, #8]
 80039a0:	4682      	mov	sl, r0
 80039a2:	42be      	cmp	r6, r7
 80039a4:	460c      	mov	r4, r1
 80039a6:	4690      	mov	r8, r2
 80039a8:	680b      	ldr	r3, [r1, #0]
 80039aa:	d82d      	bhi.n	8003a08 <__ssputs_r+0x70>
 80039ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039b4:	d026      	beq.n	8003a04 <__ssputs_r+0x6c>
 80039b6:	6965      	ldr	r5, [r4, #20]
 80039b8:	6909      	ldr	r1, [r1, #16]
 80039ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039be:	eba3 0901 	sub.w	r9, r3, r1
 80039c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039c6:	1c7b      	adds	r3, r7, #1
 80039c8:	444b      	add	r3, r9
 80039ca:	106d      	asrs	r5, r5, #1
 80039cc:	429d      	cmp	r5, r3
 80039ce:	bf38      	it	cc
 80039d0:	461d      	movcc	r5, r3
 80039d2:	0553      	lsls	r3, r2, #21
 80039d4:	d527      	bpl.n	8003a26 <__ssputs_r+0x8e>
 80039d6:	4629      	mov	r1, r5
 80039d8:	f7ff fea6 	bl	8003728 <_malloc_r>
 80039dc:	4606      	mov	r6, r0
 80039de:	b360      	cbz	r0, 8003a3a <__ssputs_r+0xa2>
 80039e0:	464a      	mov	r2, r9
 80039e2:	6921      	ldr	r1, [r4, #16]
 80039e4:	f000 faea 	bl	8003fbc <memcpy>
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	6126      	str	r6, [r4, #16]
 80039f6:	444e      	add	r6, r9
 80039f8:	6026      	str	r6, [r4, #0]
 80039fa:	463e      	mov	r6, r7
 80039fc:	6165      	str	r5, [r4, #20]
 80039fe:	eba5 0509 	sub.w	r5, r5, r9
 8003a02:	60a5      	str	r5, [r4, #8]
 8003a04:	42be      	cmp	r6, r7
 8003a06:	d900      	bls.n	8003a0a <__ssputs_r+0x72>
 8003a08:	463e      	mov	r6, r7
 8003a0a:	4632      	mov	r2, r6
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	f000 faac 	bl	8003f6c <memmove>
 8003a14:	2000      	movs	r0, #0
 8003a16:	68a3      	ldr	r3, [r4, #8]
 8003a18:	1b9b      	subs	r3, r3, r6
 8003a1a:	60a3      	str	r3, [r4, #8]
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	4433      	add	r3, r6
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a26:	462a      	mov	r2, r5
 8003a28:	f000 fad6 	bl	8003fd8 <_realloc_r>
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d1e0      	bne.n	80039f4 <__ssputs_r+0x5c>
 8003a32:	4650      	mov	r0, sl
 8003a34:	6921      	ldr	r1, [r4, #16]
 8003a36:	f7ff ff67 	bl	8003908 <_free_r>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	f8ca 3000 	str.w	r3, [sl]
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295
 8003a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a4a:	81a3      	strh	r3, [r4, #12]
 8003a4c:	e7e9      	b.n	8003a22 <__ssputs_r+0x8a>
	...

08003a50 <_svfiprintf_r>:
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a54:	4698      	mov	r8, r3
 8003a56:	898b      	ldrh	r3, [r1, #12]
 8003a58:	4607      	mov	r7, r0
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	460d      	mov	r5, r1
 8003a5e:	4614      	mov	r4, r2
 8003a60:	b09d      	sub	sp, #116	@ 0x74
 8003a62:	d510      	bpl.n	8003a86 <_svfiprintf_r+0x36>
 8003a64:	690b      	ldr	r3, [r1, #16]
 8003a66:	b973      	cbnz	r3, 8003a86 <_svfiprintf_r+0x36>
 8003a68:	2140      	movs	r1, #64	@ 0x40
 8003a6a:	f7ff fe5d 	bl	8003728 <_malloc_r>
 8003a6e:	6028      	str	r0, [r5, #0]
 8003a70:	6128      	str	r0, [r5, #16]
 8003a72:	b930      	cbnz	r0, 8003a82 <_svfiprintf_r+0x32>
 8003a74:	230c      	movs	r3, #12
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	b01d      	add	sp, #116	@ 0x74
 8003a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a82:	2340      	movs	r3, #64	@ 0x40
 8003a84:	616b      	str	r3, [r5, #20]
 8003a86:	2300      	movs	r3, #0
 8003a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a90:	2330      	movs	r3, #48	@ 0x30
 8003a92:	f04f 0901 	mov.w	r9, #1
 8003a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003c34 <_svfiprintf_r+0x1e4>
 8003a9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	469a      	mov	sl, r3
 8003aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aaa:	b10a      	cbz	r2, 8003ab0 <_svfiprintf_r+0x60>
 8003aac:	2a25      	cmp	r2, #37	@ 0x25
 8003aae:	d1f9      	bne.n	8003aa4 <_svfiprintf_r+0x54>
 8003ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab4:	d00b      	beq.n	8003ace <_svfiprintf_r+0x7e>
 8003ab6:	465b      	mov	r3, fp
 8003ab8:	4622      	mov	r2, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	4638      	mov	r0, r7
 8003abe:	f7ff ff6b 	bl	8003998 <__ssputs_r>
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	f000 80a7 	beq.w	8003c16 <_svfiprintf_r+0x1c6>
 8003ac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aca:	445a      	add	r2, fp
 8003acc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ace:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 809f 	beq.w	8003c16 <_svfiprintf_r+0x1c6>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae2:	f10a 0a01 	add.w	sl, sl, #1
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	9307      	str	r3, [sp, #28]
 8003aea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003aee:	931a      	str	r3, [sp, #104]	@ 0x68
 8003af0:	4654      	mov	r4, sl
 8003af2:	2205      	movs	r2, #5
 8003af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af8:	484e      	ldr	r0, [pc, #312]	@ (8003c34 <_svfiprintf_r+0x1e4>)
 8003afa:	f000 fa51 	bl	8003fa0 <memchr>
 8003afe:	9a04      	ldr	r2, [sp, #16]
 8003b00:	b9d8      	cbnz	r0, 8003b3a <_svfiprintf_r+0xea>
 8003b02:	06d0      	lsls	r0, r2, #27
 8003b04:	bf44      	itt	mi
 8003b06:	2320      	movmi	r3, #32
 8003b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b0c:	0711      	lsls	r1, r2, #28
 8003b0e:	bf44      	itt	mi
 8003b10:	232b      	movmi	r3, #43	@ 0x2b
 8003b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b16:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b1c:	d015      	beq.n	8003b4a <_svfiprintf_r+0xfa>
 8003b1e:	4654      	mov	r4, sl
 8003b20:	2000      	movs	r0, #0
 8003b22:	f04f 0c0a 	mov.w	ip, #10
 8003b26:	9a07      	ldr	r2, [sp, #28]
 8003b28:	4621      	mov	r1, r4
 8003b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b2e:	3b30      	subs	r3, #48	@ 0x30
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	d94b      	bls.n	8003bcc <_svfiprintf_r+0x17c>
 8003b34:	b1b0      	cbz	r0, 8003b64 <_svfiprintf_r+0x114>
 8003b36:	9207      	str	r2, [sp, #28]
 8003b38:	e014      	b.n	8003b64 <_svfiprintf_r+0x114>
 8003b3a:	eba0 0308 	sub.w	r3, r0, r8
 8003b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b42:	4313      	orrs	r3, r2
 8003b44:	46a2      	mov	sl, r4
 8003b46:	9304      	str	r3, [sp, #16]
 8003b48:	e7d2      	b.n	8003af0 <_svfiprintf_r+0xa0>
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	1d19      	adds	r1, r3, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	9103      	str	r1, [sp, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfbb      	ittet	lt
 8003b56:	425b      	neglt	r3, r3
 8003b58:	f042 0202 	orrlt.w	r2, r2, #2
 8003b5c:	9307      	strge	r3, [sp, #28]
 8003b5e:	9307      	strlt	r3, [sp, #28]
 8003b60:	bfb8      	it	lt
 8003b62:	9204      	strlt	r2, [sp, #16]
 8003b64:	7823      	ldrb	r3, [r4, #0]
 8003b66:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b68:	d10a      	bne.n	8003b80 <_svfiprintf_r+0x130>
 8003b6a:	7863      	ldrb	r3, [r4, #1]
 8003b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b6e:	d132      	bne.n	8003bd6 <_svfiprintf_r+0x186>
 8003b70:	9b03      	ldr	r3, [sp, #12]
 8003b72:	3402      	adds	r4, #2
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	9203      	str	r2, [sp, #12]
 8003b7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b7e:	9305      	str	r3, [sp, #20]
 8003b80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003c38 <_svfiprintf_r+0x1e8>
 8003b84:	2203      	movs	r2, #3
 8003b86:	4650      	mov	r0, sl
 8003b88:	7821      	ldrb	r1, [r4, #0]
 8003b8a:	f000 fa09 	bl	8003fa0 <memchr>
 8003b8e:	b138      	cbz	r0, 8003ba0 <_svfiprintf_r+0x150>
 8003b90:	2240      	movs	r2, #64	@ 0x40
 8003b92:	9b04      	ldr	r3, [sp, #16]
 8003b94:	eba0 000a 	sub.w	r0, r0, sl
 8003b98:	4082      	lsls	r2, r0
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	3401      	adds	r4, #1
 8003b9e:	9304      	str	r3, [sp, #16]
 8003ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	4825      	ldr	r0, [pc, #148]	@ (8003c3c <_svfiprintf_r+0x1ec>)
 8003ba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bac:	f000 f9f8 	bl	8003fa0 <memchr>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d036      	beq.n	8003c22 <_svfiprintf_r+0x1d2>
 8003bb4:	4b22      	ldr	r3, [pc, #136]	@ (8003c40 <_svfiprintf_r+0x1f0>)
 8003bb6:	bb1b      	cbnz	r3, 8003c00 <_svfiprintf_r+0x1b0>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	3307      	adds	r3, #7
 8003bbc:	f023 0307 	bic.w	r3, r3, #7
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bc6:	4433      	add	r3, r6
 8003bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bca:	e76a      	b.n	8003aa2 <_svfiprintf_r+0x52>
 8003bcc:	460c      	mov	r4, r1
 8003bce:	2001      	movs	r0, #1
 8003bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bd4:	e7a8      	b.n	8003b28 <_svfiprintf_r+0xd8>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f04f 0c0a 	mov.w	ip, #10
 8003bdc:	4619      	mov	r1, r3
 8003bde:	3401      	adds	r4, #1
 8003be0:	9305      	str	r3, [sp, #20]
 8003be2:	4620      	mov	r0, r4
 8003be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003be8:	3a30      	subs	r2, #48	@ 0x30
 8003bea:	2a09      	cmp	r2, #9
 8003bec:	d903      	bls.n	8003bf6 <_svfiprintf_r+0x1a6>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0c6      	beq.n	8003b80 <_svfiprintf_r+0x130>
 8003bf2:	9105      	str	r1, [sp, #20]
 8003bf4:	e7c4      	b.n	8003b80 <_svfiprintf_r+0x130>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bfe:	e7f0      	b.n	8003be2 <_svfiprintf_r+0x192>
 8003c00:	ab03      	add	r3, sp, #12
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	462a      	mov	r2, r5
 8003c06:	4638      	mov	r0, r7
 8003c08:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <_svfiprintf_r+0x1f4>)
 8003c0a:	a904      	add	r1, sp, #16
 8003c0c:	f3af 8000 	nop.w
 8003c10:	1c42      	adds	r2, r0, #1
 8003c12:	4606      	mov	r6, r0
 8003c14:	d1d6      	bne.n	8003bc4 <_svfiprintf_r+0x174>
 8003c16:	89ab      	ldrh	r3, [r5, #12]
 8003c18:	065b      	lsls	r3, r3, #25
 8003c1a:	f53f af2d 	bmi.w	8003a78 <_svfiprintf_r+0x28>
 8003c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c20:	e72c      	b.n	8003a7c <_svfiprintf_r+0x2c>
 8003c22:	ab03      	add	r3, sp, #12
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	462a      	mov	r2, r5
 8003c28:	4638      	mov	r0, r7
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <_svfiprintf_r+0x1f4>)
 8003c2c:	a904      	add	r1, sp, #16
 8003c2e:	f000 f87d 	bl	8003d2c <_printf_i>
 8003c32:	e7ed      	b.n	8003c10 <_svfiprintf_r+0x1c0>
 8003c34:	08004dfa 	.word	0x08004dfa
 8003c38:	08004e00 	.word	0x08004e00
 8003c3c:	08004e04 	.word	0x08004e04
 8003c40:	00000000 	.word	0x00000000
 8003c44:	08003999 	.word	0x08003999

08003c48 <_printf_common>:
 8003c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	4616      	mov	r6, r2
 8003c4e:	4698      	mov	r8, r3
 8003c50:	688a      	ldr	r2, [r1, #8]
 8003c52:	690b      	ldr	r3, [r1, #16]
 8003c54:	4607      	mov	r7, r0
 8003c56:	4293      	cmp	r3, r2
 8003c58:	bfb8      	it	lt
 8003c5a:	4613      	movlt	r3, r2
 8003c5c:	6033      	str	r3, [r6, #0]
 8003c5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c62:	460c      	mov	r4, r1
 8003c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c68:	b10a      	cbz	r2, 8003c6e <_printf_common+0x26>
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	6033      	str	r3, [r6, #0]
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	0699      	lsls	r1, r3, #26
 8003c72:	bf42      	ittt	mi
 8003c74:	6833      	ldrmi	r3, [r6, #0]
 8003c76:	3302      	addmi	r3, #2
 8003c78:	6033      	strmi	r3, [r6, #0]
 8003c7a:	6825      	ldr	r5, [r4, #0]
 8003c7c:	f015 0506 	ands.w	r5, r5, #6
 8003c80:	d106      	bne.n	8003c90 <_printf_common+0x48>
 8003c82:	f104 0a19 	add.w	sl, r4, #25
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	6832      	ldr	r2, [r6, #0]
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	dc2b      	bgt.n	8003ce8 <_printf_common+0xa0>
 8003c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	3b00      	subs	r3, #0
 8003c98:	bf18      	it	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	0692      	lsls	r2, r2, #26
 8003c9e:	d430      	bmi.n	8003d02 <_printf_common+0xba>
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ca8:	47c8      	blx	r9
 8003caa:	3001      	adds	r0, #1
 8003cac:	d023      	beq.n	8003cf6 <_printf_common+0xae>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	6922      	ldr	r2, [r4, #16]
 8003cb2:	f003 0306 	and.w	r3, r3, #6
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	bf14      	ite	ne
 8003cba:	2500      	movne	r5, #0
 8003cbc:	6833      	ldreq	r3, [r6, #0]
 8003cbe:	f04f 0600 	mov.w	r6, #0
 8003cc2:	bf08      	it	eq
 8003cc4:	68e5      	ldreq	r5, [r4, #12]
 8003cc6:	f104 041a 	add.w	r4, r4, #26
 8003cca:	bf08      	it	eq
 8003ccc:	1aed      	subeq	r5, r5, r3
 8003cce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cd2:	bf08      	it	eq
 8003cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	bfc4      	itt	gt
 8003cdc:	1a9b      	subgt	r3, r3, r2
 8003cde:	18ed      	addgt	r5, r5, r3
 8003ce0:	42b5      	cmp	r5, r6
 8003ce2:	d11a      	bne.n	8003d1a <_printf_common+0xd2>
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	e008      	b.n	8003cfa <_printf_common+0xb2>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4652      	mov	r2, sl
 8003cec:	4641      	mov	r1, r8
 8003cee:	4638      	mov	r0, r7
 8003cf0:	47c8      	blx	r9
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d103      	bne.n	8003cfe <_printf_common+0xb6>
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfe:	3501      	adds	r5, #1
 8003d00:	e7c1      	b.n	8003c86 <_printf_common+0x3e>
 8003d02:	2030      	movs	r0, #48	@ 0x30
 8003d04:	18e1      	adds	r1, r4, r3
 8003d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d10:	4422      	add	r2, r4
 8003d12:	3302      	adds	r3, #2
 8003d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d18:	e7c2      	b.n	8003ca0 <_printf_common+0x58>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	4641      	mov	r1, r8
 8003d20:	4638      	mov	r0, r7
 8003d22:	47c8      	blx	r9
 8003d24:	3001      	adds	r0, #1
 8003d26:	d0e6      	beq.n	8003cf6 <_printf_common+0xae>
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7d9      	b.n	8003ce0 <_printf_common+0x98>

08003d2c <_printf_i>:
 8003d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d30:	7e0f      	ldrb	r7, [r1, #24]
 8003d32:	4691      	mov	r9, r2
 8003d34:	2f78      	cmp	r7, #120	@ 0x78
 8003d36:	4680      	mov	r8, r0
 8003d38:	460c      	mov	r4, r1
 8003d3a:	469a      	mov	sl, r3
 8003d3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d42:	d807      	bhi.n	8003d54 <_printf_i+0x28>
 8003d44:	2f62      	cmp	r7, #98	@ 0x62
 8003d46:	d80a      	bhi.n	8003d5e <_printf_i+0x32>
 8003d48:	2f00      	cmp	r7, #0
 8003d4a:	f000 80d3 	beq.w	8003ef4 <_printf_i+0x1c8>
 8003d4e:	2f58      	cmp	r7, #88	@ 0x58
 8003d50:	f000 80ba 	beq.w	8003ec8 <_printf_i+0x19c>
 8003d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d5c:	e03a      	b.n	8003dd4 <_printf_i+0xa8>
 8003d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d62:	2b15      	cmp	r3, #21
 8003d64:	d8f6      	bhi.n	8003d54 <_printf_i+0x28>
 8003d66:	a101      	add	r1, pc, #4	@ (adr r1, 8003d6c <_printf_i+0x40>)
 8003d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d6c:	08003dc5 	.word	0x08003dc5
 8003d70:	08003dd9 	.word	0x08003dd9
 8003d74:	08003d55 	.word	0x08003d55
 8003d78:	08003d55 	.word	0x08003d55
 8003d7c:	08003d55 	.word	0x08003d55
 8003d80:	08003d55 	.word	0x08003d55
 8003d84:	08003dd9 	.word	0x08003dd9
 8003d88:	08003d55 	.word	0x08003d55
 8003d8c:	08003d55 	.word	0x08003d55
 8003d90:	08003d55 	.word	0x08003d55
 8003d94:	08003d55 	.word	0x08003d55
 8003d98:	08003edb 	.word	0x08003edb
 8003d9c:	08003e03 	.word	0x08003e03
 8003da0:	08003e95 	.word	0x08003e95
 8003da4:	08003d55 	.word	0x08003d55
 8003da8:	08003d55 	.word	0x08003d55
 8003dac:	08003efd 	.word	0x08003efd
 8003db0:	08003d55 	.word	0x08003d55
 8003db4:	08003e03 	.word	0x08003e03
 8003db8:	08003d55 	.word	0x08003d55
 8003dbc:	08003d55 	.word	0x08003d55
 8003dc0:	08003e9d 	.word	0x08003e9d
 8003dc4:	6833      	ldr	r3, [r6, #0]
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6032      	str	r2, [r6, #0]
 8003dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e09e      	b.n	8003f16 <_printf_i+0x1ea>
 8003dd8:	6833      	ldr	r3, [r6, #0]
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	6031      	str	r1, [r6, #0]
 8003de0:	0606      	lsls	r6, r0, #24
 8003de2:	d501      	bpl.n	8003de8 <_printf_i+0xbc>
 8003de4:	681d      	ldr	r5, [r3, #0]
 8003de6:	e003      	b.n	8003df0 <_printf_i+0xc4>
 8003de8:	0645      	lsls	r5, r0, #25
 8003dea:	d5fb      	bpl.n	8003de4 <_printf_i+0xb8>
 8003dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003df0:	2d00      	cmp	r5, #0
 8003df2:	da03      	bge.n	8003dfc <_printf_i+0xd0>
 8003df4:	232d      	movs	r3, #45	@ 0x2d
 8003df6:	426d      	negs	r5, r5
 8003df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dfc:	230a      	movs	r3, #10
 8003dfe:	4859      	ldr	r0, [pc, #356]	@ (8003f64 <_printf_i+0x238>)
 8003e00:	e011      	b.n	8003e26 <_printf_i+0xfa>
 8003e02:	6821      	ldr	r1, [r4, #0]
 8003e04:	6833      	ldr	r3, [r6, #0]
 8003e06:	0608      	lsls	r0, r1, #24
 8003e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e0c:	d402      	bmi.n	8003e14 <_printf_i+0xe8>
 8003e0e:	0649      	lsls	r1, r1, #25
 8003e10:	bf48      	it	mi
 8003e12:	b2ad      	uxthmi	r5, r5
 8003e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	bf14      	ite	ne
 8003e1a:	230a      	movne	r3, #10
 8003e1c:	2308      	moveq	r3, #8
 8003e1e:	4851      	ldr	r0, [pc, #324]	@ (8003f64 <_printf_i+0x238>)
 8003e20:	2100      	movs	r1, #0
 8003e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e26:	6866      	ldr	r6, [r4, #4]
 8003e28:	2e00      	cmp	r6, #0
 8003e2a:	bfa8      	it	ge
 8003e2c:	6821      	ldrge	r1, [r4, #0]
 8003e2e:	60a6      	str	r6, [r4, #8]
 8003e30:	bfa4      	itt	ge
 8003e32:	f021 0104 	bicge.w	r1, r1, #4
 8003e36:	6021      	strge	r1, [r4, #0]
 8003e38:	b90d      	cbnz	r5, 8003e3e <_printf_i+0x112>
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	d04b      	beq.n	8003ed6 <_printf_i+0x1aa>
 8003e3e:	4616      	mov	r6, r2
 8003e40:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e44:	fb03 5711 	mls	r7, r3, r1, r5
 8003e48:	5dc7      	ldrb	r7, [r0, r7]
 8003e4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e4e:	462f      	mov	r7, r5
 8003e50:	42bb      	cmp	r3, r7
 8003e52:	460d      	mov	r5, r1
 8003e54:	d9f4      	bls.n	8003e40 <_printf_i+0x114>
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d10b      	bne.n	8003e72 <_printf_i+0x146>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	07df      	lsls	r7, r3, #31
 8003e5e:	d508      	bpl.n	8003e72 <_printf_i+0x146>
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	6861      	ldr	r1, [r4, #4]
 8003e64:	4299      	cmp	r1, r3
 8003e66:	bfde      	ittt	le
 8003e68:	2330      	movle	r3, #48	@ 0x30
 8003e6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e72:	1b92      	subs	r2, r2, r6
 8003e74:	6122      	str	r2, [r4, #16]
 8003e76:	464b      	mov	r3, r9
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4640      	mov	r0, r8
 8003e7c:	f8cd a000 	str.w	sl, [sp]
 8003e80:	aa03      	add	r2, sp, #12
 8003e82:	f7ff fee1 	bl	8003c48 <_printf_common>
 8003e86:	3001      	adds	r0, #1
 8003e88:	d14a      	bne.n	8003f20 <_printf_i+0x1f4>
 8003e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8e:	b004      	add	sp, #16
 8003e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	f043 0320 	orr.w	r3, r3, #32
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	2778      	movs	r7, #120	@ 0x78
 8003e9e:	4832      	ldr	r0, [pc, #200]	@ (8003f68 <_printf_i+0x23c>)
 8003ea0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	6831      	ldr	r1, [r6, #0]
 8003ea8:	061f      	lsls	r7, r3, #24
 8003eaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8003eae:	d402      	bmi.n	8003eb6 <_printf_i+0x18a>
 8003eb0:	065f      	lsls	r7, r3, #25
 8003eb2:	bf48      	it	mi
 8003eb4:	b2ad      	uxthmi	r5, r5
 8003eb6:	6031      	str	r1, [r6, #0]
 8003eb8:	07d9      	lsls	r1, r3, #31
 8003eba:	bf44      	itt	mi
 8003ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ec0:	6023      	strmi	r3, [r4, #0]
 8003ec2:	b11d      	cbz	r5, 8003ecc <_printf_i+0x1a0>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	e7ab      	b.n	8003e20 <_printf_i+0xf4>
 8003ec8:	4826      	ldr	r0, [pc, #152]	@ (8003f64 <_printf_i+0x238>)
 8003eca:	e7e9      	b.n	8003ea0 <_printf_i+0x174>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	f023 0320 	bic.w	r3, r3, #32
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	e7f6      	b.n	8003ec4 <_printf_i+0x198>
 8003ed6:	4616      	mov	r6, r2
 8003ed8:	e7bd      	b.n	8003e56 <_printf_i+0x12a>
 8003eda:	6833      	ldr	r3, [r6, #0]
 8003edc:	6825      	ldr	r5, [r4, #0]
 8003ede:	1d18      	adds	r0, r3, #4
 8003ee0:	6961      	ldr	r1, [r4, #20]
 8003ee2:	6030      	str	r0, [r6, #0]
 8003ee4:	062e      	lsls	r6, r5, #24
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	d501      	bpl.n	8003eee <_printf_i+0x1c2>
 8003eea:	6019      	str	r1, [r3, #0]
 8003eec:	e002      	b.n	8003ef4 <_printf_i+0x1c8>
 8003eee:	0668      	lsls	r0, r5, #25
 8003ef0:	d5fb      	bpl.n	8003eea <_printf_i+0x1be>
 8003ef2:	8019      	strh	r1, [r3, #0]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4616      	mov	r6, r2
 8003ef8:	6123      	str	r3, [r4, #16]
 8003efa:	e7bc      	b.n	8003e76 <_printf_i+0x14a>
 8003efc:	6833      	ldr	r3, [r6, #0]
 8003efe:	2100      	movs	r1, #0
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	6032      	str	r2, [r6, #0]
 8003f04:	681e      	ldr	r6, [r3, #0]
 8003f06:	6862      	ldr	r2, [r4, #4]
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f000 f849 	bl	8003fa0 <memchr>
 8003f0e:	b108      	cbz	r0, 8003f14 <_printf_i+0x1e8>
 8003f10:	1b80      	subs	r0, r0, r6
 8003f12:	6060      	str	r0, [r4, #4]
 8003f14:	6863      	ldr	r3, [r4, #4]
 8003f16:	6123      	str	r3, [r4, #16]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f1e:	e7aa      	b.n	8003e76 <_printf_i+0x14a>
 8003f20:	4632      	mov	r2, r6
 8003f22:	4649      	mov	r1, r9
 8003f24:	4640      	mov	r0, r8
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	47d0      	blx	sl
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d0ad      	beq.n	8003e8a <_printf_i+0x15e>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	079b      	lsls	r3, r3, #30
 8003f32:	d413      	bmi.n	8003f5c <_printf_i+0x230>
 8003f34:	68e0      	ldr	r0, [r4, #12]
 8003f36:	9b03      	ldr	r3, [sp, #12]
 8003f38:	4298      	cmp	r0, r3
 8003f3a:	bfb8      	it	lt
 8003f3c:	4618      	movlt	r0, r3
 8003f3e:	e7a6      	b.n	8003e8e <_printf_i+0x162>
 8003f40:	2301      	movs	r3, #1
 8003f42:	4632      	mov	r2, r6
 8003f44:	4649      	mov	r1, r9
 8003f46:	4640      	mov	r0, r8
 8003f48:	47d0      	blx	sl
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d09d      	beq.n	8003e8a <_printf_i+0x15e>
 8003f4e:	3501      	adds	r5, #1
 8003f50:	68e3      	ldr	r3, [r4, #12]
 8003f52:	9903      	ldr	r1, [sp, #12]
 8003f54:	1a5b      	subs	r3, r3, r1
 8003f56:	42ab      	cmp	r3, r5
 8003f58:	dcf2      	bgt.n	8003f40 <_printf_i+0x214>
 8003f5a:	e7eb      	b.n	8003f34 <_printf_i+0x208>
 8003f5c:	2500      	movs	r5, #0
 8003f5e:	f104 0619 	add.w	r6, r4, #25
 8003f62:	e7f5      	b.n	8003f50 <_printf_i+0x224>
 8003f64:	08004e0b 	.word	0x08004e0b
 8003f68:	08004e1c 	.word	0x08004e1c

08003f6c <memmove>:
 8003f6c:	4288      	cmp	r0, r1
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	eb01 0402 	add.w	r4, r1, r2
 8003f74:	d902      	bls.n	8003f7c <memmove+0x10>
 8003f76:	4284      	cmp	r4, r0
 8003f78:	4623      	mov	r3, r4
 8003f7a:	d807      	bhi.n	8003f8c <memmove+0x20>
 8003f7c:	1e43      	subs	r3, r0, #1
 8003f7e:	42a1      	cmp	r1, r4
 8003f80:	d008      	beq.n	8003f94 <memmove+0x28>
 8003f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f8a:	e7f8      	b.n	8003f7e <memmove+0x12>
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	4402      	add	r2, r0
 8003f90:	428a      	cmp	r2, r1
 8003f92:	d100      	bne.n	8003f96 <memmove+0x2a>
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f9e:	e7f7      	b.n	8003f90 <memmove+0x24>

08003fa0 <memchr>:
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	b510      	push	{r4, lr}
 8003fa4:	b2c9      	uxtb	r1, r1
 8003fa6:	4402      	add	r2, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	d101      	bne.n	8003fb2 <memchr+0x12>
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e003      	b.n	8003fba <memchr+0x1a>
 8003fb2:	7804      	ldrb	r4, [r0, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	428c      	cmp	r4, r1
 8003fb8:	d1f6      	bne.n	8003fa8 <memchr+0x8>
 8003fba:	bd10      	pop	{r4, pc}

08003fbc <memcpy>:
 8003fbc:	440a      	add	r2, r1
 8003fbe:	4291      	cmp	r1, r2
 8003fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fc4:	d100      	bne.n	8003fc8 <memcpy+0xc>
 8003fc6:	4770      	bx	lr
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fce:	4291      	cmp	r1, r2
 8003fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fd4:	d1f9      	bne.n	8003fca <memcpy+0xe>
 8003fd6:	bd10      	pop	{r4, pc}

08003fd8 <_realloc_r>:
 8003fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fdc:	4680      	mov	r8, r0
 8003fde:	4615      	mov	r5, r2
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	b921      	cbnz	r1, 8003fee <_realloc_r+0x16>
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fea:	f7ff bb9d 	b.w	8003728 <_malloc_r>
 8003fee:	b92a      	cbnz	r2, 8003ffc <_realloc_r+0x24>
 8003ff0:	f7ff fc8a 	bl	8003908 <_free_r>
 8003ff4:	2400      	movs	r4, #0
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffc:	f000 f81a 	bl	8004034 <_malloc_usable_size_r>
 8004000:	4285      	cmp	r5, r0
 8004002:	4606      	mov	r6, r0
 8004004:	d802      	bhi.n	800400c <_realloc_r+0x34>
 8004006:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800400a:	d8f4      	bhi.n	8003ff6 <_realloc_r+0x1e>
 800400c:	4629      	mov	r1, r5
 800400e:	4640      	mov	r0, r8
 8004010:	f7ff fb8a 	bl	8003728 <_malloc_r>
 8004014:	4607      	mov	r7, r0
 8004016:	2800      	cmp	r0, #0
 8004018:	d0ec      	beq.n	8003ff4 <_realloc_r+0x1c>
 800401a:	42b5      	cmp	r5, r6
 800401c:	462a      	mov	r2, r5
 800401e:	4621      	mov	r1, r4
 8004020:	bf28      	it	cs
 8004022:	4632      	movcs	r2, r6
 8004024:	f7ff ffca 	bl	8003fbc <memcpy>
 8004028:	4621      	mov	r1, r4
 800402a:	4640      	mov	r0, r8
 800402c:	f7ff fc6c 	bl	8003908 <_free_r>
 8004030:	463c      	mov	r4, r7
 8004032:	e7e0      	b.n	8003ff6 <_realloc_r+0x1e>

08004034 <_malloc_usable_size_r>:
 8004034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004038:	1f18      	subs	r0, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	bfbc      	itt	lt
 800403e:	580b      	ldrlt	r3, [r1, r0]
 8004040:	18c0      	addlt	r0, r0, r3
 8004042:	4770      	bx	lr

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
